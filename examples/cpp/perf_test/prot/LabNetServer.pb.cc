// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LabNetServer.proto

#include "LabNetServer.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_LabNet_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PinId_LabNet_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
namespace LabNetProt {
namespace Server {
class DigitalOutStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DigitalOutState> _instance;
} _DigitalOutState_default_instance_;
class DigitalInStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DigitalInState> _instance;
} _DigitalInState_default_instance_;
class NewByteDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NewByteData> _instance;
} _NewByteData_default_instance_;
class DataWriteCompleteDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DataWriteComplete> _instance;
} _DataWriteComplete_default_instance_;
class InterfaceInitResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InterfaceInitResult> _instance;
} _InterfaceInitResult_default_instance_;
class InterfaceLostDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InterfaceLost> _instance;
} _InterfaceLost_default_instance_;
class InterfaceReconnectedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InterfaceReconnected> _instance;
} _InterfaceReconnected_default_instance_;
class DigitalInInitResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DigitalInInitResult> _instance;
} _DigitalInInitResult_default_instance_;
class DigitalOutInitResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DigitalOutInitResult> _instance;
} _DigitalOutInitResult_default_instance_;
class OnlyOneConnectionAllowedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OnlyOneConnectionAllowed> _instance;
} _OnlyOneConnectionAllowed_default_instance_;
class LabNetResetReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LabNetResetReply> _instance;
} _LabNetResetReply_default_instance_;
class LabNetIdReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LabNetIdReply> _instance;
} _LabNetIdReply_default_instance_;
class DigitalOutLoopStartResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DigitalOutLoopStartResult> _instance;
} _DigitalOutLoopStartResult_default_instance_;
class DigitalOutLoopStoppedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DigitalOutLoopStopped> _instance;
} _DigitalOutLoopStopped_default_instance_;
}  // namespace Server
}  // namespace LabNetProt
static void InitDefaultsscc_info_DataWriteComplete_LabNetServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LabNetProt::Server::_DataWriteComplete_default_instance_;
    new (ptr) ::LabNetProt::Server::DataWriteComplete();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DataWriteComplete_LabNetServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DataWriteComplete_LabNetServer_2eproto}, {
      &scc_info_PinId_LabNet_2eproto.base,}};

static void InitDefaultsscc_info_DigitalInInitResult_LabNetServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LabNetProt::Server::_DigitalInInitResult_default_instance_;
    new (ptr) ::LabNetProt::Server::DigitalInInitResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DigitalInInitResult_LabNetServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DigitalInInitResult_LabNetServer_2eproto}, {}};

static void InitDefaultsscc_info_DigitalInState_LabNetServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LabNetProt::Server::_DigitalInState_default_instance_;
    new (ptr) ::LabNetProt::Server::DigitalInState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DigitalInState_LabNetServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_DigitalInState_LabNetServer_2eproto}, {
      &scc_info_PinId_LabNet_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_DigitalOutInitResult_LabNetServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LabNetProt::Server::_DigitalOutInitResult_default_instance_;
    new (ptr) ::LabNetProt::Server::DigitalOutInitResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DigitalOutInitResult_LabNetServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DigitalOutInitResult_LabNetServer_2eproto}, {}};

static void InitDefaultsscc_info_DigitalOutLoopStartResult_LabNetServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LabNetProt::Server::_DigitalOutLoopStartResult_default_instance_;
    new (ptr) ::LabNetProt::Server::DigitalOutLoopStartResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DigitalOutLoopStartResult_LabNetServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DigitalOutLoopStartResult_LabNetServer_2eproto}, {}};

static void InitDefaultsscc_info_DigitalOutLoopStopped_LabNetServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LabNetProt::Server::_DigitalOutLoopStopped_default_instance_;
    new (ptr) ::LabNetProt::Server::DigitalOutLoopStopped();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DigitalOutLoopStopped_LabNetServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DigitalOutLoopStopped_LabNetServer_2eproto}, {}};

static void InitDefaultsscc_info_DigitalOutState_LabNetServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LabNetProt::Server::_DigitalOutState_default_instance_;
    new (ptr) ::LabNetProt::Server::DigitalOutState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DigitalOutState_LabNetServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_DigitalOutState_LabNetServer_2eproto}, {
      &scc_info_PinId_LabNet_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_InterfaceInitResult_LabNetServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LabNetProt::Server::_InterfaceInitResult_default_instance_;
    new (ptr) ::LabNetProt::Server::InterfaceInitResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InterfaceInitResult_LabNetServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_InterfaceInitResult_LabNetServer_2eproto}, {}};

static void InitDefaultsscc_info_InterfaceLost_LabNetServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LabNetProt::Server::_InterfaceLost_default_instance_;
    new (ptr) ::LabNetProt::Server::InterfaceLost();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InterfaceLost_LabNetServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_InterfaceLost_LabNetServer_2eproto}, {}};

static void InitDefaultsscc_info_InterfaceReconnected_LabNetServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LabNetProt::Server::_InterfaceReconnected_default_instance_;
    new (ptr) ::LabNetProt::Server::InterfaceReconnected();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InterfaceReconnected_LabNetServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_InterfaceReconnected_LabNetServer_2eproto}, {}};

static void InitDefaultsscc_info_LabNetIdReply_LabNetServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LabNetProt::Server::_LabNetIdReply_default_instance_;
    new (ptr) ::LabNetProt::Server::LabNetIdReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LabNetIdReply_LabNetServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LabNetIdReply_LabNetServer_2eproto}, {}};

static void InitDefaultsscc_info_LabNetResetReply_LabNetServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LabNetProt::Server::_LabNetResetReply_default_instance_;
    new (ptr) ::LabNetProt::Server::LabNetResetReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LabNetResetReply_LabNetServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LabNetResetReply_LabNetServer_2eproto}, {}};

static void InitDefaultsscc_info_NewByteData_LabNetServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LabNetProt::Server::_NewByteData_default_instance_;
    new (ptr) ::LabNetProt::Server::NewByteData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_NewByteData_LabNetServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_NewByteData_LabNetServer_2eproto}, {
      &scc_info_PinId_LabNet_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_OnlyOneConnectionAllowed_LabNetServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LabNetProt::Server::_OnlyOneConnectionAllowed_default_instance_;
    new (ptr) ::LabNetProt::Server::OnlyOneConnectionAllowed();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OnlyOneConnectionAllowed_LabNetServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OnlyOneConnectionAllowed_LabNetServer_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_LabNetServer_2eproto[14];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_LabNetServer_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_LabNetServer_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_LabNetServer_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Server::DigitalOutState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Server::DigitalOutState, pin_),
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Server::DigitalOutState, state_),
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Server::DigitalOutState, time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Server::DigitalInState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Server::DigitalInState, pin_),
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Server::DigitalInState, state_),
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Server::DigitalInState, time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Server::NewByteData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Server::NewByteData, pin_),
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Server::NewByteData, data_),
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Server::NewByteData, time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Server::DataWriteComplete, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Server::DataWriteComplete, pin_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Server::InterfaceInitResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Server::InterfaceInitResult, interface_),
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Server::InterfaceInitResult, is_succeed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Server::InterfaceLost, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Server::InterfaceLost, interface_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Server::InterfaceReconnected, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Server::InterfaceReconnected, interface_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Server::DigitalInInitResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Server::DigitalInInitResult, interface_),
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Server::DigitalInInitResult, pin_),
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Server::DigitalInInitResult, is_succeed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Server::DigitalOutInitResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Server::DigitalOutInitResult, interface_),
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Server::DigitalOutInitResult, pin_),
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Server::DigitalOutInitResult, is_succeed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Server::OnlyOneConnectionAllowed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Server::LabNetResetReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Server::LabNetResetReply, is_reset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Server::LabNetIdReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Server::LabNetIdReply, id_),
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Server::LabNetIdReply, major_version_),
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Server::LabNetIdReply, minor_version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Server::DigitalOutLoopStartResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Server::DigitalOutLoopStartResult, loop_name_),
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Server::DigitalOutLoopStartResult, is_succeed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Server::DigitalOutLoopStopped, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Server::DigitalOutLoopStopped, loop_name_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::LabNetProt::Server::DigitalOutState)},
  { 8, -1, sizeof(::LabNetProt::Server::DigitalInState)},
  { 16, -1, sizeof(::LabNetProt::Server::NewByteData)},
  { 24, -1, sizeof(::LabNetProt::Server::DataWriteComplete)},
  { 30, -1, sizeof(::LabNetProt::Server::InterfaceInitResult)},
  { 37, -1, sizeof(::LabNetProt::Server::InterfaceLost)},
  { 43, -1, sizeof(::LabNetProt::Server::InterfaceReconnected)},
  { 49, -1, sizeof(::LabNetProt::Server::DigitalInInitResult)},
  { 57, -1, sizeof(::LabNetProt::Server::DigitalOutInitResult)},
  { 65, -1, sizeof(::LabNetProt::Server::OnlyOneConnectionAllowed)},
  { 70, -1, sizeof(::LabNetProt::Server::LabNetResetReply)},
  { 76, -1, sizeof(::LabNetProt::Server::LabNetIdReply)},
  { 84, -1, sizeof(::LabNetProt::Server::DigitalOutLoopStartResult)},
  { 91, -1, sizeof(::LabNetProt::Server::DigitalOutLoopStopped)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LabNetProt::Server::_DigitalOutState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LabNetProt::Server::_DigitalInState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LabNetProt::Server::_NewByteData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LabNetProt::Server::_DataWriteComplete_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LabNetProt::Server::_InterfaceInitResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LabNetProt::Server::_InterfaceLost_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LabNetProt::Server::_InterfaceReconnected_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LabNetProt::Server::_DigitalInInitResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LabNetProt::Server::_DigitalOutInitResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LabNetProt::Server::_OnlyOneConnectionAllowed_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LabNetProt::Server::_LabNetResetReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LabNetProt::Server::_LabNetIdReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LabNetProt::Server::_DigitalOutLoopStartResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LabNetProt::Server::_DigitalOutLoopStopped_default_instance_),
};

const char descriptor_table_protodef_LabNetServer_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022LabNetServer.proto\022\021LabNetProt.Server\032"
  "\014LabNet.proto\032\037google/protobuf/timestamp"
  ".proto\"j\n\017DigitalOutState\022\036\n\003pin\030\001 \001(\0132\021"
  ".LabNetProt.PinId\022\r\n\005state\030\002 \001(\010\022(\n\004time"
  "\030\003 \001(\0132\032.google.protobuf.Timestamp\"i\n\016Di"
  "gitalInState\022\036\n\003pin\030\001 \001(\0132\021.LabNetProt.P"
  "inId\022\r\n\005state\030\002 \001(\010\022(\n\004time\030\003 \001(\0132\032.goog"
  "le.protobuf.Timestamp\"e\n\013NewByteData\022\036\n\003"
  "pin\030\001 \001(\0132\021.LabNetProt.PinId\022\014\n\004data\030\002 \001"
  "(\014\022(\n\004time\030\003 \001(\0132\032.google.protobuf.Times"
  "tamp\"3\n\021DataWriteComplete\022\036\n\003pin\030\001 \001(\0132\021"
  ".LabNetProt.PinId\"T\n\023InterfaceInitResult"
  "\022)\n\tinterface\030\001 \001(\0162\026.LabNetProt.Interfa"
  "ces\022\022\n\nis_succeed\030\002 \001(\010\":\n\rInterfaceLost"
  "\022)\n\tinterface\030\001 \001(\0162\026.LabNetProt.Interfa"
  "ces\"A\n\024InterfaceReconnected\022)\n\tinterface"
  "\030\001 \001(\0162\026.LabNetProt.Interfaces\"a\n\023Digita"
  "lInInitResult\022)\n\tinterface\030\001 \001(\0162\026.LabNe"
  "tProt.Interfaces\022\013\n\003pin\030\002 \001(\r\022\022\n\nis_succ"
  "eed\030\003 \001(\010\"b\n\024DigitalOutInitResult\022)\n\tint"
  "erface\030\001 \001(\0162\026.LabNetProt.Interfaces\022\013\n\003"
  "pin\030\002 \001(\r\022\022\n\nis_succeed\030\003 \001(\010\"\032\n\030OnlyOne"
  "ConnectionAllowed\"$\n\020LabNetResetReply\022\020\n"
  "\010is_reset\030\001 \001(\010\"I\n\rLabNetIdReply\022\n\n\002id\030\001"
  " \001(\t\022\025\n\rmajor_version\030\002 \001(\r\022\025\n\rminor_ver"
  "sion\030\003 \001(\r\"B\n\031DigitalOutLoopStartResult\022"
  "\021\n\tloop_name\030\001 \001(\t\022\022\n\nis_succeed\030\002 \001(\010\"*"
  "\n\025DigitalOutLoopStopped\022\021\n\tloop_name\030\001 \001"
  "(\t*\210\003\n\021ServerMessageType\022\010\n\004NONE\020\000\022\023\n\017LA"
  "BNET_ID_REPLY\020\001\022\026\n\022LABNET_RESET_REPLY\020\002\022"
  "\025\n\021DIGITAL_OUT_STATE\020\003\022\024\n\020DIGITAL_IN_STA"
  "TE\020\004\022\021\n\rNEW_BYTE_DATA\020\005\022\027\n\023DATA_WRITE_CO"
  "MPLETE\020\006\022\031\n\025INTERFACE_INIT_RESULT\020\007\022\032\n\026D"
  "IGITAL_IN_INIT_RESULT\020\010\022\033\n\027DIGITAL_OUT_I"
  "NIT_RESULT\020\t\022\037\n\033ONLY_ONE_CONNECTION_ALLO"
  "WED\020\n\022\022\n\016INTERFACE_LOST\020\013\022\031\n\025INTERFACE_R"
  "ECONNECTED\020\014\022!\n\035DIGITAL_OUT_LOOP_START_R"
  "ESULT\020\r\022\034\n\030DIGITAL_OUT_LOOP_STOPPED\020\016b\006p"
  "roto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_LabNetServer_2eproto_deps[2] = {
  &::descriptor_table_LabNet_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_LabNetServer_2eproto_sccs[14] = {
  &scc_info_DataWriteComplete_LabNetServer_2eproto.base,
  &scc_info_DigitalInInitResult_LabNetServer_2eproto.base,
  &scc_info_DigitalInState_LabNetServer_2eproto.base,
  &scc_info_DigitalOutInitResult_LabNetServer_2eproto.base,
  &scc_info_DigitalOutLoopStartResult_LabNetServer_2eproto.base,
  &scc_info_DigitalOutLoopStopped_LabNetServer_2eproto.base,
  &scc_info_DigitalOutState_LabNetServer_2eproto.base,
  &scc_info_InterfaceInitResult_LabNetServer_2eproto.base,
  &scc_info_InterfaceLost_LabNetServer_2eproto.base,
  &scc_info_InterfaceReconnected_LabNetServer_2eproto.base,
  &scc_info_LabNetIdReply_LabNetServer_2eproto.base,
  &scc_info_LabNetResetReply_LabNetServer_2eproto.base,
  &scc_info_NewByteData_LabNetServer_2eproto.base,
  &scc_info_OnlyOneConnectionAllowed_LabNetServer_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_LabNetServer_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_LabNetServer_2eproto = {
  false, false, descriptor_table_protodef_LabNetServer_2eproto, "LabNetServer.proto", 1525,
  &descriptor_table_LabNetServer_2eproto_once, descriptor_table_LabNetServer_2eproto_sccs, descriptor_table_LabNetServer_2eproto_deps, 14, 2,
  schemas, file_default_instances, TableStruct_LabNetServer_2eproto::offsets,
  file_level_metadata_LabNetServer_2eproto, 14, file_level_enum_descriptors_LabNetServer_2eproto, file_level_service_descriptors_LabNetServer_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_LabNetServer_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_LabNetServer_2eproto)), true);
namespace LabNetProt {
namespace Server {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ServerMessageType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_LabNetServer_2eproto);
  return file_level_enum_descriptors_LabNetServer_2eproto[0];
}
bool ServerMessageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class DigitalOutState::_Internal {
 public:
  static const ::LabNetProt::PinId& pin(const DigitalOutState* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& time(const DigitalOutState* msg);
};

const ::LabNetProt::PinId&
DigitalOutState::_Internal::pin(const DigitalOutState* msg) {
  return *msg->pin_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
DigitalOutState::_Internal::time(const DigitalOutState* msg) {
  return *msg->time_;
}
void DigitalOutState::clear_pin() {
  if (GetArena() == nullptr && pin_ != nullptr) {
    delete pin_;
  }
  pin_ = nullptr;
}
void DigitalOutState::clear_time() {
  if (GetArena() == nullptr && time_ != nullptr) {
    delete time_;
  }
  time_ = nullptr;
}
DigitalOutState::DigitalOutState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LabNetProt.Server.DigitalOutState)
}
DigitalOutState::DigitalOutState(const DigitalOutState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pin()) {
    pin_ = new ::LabNetProt::PinId(*from.pin_);
  } else {
    pin_ = nullptr;
  }
  if (from._internal_has_time()) {
    time_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.time_);
  } else {
    time_ = nullptr;
  }
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:LabNetProt.Server.DigitalOutState)
}

void DigitalOutState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DigitalOutState_LabNetServer_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&pin_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&pin_)) + sizeof(state_));
}

DigitalOutState::~DigitalOutState() {
  // @@protoc_insertion_point(destructor:LabNetProt.Server.DigitalOutState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DigitalOutState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete pin_;
  if (this != internal_default_instance()) delete time_;
}

void DigitalOutState::ArenaDtor(void* object) {
  DigitalOutState* _this = reinterpret_cast< DigitalOutState* >(object);
  (void)_this;
}
void DigitalOutState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DigitalOutState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DigitalOutState& DigitalOutState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DigitalOutState_LabNetServer_2eproto.base);
  return *internal_default_instance();
}


void DigitalOutState::Clear() {
// @@protoc_insertion_point(message_clear_start:LabNetProt.Server.DigitalOutState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && pin_ != nullptr) {
    delete pin_;
  }
  pin_ = nullptr;
  if (GetArena() == nullptr && time_ != nullptr) {
    delete time_;
  }
  time_ = nullptr;
  state_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DigitalOutState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .LabNetProt.PinId pin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pin(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DigitalOutState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LabNetProt.Server.DigitalOutState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .LabNetProt.PinId pin = 1;
  if (this->has_pin()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::pin(this), target, stream);
  }

  // bool state = 2;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_state(), target);
  }

  // .google.protobuf.Timestamp time = 3;
  if (this->has_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::time(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LabNetProt.Server.DigitalOutState)
  return target;
}

size_t DigitalOutState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LabNetProt.Server.DigitalOutState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .LabNetProt.PinId pin = 1;
  if (this->has_pin()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pin_);
  }

  // .google.protobuf.Timestamp time = 3;
  if (this->has_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *time_);
  }

  // bool state = 2;
  if (this->state() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DigitalOutState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LabNetProt.Server.DigitalOutState)
  GOOGLE_DCHECK_NE(&from, this);
  const DigitalOutState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DigitalOutState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LabNetProt.Server.DigitalOutState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LabNetProt.Server.DigitalOutState)
    MergeFrom(*source);
  }
}

void DigitalOutState::MergeFrom(const DigitalOutState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LabNetProt.Server.DigitalOutState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pin()) {
    _internal_mutable_pin()->::LabNetProt::PinId::MergeFrom(from._internal_pin());
  }
  if (from.has_time()) {
    _internal_mutable_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_time());
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
}

void DigitalOutState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LabNetProt.Server.DigitalOutState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DigitalOutState::CopyFrom(const DigitalOutState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LabNetProt.Server.DigitalOutState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DigitalOutState::IsInitialized() const {
  return true;
}

void DigitalOutState::InternalSwap(DigitalOutState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DigitalOutState, state_)
      + sizeof(DigitalOutState::state_)
      - PROTOBUF_FIELD_OFFSET(DigitalOutState, pin_)>(
          reinterpret_cast<char*>(&pin_),
          reinterpret_cast<char*>(&other->pin_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DigitalOutState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DigitalInState::_Internal {
 public:
  static const ::LabNetProt::PinId& pin(const DigitalInState* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& time(const DigitalInState* msg);
};

const ::LabNetProt::PinId&
DigitalInState::_Internal::pin(const DigitalInState* msg) {
  return *msg->pin_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
DigitalInState::_Internal::time(const DigitalInState* msg) {
  return *msg->time_;
}
void DigitalInState::clear_pin() {
  if (GetArena() == nullptr && pin_ != nullptr) {
    delete pin_;
  }
  pin_ = nullptr;
}
void DigitalInState::clear_time() {
  if (GetArena() == nullptr && time_ != nullptr) {
    delete time_;
  }
  time_ = nullptr;
}
DigitalInState::DigitalInState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LabNetProt.Server.DigitalInState)
}
DigitalInState::DigitalInState(const DigitalInState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pin()) {
    pin_ = new ::LabNetProt::PinId(*from.pin_);
  } else {
    pin_ = nullptr;
  }
  if (from._internal_has_time()) {
    time_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.time_);
  } else {
    time_ = nullptr;
  }
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:LabNetProt.Server.DigitalInState)
}

void DigitalInState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DigitalInState_LabNetServer_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&pin_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&pin_)) + sizeof(state_));
}

DigitalInState::~DigitalInState() {
  // @@protoc_insertion_point(destructor:LabNetProt.Server.DigitalInState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DigitalInState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete pin_;
  if (this != internal_default_instance()) delete time_;
}

void DigitalInState::ArenaDtor(void* object) {
  DigitalInState* _this = reinterpret_cast< DigitalInState* >(object);
  (void)_this;
}
void DigitalInState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DigitalInState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DigitalInState& DigitalInState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DigitalInState_LabNetServer_2eproto.base);
  return *internal_default_instance();
}


void DigitalInState::Clear() {
// @@protoc_insertion_point(message_clear_start:LabNetProt.Server.DigitalInState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && pin_ != nullptr) {
    delete pin_;
  }
  pin_ = nullptr;
  if (GetArena() == nullptr && time_ != nullptr) {
    delete time_;
  }
  time_ = nullptr;
  state_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DigitalInState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .LabNetProt.PinId pin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pin(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DigitalInState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LabNetProt.Server.DigitalInState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .LabNetProt.PinId pin = 1;
  if (this->has_pin()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::pin(this), target, stream);
  }

  // bool state = 2;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_state(), target);
  }

  // .google.protobuf.Timestamp time = 3;
  if (this->has_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::time(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LabNetProt.Server.DigitalInState)
  return target;
}

size_t DigitalInState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LabNetProt.Server.DigitalInState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .LabNetProt.PinId pin = 1;
  if (this->has_pin()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pin_);
  }

  // .google.protobuf.Timestamp time = 3;
  if (this->has_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *time_);
  }

  // bool state = 2;
  if (this->state() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DigitalInState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LabNetProt.Server.DigitalInState)
  GOOGLE_DCHECK_NE(&from, this);
  const DigitalInState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DigitalInState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LabNetProt.Server.DigitalInState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LabNetProt.Server.DigitalInState)
    MergeFrom(*source);
  }
}

void DigitalInState::MergeFrom(const DigitalInState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LabNetProt.Server.DigitalInState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pin()) {
    _internal_mutable_pin()->::LabNetProt::PinId::MergeFrom(from._internal_pin());
  }
  if (from.has_time()) {
    _internal_mutable_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_time());
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
}

void DigitalInState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LabNetProt.Server.DigitalInState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DigitalInState::CopyFrom(const DigitalInState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LabNetProt.Server.DigitalInState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DigitalInState::IsInitialized() const {
  return true;
}

void DigitalInState::InternalSwap(DigitalInState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DigitalInState, state_)
      + sizeof(DigitalInState::state_)
      - PROTOBUF_FIELD_OFFSET(DigitalInState, pin_)>(
          reinterpret_cast<char*>(&pin_),
          reinterpret_cast<char*>(&other->pin_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DigitalInState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class NewByteData::_Internal {
 public:
  static const ::LabNetProt::PinId& pin(const NewByteData* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& time(const NewByteData* msg);
};

const ::LabNetProt::PinId&
NewByteData::_Internal::pin(const NewByteData* msg) {
  return *msg->pin_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
NewByteData::_Internal::time(const NewByteData* msg) {
  return *msg->time_;
}
void NewByteData::clear_pin() {
  if (GetArena() == nullptr && pin_ != nullptr) {
    delete pin_;
  }
  pin_ = nullptr;
}
void NewByteData::clear_time() {
  if (GetArena() == nullptr && time_ != nullptr) {
    delete time_;
  }
  time_ = nullptr;
}
NewByteData::NewByteData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LabNetProt.Server.NewByteData)
}
NewByteData::NewByteData(const NewByteData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArena());
  }
  if (from._internal_has_pin()) {
    pin_ = new ::LabNetProt::PinId(*from.pin_);
  } else {
    pin_ = nullptr;
  }
  if (from._internal_has_time()) {
    time_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.time_);
  } else {
    time_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:LabNetProt.Server.NewByteData)
}

void NewByteData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NewByteData_LabNetServer_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&pin_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&time_) -
      reinterpret_cast<char*>(&pin_)) + sizeof(time_));
}

NewByteData::~NewByteData() {
  // @@protoc_insertion_point(destructor:LabNetProt.Server.NewByteData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NewByteData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pin_;
  if (this != internal_default_instance()) delete time_;
}

void NewByteData::ArenaDtor(void* object) {
  NewByteData* _this = reinterpret_cast< NewByteData* >(object);
  (void)_this;
}
void NewByteData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NewByteData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NewByteData& NewByteData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NewByteData_LabNetServer_2eproto.base);
  return *internal_default_instance();
}


void NewByteData::Clear() {
// @@protoc_insertion_point(message_clear_start:LabNetProt.Server.NewByteData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmpty();
  if (GetArena() == nullptr && pin_ != nullptr) {
    delete pin_;
  }
  pin_ = nullptr;
  if (GetArena() == nullptr && time_ != nullptr) {
    delete time_;
  }
  time_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NewByteData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .LabNetProt.PinId pin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pin(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NewByteData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LabNetProt.Server.NewByteData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .LabNetProt.PinId pin = 1;
  if (this->has_pin()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::pin(this), target, stream);
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  // .google.protobuf.Timestamp time = 3;
  if (this->has_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::time(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LabNetProt.Server.NewByteData)
  return target;
}

size_t NewByteData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LabNetProt.Server.NewByteData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 2;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // .LabNetProt.PinId pin = 1;
  if (this->has_pin()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pin_);
  }

  // .google.protobuf.Timestamp time = 3;
  if (this->has_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *time_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NewByteData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LabNetProt.Server.NewByteData)
  GOOGLE_DCHECK_NE(&from, this);
  const NewByteData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NewByteData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LabNetProt.Server.NewByteData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LabNetProt.Server.NewByteData)
    MergeFrom(*source);
  }
}

void NewByteData::MergeFrom(const NewByteData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LabNetProt.Server.NewByteData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {
    _internal_set_data(from._internal_data());
  }
  if (from.has_pin()) {
    _internal_mutable_pin()->::LabNetProt::PinId::MergeFrom(from._internal_pin());
  }
  if (from.has_time()) {
    _internal_mutable_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_time());
  }
}

void NewByteData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LabNetProt.Server.NewByteData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewByteData::CopyFrom(const NewByteData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LabNetProt.Server.NewByteData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewByteData::IsInitialized() const {
  return true;
}

void NewByteData::InternalSwap(NewByteData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NewByteData, time_)
      + sizeof(NewByteData::time_)
      - PROTOBUF_FIELD_OFFSET(NewByteData, pin_)>(
          reinterpret_cast<char*>(&pin_),
          reinterpret_cast<char*>(&other->pin_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NewByteData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DataWriteComplete::_Internal {
 public:
  static const ::LabNetProt::PinId& pin(const DataWriteComplete* msg);
};

const ::LabNetProt::PinId&
DataWriteComplete::_Internal::pin(const DataWriteComplete* msg) {
  return *msg->pin_;
}
void DataWriteComplete::clear_pin() {
  if (GetArena() == nullptr && pin_ != nullptr) {
    delete pin_;
  }
  pin_ = nullptr;
}
DataWriteComplete::DataWriteComplete(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LabNetProt.Server.DataWriteComplete)
}
DataWriteComplete::DataWriteComplete(const DataWriteComplete& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pin()) {
    pin_ = new ::LabNetProt::PinId(*from.pin_);
  } else {
    pin_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:LabNetProt.Server.DataWriteComplete)
}

void DataWriteComplete::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DataWriteComplete_LabNetServer_2eproto.base);
  pin_ = nullptr;
}

DataWriteComplete::~DataWriteComplete() {
  // @@protoc_insertion_point(destructor:LabNetProt.Server.DataWriteComplete)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DataWriteComplete::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete pin_;
}

void DataWriteComplete::ArenaDtor(void* object) {
  DataWriteComplete* _this = reinterpret_cast< DataWriteComplete* >(object);
  (void)_this;
}
void DataWriteComplete::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DataWriteComplete::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DataWriteComplete& DataWriteComplete::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DataWriteComplete_LabNetServer_2eproto.base);
  return *internal_default_instance();
}


void DataWriteComplete::Clear() {
// @@protoc_insertion_point(message_clear_start:LabNetProt.Server.DataWriteComplete)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && pin_ != nullptr) {
    delete pin_;
  }
  pin_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataWriteComplete::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .LabNetProt.PinId pin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pin(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DataWriteComplete::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LabNetProt.Server.DataWriteComplete)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .LabNetProt.PinId pin = 1;
  if (this->has_pin()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::pin(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LabNetProt.Server.DataWriteComplete)
  return target;
}

size_t DataWriteComplete::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LabNetProt.Server.DataWriteComplete)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .LabNetProt.PinId pin = 1;
  if (this->has_pin()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pin_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DataWriteComplete::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LabNetProt.Server.DataWriteComplete)
  GOOGLE_DCHECK_NE(&from, this);
  const DataWriteComplete* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DataWriteComplete>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LabNetProt.Server.DataWriteComplete)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LabNetProt.Server.DataWriteComplete)
    MergeFrom(*source);
  }
}

void DataWriteComplete::MergeFrom(const DataWriteComplete& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LabNetProt.Server.DataWriteComplete)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pin()) {
    _internal_mutable_pin()->::LabNetProt::PinId::MergeFrom(from._internal_pin());
  }
}

void DataWriteComplete::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LabNetProt.Server.DataWriteComplete)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataWriteComplete::CopyFrom(const DataWriteComplete& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LabNetProt.Server.DataWriteComplete)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataWriteComplete::IsInitialized() const {
  return true;
}

void DataWriteComplete::InternalSwap(DataWriteComplete* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(pin_, other->pin_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DataWriteComplete::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class InterfaceInitResult::_Internal {
 public:
};

InterfaceInitResult::InterfaceInitResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LabNetProt.Server.InterfaceInitResult)
}
InterfaceInitResult::InterfaceInitResult(const InterfaceInitResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&interface_, &from.interface_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_succeed_) -
    reinterpret_cast<char*>(&interface_)) + sizeof(is_succeed_));
  // @@protoc_insertion_point(copy_constructor:LabNetProt.Server.InterfaceInitResult)
}

void InterfaceInitResult::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&interface_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&is_succeed_) -
      reinterpret_cast<char*>(&interface_)) + sizeof(is_succeed_));
}

InterfaceInitResult::~InterfaceInitResult() {
  // @@protoc_insertion_point(destructor:LabNetProt.Server.InterfaceInitResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InterfaceInitResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void InterfaceInitResult::ArenaDtor(void* object) {
  InterfaceInitResult* _this = reinterpret_cast< InterfaceInitResult* >(object);
  (void)_this;
}
void InterfaceInitResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InterfaceInitResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InterfaceInitResult& InterfaceInitResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InterfaceInitResult_LabNetServer_2eproto.base);
  return *internal_default_instance();
}


void InterfaceInitResult::Clear() {
// @@protoc_insertion_point(message_clear_start:LabNetProt.Server.InterfaceInitResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&interface_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_succeed_) -
      reinterpret_cast<char*>(&interface_)) + sizeof(is_succeed_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InterfaceInitResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .LabNetProt.Interfaces interface = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_interface(static_cast<::LabNetProt::Interfaces>(val));
        } else goto handle_unusual;
        continue;
      // bool is_succeed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          is_succeed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InterfaceInitResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LabNetProt.Server.InterfaceInitResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .LabNetProt.Interfaces interface = 1;
  if (this->interface() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_interface(), target);
  }

  // bool is_succeed = 2;
  if (this->is_succeed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_succeed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LabNetProt.Server.InterfaceInitResult)
  return target;
}

size_t InterfaceInitResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LabNetProt.Server.InterfaceInitResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .LabNetProt.Interfaces interface = 1;
  if (this->interface() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_interface());
  }

  // bool is_succeed = 2;
  if (this->is_succeed() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InterfaceInitResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LabNetProt.Server.InterfaceInitResult)
  GOOGLE_DCHECK_NE(&from, this);
  const InterfaceInitResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InterfaceInitResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LabNetProt.Server.InterfaceInitResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LabNetProt.Server.InterfaceInitResult)
    MergeFrom(*source);
  }
}

void InterfaceInitResult::MergeFrom(const InterfaceInitResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LabNetProt.Server.InterfaceInitResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.interface() != 0) {
    _internal_set_interface(from._internal_interface());
  }
  if (from.is_succeed() != 0) {
    _internal_set_is_succeed(from._internal_is_succeed());
  }
}

void InterfaceInitResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LabNetProt.Server.InterfaceInitResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InterfaceInitResult::CopyFrom(const InterfaceInitResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LabNetProt.Server.InterfaceInitResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InterfaceInitResult::IsInitialized() const {
  return true;
}

void InterfaceInitResult::InternalSwap(InterfaceInitResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InterfaceInitResult, is_succeed_)
      + sizeof(InterfaceInitResult::is_succeed_)
      - PROTOBUF_FIELD_OFFSET(InterfaceInitResult, interface_)>(
          reinterpret_cast<char*>(&interface_),
          reinterpret_cast<char*>(&other->interface_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InterfaceInitResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class InterfaceLost::_Internal {
 public:
};

InterfaceLost::InterfaceLost(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LabNetProt.Server.InterfaceLost)
}
InterfaceLost::InterfaceLost(const InterfaceLost& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  interface_ = from.interface_;
  // @@protoc_insertion_point(copy_constructor:LabNetProt.Server.InterfaceLost)
}

void InterfaceLost::SharedCtor() {
  interface_ = 0;
}

InterfaceLost::~InterfaceLost() {
  // @@protoc_insertion_point(destructor:LabNetProt.Server.InterfaceLost)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InterfaceLost::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void InterfaceLost::ArenaDtor(void* object) {
  InterfaceLost* _this = reinterpret_cast< InterfaceLost* >(object);
  (void)_this;
}
void InterfaceLost::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InterfaceLost::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InterfaceLost& InterfaceLost::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InterfaceLost_LabNetServer_2eproto.base);
  return *internal_default_instance();
}


void InterfaceLost::Clear() {
// @@protoc_insertion_point(message_clear_start:LabNetProt.Server.InterfaceLost)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  interface_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InterfaceLost::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .LabNetProt.Interfaces interface = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_interface(static_cast<::LabNetProt::Interfaces>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InterfaceLost::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LabNetProt.Server.InterfaceLost)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .LabNetProt.Interfaces interface = 1;
  if (this->interface() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_interface(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LabNetProt.Server.InterfaceLost)
  return target;
}

size_t InterfaceLost::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LabNetProt.Server.InterfaceLost)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .LabNetProt.Interfaces interface = 1;
  if (this->interface() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_interface());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InterfaceLost::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LabNetProt.Server.InterfaceLost)
  GOOGLE_DCHECK_NE(&from, this);
  const InterfaceLost* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InterfaceLost>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LabNetProt.Server.InterfaceLost)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LabNetProt.Server.InterfaceLost)
    MergeFrom(*source);
  }
}

void InterfaceLost::MergeFrom(const InterfaceLost& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LabNetProt.Server.InterfaceLost)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.interface() != 0) {
    _internal_set_interface(from._internal_interface());
  }
}

void InterfaceLost::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LabNetProt.Server.InterfaceLost)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InterfaceLost::CopyFrom(const InterfaceLost& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LabNetProt.Server.InterfaceLost)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InterfaceLost::IsInitialized() const {
  return true;
}

void InterfaceLost::InternalSwap(InterfaceLost* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(interface_, other->interface_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InterfaceLost::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class InterfaceReconnected::_Internal {
 public:
};

InterfaceReconnected::InterfaceReconnected(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LabNetProt.Server.InterfaceReconnected)
}
InterfaceReconnected::InterfaceReconnected(const InterfaceReconnected& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  interface_ = from.interface_;
  // @@protoc_insertion_point(copy_constructor:LabNetProt.Server.InterfaceReconnected)
}

void InterfaceReconnected::SharedCtor() {
  interface_ = 0;
}

InterfaceReconnected::~InterfaceReconnected() {
  // @@protoc_insertion_point(destructor:LabNetProt.Server.InterfaceReconnected)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InterfaceReconnected::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void InterfaceReconnected::ArenaDtor(void* object) {
  InterfaceReconnected* _this = reinterpret_cast< InterfaceReconnected* >(object);
  (void)_this;
}
void InterfaceReconnected::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InterfaceReconnected::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InterfaceReconnected& InterfaceReconnected::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InterfaceReconnected_LabNetServer_2eproto.base);
  return *internal_default_instance();
}


void InterfaceReconnected::Clear() {
// @@protoc_insertion_point(message_clear_start:LabNetProt.Server.InterfaceReconnected)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  interface_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InterfaceReconnected::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .LabNetProt.Interfaces interface = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_interface(static_cast<::LabNetProt::Interfaces>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InterfaceReconnected::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LabNetProt.Server.InterfaceReconnected)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .LabNetProt.Interfaces interface = 1;
  if (this->interface() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_interface(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LabNetProt.Server.InterfaceReconnected)
  return target;
}

size_t InterfaceReconnected::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LabNetProt.Server.InterfaceReconnected)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .LabNetProt.Interfaces interface = 1;
  if (this->interface() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_interface());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InterfaceReconnected::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LabNetProt.Server.InterfaceReconnected)
  GOOGLE_DCHECK_NE(&from, this);
  const InterfaceReconnected* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InterfaceReconnected>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LabNetProt.Server.InterfaceReconnected)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LabNetProt.Server.InterfaceReconnected)
    MergeFrom(*source);
  }
}

void InterfaceReconnected::MergeFrom(const InterfaceReconnected& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LabNetProt.Server.InterfaceReconnected)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.interface() != 0) {
    _internal_set_interface(from._internal_interface());
  }
}

void InterfaceReconnected::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LabNetProt.Server.InterfaceReconnected)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InterfaceReconnected::CopyFrom(const InterfaceReconnected& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LabNetProt.Server.InterfaceReconnected)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InterfaceReconnected::IsInitialized() const {
  return true;
}

void InterfaceReconnected::InternalSwap(InterfaceReconnected* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(interface_, other->interface_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InterfaceReconnected::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DigitalInInitResult::_Internal {
 public:
};

DigitalInInitResult::DigitalInInitResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LabNetProt.Server.DigitalInInitResult)
}
DigitalInInitResult::DigitalInInitResult(const DigitalInInitResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&interface_, &from.interface_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_succeed_) -
    reinterpret_cast<char*>(&interface_)) + sizeof(is_succeed_));
  // @@protoc_insertion_point(copy_constructor:LabNetProt.Server.DigitalInInitResult)
}

void DigitalInInitResult::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&interface_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&is_succeed_) -
      reinterpret_cast<char*>(&interface_)) + sizeof(is_succeed_));
}

DigitalInInitResult::~DigitalInInitResult() {
  // @@protoc_insertion_point(destructor:LabNetProt.Server.DigitalInInitResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DigitalInInitResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DigitalInInitResult::ArenaDtor(void* object) {
  DigitalInInitResult* _this = reinterpret_cast< DigitalInInitResult* >(object);
  (void)_this;
}
void DigitalInInitResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DigitalInInitResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DigitalInInitResult& DigitalInInitResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DigitalInInitResult_LabNetServer_2eproto.base);
  return *internal_default_instance();
}


void DigitalInInitResult::Clear() {
// @@protoc_insertion_point(message_clear_start:LabNetProt.Server.DigitalInInitResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&interface_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_succeed_) -
      reinterpret_cast<char*>(&interface_)) + sizeof(is_succeed_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DigitalInInitResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .LabNetProt.Interfaces interface = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_interface(static_cast<::LabNetProt::Interfaces>(val));
        } else goto handle_unusual;
        continue;
      // uint32 pin = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          pin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_succeed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          is_succeed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DigitalInInitResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LabNetProt.Server.DigitalInInitResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .LabNetProt.Interfaces interface = 1;
  if (this->interface() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_interface(), target);
  }

  // uint32 pin = 2;
  if (this->pin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_pin(), target);
  }

  // bool is_succeed = 3;
  if (this->is_succeed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_succeed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LabNetProt.Server.DigitalInInitResult)
  return target;
}

size_t DigitalInInitResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LabNetProt.Server.DigitalInInitResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .LabNetProt.Interfaces interface = 1;
  if (this->interface() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_interface());
  }

  // uint32 pin = 2;
  if (this->pin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pin());
  }

  // bool is_succeed = 3;
  if (this->is_succeed() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DigitalInInitResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LabNetProt.Server.DigitalInInitResult)
  GOOGLE_DCHECK_NE(&from, this);
  const DigitalInInitResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DigitalInInitResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LabNetProt.Server.DigitalInInitResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LabNetProt.Server.DigitalInInitResult)
    MergeFrom(*source);
  }
}

void DigitalInInitResult::MergeFrom(const DigitalInInitResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LabNetProt.Server.DigitalInInitResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.interface() != 0) {
    _internal_set_interface(from._internal_interface());
  }
  if (from.pin() != 0) {
    _internal_set_pin(from._internal_pin());
  }
  if (from.is_succeed() != 0) {
    _internal_set_is_succeed(from._internal_is_succeed());
  }
}

void DigitalInInitResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LabNetProt.Server.DigitalInInitResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DigitalInInitResult::CopyFrom(const DigitalInInitResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LabNetProt.Server.DigitalInInitResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DigitalInInitResult::IsInitialized() const {
  return true;
}

void DigitalInInitResult::InternalSwap(DigitalInInitResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DigitalInInitResult, is_succeed_)
      + sizeof(DigitalInInitResult::is_succeed_)
      - PROTOBUF_FIELD_OFFSET(DigitalInInitResult, interface_)>(
          reinterpret_cast<char*>(&interface_),
          reinterpret_cast<char*>(&other->interface_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DigitalInInitResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DigitalOutInitResult::_Internal {
 public:
};

DigitalOutInitResult::DigitalOutInitResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LabNetProt.Server.DigitalOutInitResult)
}
DigitalOutInitResult::DigitalOutInitResult(const DigitalOutInitResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&interface_, &from.interface_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_succeed_) -
    reinterpret_cast<char*>(&interface_)) + sizeof(is_succeed_));
  // @@protoc_insertion_point(copy_constructor:LabNetProt.Server.DigitalOutInitResult)
}

void DigitalOutInitResult::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&interface_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&is_succeed_) -
      reinterpret_cast<char*>(&interface_)) + sizeof(is_succeed_));
}

DigitalOutInitResult::~DigitalOutInitResult() {
  // @@protoc_insertion_point(destructor:LabNetProt.Server.DigitalOutInitResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DigitalOutInitResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DigitalOutInitResult::ArenaDtor(void* object) {
  DigitalOutInitResult* _this = reinterpret_cast< DigitalOutInitResult* >(object);
  (void)_this;
}
void DigitalOutInitResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DigitalOutInitResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DigitalOutInitResult& DigitalOutInitResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DigitalOutInitResult_LabNetServer_2eproto.base);
  return *internal_default_instance();
}


void DigitalOutInitResult::Clear() {
// @@protoc_insertion_point(message_clear_start:LabNetProt.Server.DigitalOutInitResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&interface_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_succeed_) -
      reinterpret_cast<char*>(&interface_)) + sizeof(is_succeed_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DigitalOutInitResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .LabNetProt.Interfaces interface = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_interface(static_cast<::LabNetProt::Interfaces>(val));
        } else goto handle_unusual;
        continue;
      // uint32 pin = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          pin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_succeed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          is_succeed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DigitalOutInitResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LabNetProt.Server.DigitalOutInitResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .LabNetProt.Interfaces interface = 1;
  if (this->interface() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_interface(), target);
  }

  // uint32 pin = 2;
  if (this->pin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_pin(), target);
  }

  // bool is_succeed = 3;
  if (this->is_succeed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_succeed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LabNetProt.Server.DigitalOutInitResult)
  return target;
}

size_t DigitalOutInitResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LabNetProt.Server.DigitalOutInitResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .LabNetProt.Interfaces interface = 1;
  if (this->interface() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_interface());
  }

  // uint32 pin = 2;
  if (this->pin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pin());
  }

  // bool is_succeed = 3;
  if (this->is_succeed() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DigitalOutInitResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LabNetProt.Server.DigitalOutInitResult)
  GOOGLE_DCHECK_NE(&from, this);
  const DigitalOutInitResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DigitalOutInitResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LabNetProt.Server.DigitalOutInitResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LabNetProt.Server.DigitalOutInitResult)
    MergeFrom(*source);
  }
}

void DigitalOutInitResult::MergeFrom(const DigitalOutInitResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LabNetProt.Server.DigitalOutInitResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.interface() != 0) {
    _internal_set_interface(from._internal_interface());
  }
  if (from.pin() != 0) {
    _internal_set_pin(from._internal_pin());
  }
  if (from.is_succeed() != 0) {
    _internal_set_is_succeed(from._internal_is_succeed());
  }
}

void DigitalOutInitResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LabNetProt.Server.DigitalOutInitResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DigitalOutInitResult::CopyFrom(const DigitalOutInitResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LabNetProt.Server.DigitalOutInitResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DigitalOutInitResult::IsInitialized() const {
  return true;
}

void DigitalOutInitResult::InternalSwap(DigitalOutInitResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DigitalOutInitResult, is_succeed_)
      + sizeof(DigitalOutInitResult::is_succeed_)
      - PROTOBUF_FIELD_OFFSET(DigitalOutInitResult, interface_)>(
          reinterpret_cast<char*>(&interface_),
          reinterpret_cast<char*>(&other->interface_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DigitalOutInitResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class OnlyOneConnectionAllowed::_Internal {
 public:
};

OnlyOneConnectionAllowed::OnlyOneConnectionAllowed(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LabNetProt.Server.OnlyOneConnectionAllowed)
}
OnlyOneConnectionAllowed::OnlyOneConnectionAllowed(const OnlyOneConnectionAllowed& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:LabNetProt.Server.OnlyOneConnectionAllowed)
}

void OnlyOneConnectionAllowed::SharedCtor() {
}

OnlyOneConnectionAllowed::~OnlyOneConnectionAllowed() {
  // @@protoc_insertion_point(destructor:LabNetProt.Server.OnlyOneConnectionAllowed)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OnlyOneConnectionAllowed::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void OnlyOneConnectionAllowed::ArenaDtor(void* object) {
  OnlyOneConnectionAllowed* _this = reinterpret_cast< OnlyOneConnectionAllowed* >(object);
  (void)_this;
}
void OnlyOneConnectionAllowed::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OnlyOneConnectionAllowed::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OnlyOneConnectionAllowed& OnlyOneConnectionAllowed::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OnlyOneConnectionAllowed_LabNetServer_2eproto.base);
  return *internal_default_instance();
}


void OnlyOneConnectionAllowed::Clear() {
// @@protoc_insertion_point(message_clear_start:LabNetProt.Server.OnlyOneConnectionAllowed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OnlyOneConnectionAllowed::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OnlyOneConnectionAllowed::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LabNetProt.Server.OnlyOneConnectionAllowed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LabNetProt.Server.OnlyOneConnectionAllowed)
  return target;
}

size_t OnlyOneConnectionAllowed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LabNetProt.Server.OnlyOneConnectionAllowed)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OnlyOneConnectionAllowed::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LabNetProt.Server.OnlyOneConnectionAllowed)
  GOOGLE_DCHECK_NE(&from, this);
  const OnlyOneConnectionAllowed* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OnlyOneConnectionAllowed>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LabNetProt.Server.OnlyOneConnectionAllowed)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LabNetProt.Server.OnlyOneConnectionAllowed)
    MergeFrom(*source);
  }
}

void OnlyOneConnectionAllowed::MergeFrom(const OnlyOneConnectionAllowed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LabNetProt.Server.OnlyOneConnectionAllowed)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void OnlyOneConnectionAllowed::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LabNetProt.Server.OnlyOneConnectionAllowed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OnlyOneConnectionAllowed::CopyFrom(const OnlyOneConnectionAllowed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LabNetProt.Server.OnlyOneConnectionAllowed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OnlyOneConnectionAllowed::IsInitialized() const {
  return true;
}

void OnlyOneConnectionAllowed::InternalSwap(OnlyOneConnectionAllowed* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OnlyOneConnectionAllowed::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LabNetResetReply::_Internal {
 public:
};

LabNetResetReply::LabNetResetReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LabNetProt.Server.LabNetResetReply)
}
LabNetResetReply::LabNetResetReply(const LabNetResetReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  is_reset_ = from.is_reset_;
  // @@protoc_insertion_point(copy_constructor:LabNetProt.Server.LabNetResetReply)
}

void LabNetResetReply::SharedCtor() {
  is_reset_ = false;
}

LabNetResetReply::~LabNetResetReply() {
  // @@protoc_insertion_point(destructor:LabNetProt.Server.LabNetResetReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LabNetResetReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LabNetResetReply::ArenaDtor(void* object) {
  LabNetResetReply* _this = reinterpret_cast< LabNetResetReply* >(object);
  (void)_this;
}
void LabNetResetReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LabNetResetReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LabNetResetReply& LabNetResetReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LabNetResetReply_LabNetServer_2eproto.base);
  return *internal_default_instance();
}


void LabNetResetReply::Clear() {
// @@protoc_insertion_point(message_clear_start:LabNetProt.Server.LabNetResetReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  is_reset_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LabNetResetReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool is_reset = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          is_reset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LabNetResetReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LabNetProt.Server.LabNetResetReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_reset = 1;
  if (this->is_reset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_reset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LabNetProt.Server.LabNetResetReply)
  return target;
}

size_t LabNetResetReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LabNetProt.Server.LabNetResetReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool is_reset = 1;
  if (this->is_reset() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LabNetResetReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LabNetProt.Server.LabNetResetReply)
  GOOGLE_DCHECK_NE(&from, this);
  const LabNetResetReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LabNetResetReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LabNetProt.Server.LabNetResetReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LabNetProt.Server.LabNetResetReply)
    MergeFrom(*source);
  }
}

void LabNetResetReply::MergeFrom(const LabNetResetReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LabNetProt.Server.LabNetResetReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.is_reset() != 0) {
    _internal_set_is_reset(from._internal_is_reset());
  }
}

void LabNetResetReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LabNetProt.Server.LabNetResetReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LabNetResetReply::CopyFrom(const LabNetResetReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LabNetProt.Server.LabNetResetReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LabNetResetReply::IsInitialized() const {
  return true;
}

void LabNetResetReply::InternalSwap(LabNetResetReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(is_reset_, other->is_reset_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LabNetResetReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LabNetIdReply::_Internal {
 public:
};

LabNetIdReply::LabNetIdReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LabNetProt.Server.LabNetIdReply)
}
LabNetIdReply::LabNetIdReply(const LabNetIdReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArena());
  }
  ::memcpy(&major_version_, &from.major_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&minor_version_) -
    reinterpret_cast<char*>(&major_version_)) + sizeof(minor_version_));
  // @@protoc_insertion_point(copy_constructor:LabNetProt.Server.LabNetIdReply)
}

void LabNetIdReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LabNetIdReply_LabNetServer_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&major_version_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&minor_version_) -
      reinterpret_cast<char*>(&major_version_)) + sizeof(minor_version_));
}

LabNetIdReply::~LabNetIdReply() {
  // @@protoc_insertion_point(destructor:LabNetProt.Server.LabNetIdReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LabNetIdReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LabNetIdReply::ArenaDtor(void* object) {
  LabNetIdReply* _this = reinterpret_cast< LabNetIdReply* >(object);
  (void)_this;
}
void LabNetIdReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LabNetIdReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LabNetIdReply& LabNetIdReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LabNetIdReply_LabNetServer_2eproto.base);
  return *internal_default_instance();
}


void LabNetIdReply::Clear() {
// @@protoc_insertion_point(message_clear_start:LabNetProt.Server.LabNetIdReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  ::memset(&major_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&minor_version_) -
      reinterpret_cast<char*>(&major_version_)) + sizeof(minor_version_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LabNetIdReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "LabNetProt.Server.LabNetIdReply.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 major_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          major_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 minor_version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          minor_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LabNetIdReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LabNetProt.Server.LabNetIdReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "LabNetProt.Server.LabNetIdReply.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // uint32 major_version = 2;
  if (this->major_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_major_version(), target);
  }

  // uint32 minor_version = 3;
  if (this->minor_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_minor_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LabNetProt.Server.LabNetIdReply)
  return target;
}

size_t LabNetIdReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LabNetProt.Server.LabNetIdReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // uint32 major_version = 2;
  if (this->major_version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_major_version());
  }

  // uint32 minor_version = 3;
  if (this->minor_version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_minor_version());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LabNetIdReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LabNetProt.Server.LabNetIdReply)
  GOOGLE_DCHECK_NE(&from, this);
  const LabNetIdReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LabNetIdReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LabNetProt.Server.LabNetIdReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LabNetProt.Server.LabNetIdReply)
    MergeFrom(*source);
  }
}

void LabNetIdReply::MergeFrom(const LabNetIdReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LabNetProt.Server.LabNetIdReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.major_version() != 0) {
    _internal_set_major_version(from._internal_major_version());
  }
  if (from.minor_version() != 0) {
    _internal_set_minor_version(from._internal_minor_version());
  }
}

void LabNetIdReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LabNetProt.Server.LabNetIdReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LabNetIdReply::CopyFrom(const LabNetIdReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LabNetProt.Server.LabNetIdReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LabNetIdReply::IsInitialized() const {
  return true;
}

void LabNetIdReply::InternalSwap(LabNetIdReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LabNetIdReply, minor_version_)
      + sizeof(LabNetIdReply::minor_version_)
      - PROTOBUF_FIELD_OFFSET(LabNetIdReply, major_version_)>(
          reinterpret_cast<char*>(&major_version_),
          reinterpret_cast<char*>(&other->major_version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LabNetIdReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DigitalOutLoopStartResult::_Internal {
 public:
};

DigitalOutLoopStartResult::DigitalOutLoopStartResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LabNetProt.Server.DigitalOutLoopStartResult)
}
DigitalOutLoopStartResult::DigitalOutLoopStartResult(const DigitalOutLoopStartResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  loop_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_loop_name().empty()) {
    loop_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_loop_name(), 
      GetArena());
  }
  is_succeed_ = from.is_succeed_;
  // @@protoc_insertion_point(copy_constructor:LabNetProt.Server.DigitalOutLoopStartResult)
}

void DigitalOutLoopStartResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DigitalOutLoopStartResult_LabNetServer_2eproto.base);
  loop_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  is_succeed_ = false;
}

DigitalOutLoopStartResult::~DigitalOutLoopStartResult() {
  // @@protoc_insertion_point(destructor:LabNetProt.Server.DigitalOutLoopStartResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DigitalOutLoopStartResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  loop_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DigitalOutLoopStartResult::ArenaDtor(void* object) {
  DigitalOutLoopStartResult* _this = reinterpret_cast< DigitalOutLoopStartResult* >(object);
  (void)_this;
}
void DigitalOutLoopStartResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DigitalOutLoopStartResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DigitalOutLoopStartResult& DigitalOutLoopStartResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DigitalOutLoopStartResult_LabNetServer_2eproto.base);
  return *internal_default_instance();
}


void DigitalOutLoopStartResult::Clear() {
// @@protoc_insertion_point(message_clear_start:LabNetProt.Server.DigitalOutLoopStartResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  loop_name_.ClearToEmpty();
  is_succeed_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DigitalOutLoopStartResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string loop_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_loop_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "LabNetProt.Server.DigitalOutLoopStartResult.loop_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_succeed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          is_succeed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DigitalOutLoopStartResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LabNetProt.Server.DigitalOutLoopStartResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string loop_name = 1;
  if (this->loop_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_loop_name().data(), static_cast<int>(this->_internal_loop_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "LabNetProt.Server.DigitalOutLoopStartResult.loop_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_loop_name(), target);
  }

  // bool is_succeed = 2;
  if (this->is_succeed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_succeed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LabNetProt.Server.DigitalOutLoopStartResult)
  return target;
}

size_t DigitalOutLoopStartResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LabNetProt.Server.DigitalOutLoopStartResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string loop_name = 1;
  if (this->loop_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_loop_name());
  }

  // bool is_succeed = 2;
  if (this->is_succeed() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DigitalOutLoopStartResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LabNetProt.Server.DigitalOutLoopStartResult)
  GOOGLE_DCHECK_NE(&from, this);
  const DigitalOutLoopStartResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DigitalOutLoopStartResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LabNetProt.Server.DigitalOutLoopStartResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LabNetProt.Server.DigitalOutLoopStartResult)
    MergeFrom(*source);
  }
}

void DigitalOutLoopStartResult::MergeFrom(const DigitalOutLoopStartResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LabNetProt.Server.DigitalOutLoopStartResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.loop_name().size() > 0) {
    _internal_set_loop_name(from._internal_loop_name());
  }
  if (from.is_succeed() != 0) {
    _internal_set_is_succeed(from._internal_is_succeed());
  }
}

void DigitalOutLoopStartResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LabNetProt.Server.DigitalOutLoopStartResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DigitalOutLoopStartResult::CopyFrom(const DigitalOutLoopStartResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LabNetProt.Server.DigitalOutLoopStartResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DigitalOutLoopStartResult::IsInitialized() const {
  return true;
}

void DigitalOutLoopStartResult::InternalSwap(DigitalOutLoopStartResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  loop_name_.Swap(&other->loop_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(is_succeed_, other->is_succeed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DigitalOutLoopStartResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DigitalOutLoopStopped::_Internal {
 public:
};

DigitalOutLoopStopped::DigitalOutLoopStopped(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LabNetProt.Server.DigitalOutLoopStopped)
}
DigitalOutLoopStopped::DigitalOutLoopStopped(const DigitalOutLoopStopped& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  loop_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_loop_name().empty()) {
    loop_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_loop_name(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:LabNetProt.Server.DigitalOutLoopStopped)
}

void DigitalOutLoopStopped::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DigitalOutLoopStopped_LabNetServer_2eproto.base);
  loop_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DigitalOutLoopStopped::~DigitalOutLoopStopped() {
  // @@protoc_insertion_point(destructor:LabNetProt.Server.DigitalOutLoopStopped)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DigitalOutLoopStopped::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  loop_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DigitalOutLoopStopped::ArenaDtor(void* object) {
  DigitalOutLoopStopped* _this = reinterpret_cast< DigitalOutLoopStopped* >(object);
  (void)_this;
}
void DigitalOutLoopStopped::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DigitalOutLoopStopped::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DigitalOutLoopStopped& DigitalOutLoopStopped::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DigitalOutLoopStopped_LabNetServer_2eproto.base);
  return *internal_default_instance();
}


void DigitalOutLoopStopped::Clear() {
// @@protoc_insertion_point(message_clear_start:LabNetProt.Server.DigitalOutLoopStopped)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  loop_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DigitalOutLoopStopped::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string loop_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_loop_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "LabNetProt.Server.DigitalOutLoopStopped.loop_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DigitalOutLoopStopped::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LabNetProt.Server.DigitalOutLoopStopped)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string loop_name = 1;
  if (this->loop_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_loop_name().data(), static_cast<int>(this->_internal_loop_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "LabNetProt.Server.DigitalOutLoopStopped.loop_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_loop_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LabNetProt.Server.DigitalOutLoopStopped)
  return target;
}

size_t DigitalOutLoopStopped::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LabNetProt.Server.DigitalOutLoopStopped)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string loop_name = 1;
  if (this->loop_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_loop_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DigitalOutLoopStopped::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LabNetProt.Server.DigitalOutLoopStopped)
  GOOGLE_DCHECK_NE(&from, this);
  const DigitalOutLoopStopped* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DigitalOutLoopStopped>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LabNetProt.Server.DigitalOutLoopStopped)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LabNetProt.Server.DigitalOutLoopStopped)
    MergeFrom(*source);
  }
}

void DigitalOutLoopStopped::MergeFrom(const DigitalOutLoopStopped& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LabNetProt.Server.DigitalOutLoopStopped)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.loop_name().size() > 0) {
    _internal_set_loop_name(from._internal_loop_name());
  }
}

void DigitalOutLoopStopped::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LabNetProt.Server.DigitalOutLoopStopped)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DigitalOutLoopStopped::CopyFrom(const DigitalOutLoopStopped& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LabNetProt.Server.DigitalOutLoopStopped)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DigitalOutLoopStopped::IsInitialized() const {
  return true;
}

void DigitalOutLoopStopped::InternalSwap(DigitalOutLoopStopped* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  loop_name_.Swap(&other->loop_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata DigitalOutLoopStopped::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Server
}  // namespace LabNetProt
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::LabNetProt::Server::DigitalOutState* Arena::CreateMaybeMessage< ::LabNetProt::Server::DigitalOutState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LabNetProt::Server::DigitalOutState >(arena);
}
template<> PROTOBUF_NOINLINE ::LabNetProt::Server::DigitalInState* Arena::CreateMaybeMessage< ::LabNetProt::Server::DigitalInState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LabNetProt::Server::DigitalInState >(arena);
}
template<> PROTOBUF_NOINLINE ::LabNetProt::Server::NewByteData* Arena::CreateMaybeMessage< ::LabNetProt::Server::NewByteData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LabNetProt::Server::NewByteData >(arena);
}
template<> PROTOBUF_NOINLINE ::LabNetProt::Server::DataWriteComplete* Arena::CreateMaybeMessage< ::LabNetProt::Server::DataWriteComplete >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LabNetProt::Server::DataWriteComplete >(arena);
}
template<> PROTOBUF_NOINLINE ::LabNetProt::Server::InterfaceInitResult* Arena::CreateMaybeMessage< ::LabNetProt::Server::InterfaceInitResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LabNetProt::Server::InterfaceInitResult >(arena);
}
template<> PROTOBUF_NOINLINE ::LabNetProt::Server::InterfaceLost* Arena::CreateMaybeMessage< ::LabNetProt::Server::InterfaceLost >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LabNetProt::Server::InterfaceLost >(arena);
}
template<> PROTOBUF_NOINLINE ::LabNetProt::Server::InterfaceReconnected* Arena::CreateMaybeMessage< ::LabNetProt::Server::InterfaceReconnected >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LabNetProt::Server::InterfaceReconnected >(arena);
}
template<> PROTOBUF_NOINLINE ::LabNetProt::Server::DigitalInInitResult* Arena::CreateMaybeMessage< ::LabNetProt::Server::DigitalInInitResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LabNetProt::Server::DigitalInInitResult >(arena);
}
template<> PROTOBUF_NOINLINE ::LabNetProt::Server::DigitalOutInitResult* Arena::CreateMaybeMessage< ::LabNetProt::Server::DigitalOutInitResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LabNetProt::Server::DigitalOutInitResult >(arena);
}
template<> PROTOBUF_NOINLINE ::LabNetProt::Server::OnlyOneConnectionAllowed* Arena::CreateMaybeMessage< ::LabNetProt::Server::OnlyOneConnectionAllowed >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LabNetProt::Server::OnlyOneConnectionAllowed >(arena);
}
template<> PROTOBUF_NOINLINE ::LabNetProt::Server::LabNetResetReply* Arena::CreateMaybeMessage< ::LabNetProt::Server::LabNetResetReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LabNetProt::Server::LabNetResetReply >(arena);
}
template<> PROTOBUF_NOINLINE ::LabNetProt::Server::LabNetIdReply* Arena::CreateMaybeMessage< ::LabNetProt::Server::LabNetIdReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LabNetProt::Server::LabNetIdReply >(arena);
}
template<> PROTOBUF_NOINLINE ::LabNetProt::Server::DigitalOutLoopStartResult* Arena::CreateMaybeMessage< ::LabNetProt::Server::DigitalOutLoopStartResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LabNetProt::Server::DigitalOutLoopStartResult >(arena);
}
template<> PROTOBUF_NOINLINE ::LabNetProt::Server::DigitalOutLoopStopped* Arena::CreateMaybeMessage< ::LabNetProt::Server::DigitalOutLoopStopped >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LabNetProt::Server::DigitalOutLoopStopped >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
