// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LabNetServer.proto

#include "LabNetServer.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace LabNetProt {
namespace Server {
constexpr DigitalOutState::DigitalOutState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pin_(nullptr)
  , time_(nullptr)
  , state_(false){}
struct DigitalOutStateDefaultTypeInternal {
  constexpr DigitalOutStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DigitalOutStateDefaultTypeInternal() {}
  union {
    DigitalOutState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DigitalOutStateDefaultTypeInternal _DigitalOutState_default_instance_;
constexpr DigitalInState::DigitalInState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pin_(nullptr)
  , time_(nullptr)
  , state_(false){}
struct DigitalInStateDefaultTypeInternal {
  constexpr DigitalInStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DigitalInStateDefaultTypeInternal() {}
  union {
    DigitalInState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DigitalInStateDefaultTypeInternal _DigitalInState_default_instance_;
constexpr NewByteData::NewByteData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , pin_(nullptr)
  , time_(nullptr){}
struct NewByteDataDefaultTypeInternal {
  constexpr NewByteDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NewByteDataDefaultTypeInternal() {}
  union {
    NewByteData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NewByteDataDefaultTypeInternal _NewByteData_default_instance_;
constexpr DataWriteComplete::DataWriteComplete(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pin_(nullptr){}
struct DataWriteCompleteDefaultTypeInternal {
  constexpr DataWriteCompleteDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DataWriteCompleteDefaultTypeInternal() {}
  union {
    DataWriteComplete _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DataWriteCompleteDefaultTypeInternal _DataWriteComplete_default_instance_;
constexpr InterfaceInitResult::InterfaceInitResult(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : interface_(0)

  , is_succeed_(false){}
struct InterfaceInitResultDefaultTypeInternal {
  constexpr InterfaceInitResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InterfaceInitResultDefaultTypeInternal() {}
  union {
    InterfaceInitResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InterfaceInitResultDefaultTypeInternal _InterfaceInitResult_default_instance_;
constexpr InterfaceLost::InterfaceLost(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : interface_(0)
{}
struct InterfaceLostDefaultTypeInternal {
  constexpr InterfaceLostDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InterfaceLostDefaultTypeInternal() {}
  union {
    InterfaceLost _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InterfaceLostDefaultTypeInternal _InterfaceLost_default_instance_;
constexpr InterfaceReconnected::InterfaceReconnected(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : interface_(0)
{}
struct InterfaceReconnectedDefaultTypeInternal {
  constexpr InterfaceReconnectedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InterfaceReconnectedDefaultTypeInternal() {}
  union {
    InterfaceReconnected _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InterfaceReconnectedDefaultTypeInternal _InterfaceReconnected_default_instance_;
constexpr DigitalInInitResult::DigitalInInitResult(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : interface_(0)

  , pin_(0u)
  , is_succeed_(false){}
struct DigitalInInitResultDefaultTypeInternal {
  constexpr DigitalInInitResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DigitalInInitResultDefaultTypeInternal() {}
  union {
    DigitalInInitResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DigitalInInitResultDefaultTypeInternal _DigitalInInitResult_default_instance_;
constexpr DigitalOutInitResult::DigitalOutInitResult(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : interface_(0)

  , pin_(0u)
  , is_succeed_(false){}
struct DigitalOutInitResultDefaultTypeInternal {
  constexpr DigitalOutInitResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DigitalOutInitResultDefaultTypeInternal() {}
  union {
    DigitalOutInitResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DigitalOutInitResultDefaultTypeInternal _DigitalOutInitResult_default_instance_;
constexpr OnlyOneConnectionAllowed::OnlyOneConnectionAllowed(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct OnlyOneConnectionAllowedDefaultTypeInternal {
  constexpr OnlyOneConnectionAllowedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OnlyOneConnectionAllowedDefaultTypeInternal() {}
  union {
    OnlyOneConnectionAllowed _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OnlyOneConnectionAllowedDefaultTypeInternal _OnlyOneConnectionAllowed_default_instance_;
constexpr LabNetResetReply::LabNetResetReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : is_reset_(false){}
struct LabNetResetReplyDefaultTypeInternal {
  constexpr LabNetResetReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LabNetResetReplyDefaultTypeInternal() {}
  union {
    LabNetResetReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LabNetResetReplyDefaultTypeInternal _LabNetResetReply_default_instance_;
constexpr LabNetIdReply::LabNetIdReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , major_version_(0u)
  , minor_version_(0u){}
struct LabNetIdReplyDefaultTypeInternal {
  constexpr LabNetIdReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LabNetIdReplyDefaultTypeInternal() {}
  union {
    LabNetIdReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LabNetIdReplyDefaultTypeInternal _LabNetIdReply_default_instance_;
constexpr DigitalOutLoopStartResult::DigitalOutLoopStartResult(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : loop_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , is_succeed_(false){}
struct DigitalOutLoopStartResultDefaultTypeInternal {
  constexpr DigitalOutLoopStartResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DigitalOutLoopStartResultDefaultTypeInternal() {}
  union {
    DigitalOutLoopStartResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DigitalOutLoopStartResultDefaultTypeInternal _DigitalOutLoopStartResult_default_instance_;
constexpr DigitalOutLoopStopped::DigitalOutLoopStopped(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : loop_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct DigitalOutLoopStoppedDefaultTypeInternal {
  constexpr DigitalOutLoopStoppedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DigitalOutLoopStoppedDefaultTypeInternal() {}
  union {
    DigitalOutLoopStopped _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DigitalOutLoopStoppedDefaultTypeInternal _DigitalOutLoopStopped_default_instance_;
constexpr ChiBioPumpMoveResult::ChiBioPumpMoveResult(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pump_id_(0u)
  , result_(0)
{}
struct ChiBioPumpMoveResultDefaultTypeInternal {
  constexpr ChiBioPumpMoveResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChiBioPumpMoveResultDefaultTypeInternal() {}
  union {
    ChiBioPumpMoveResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChiBioPumpMoveResultDefaultTypeInternal _ChiBioPumpMoveResult_default_instance_;
}  // namespace Server
}  // namespace LabNetProt
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_LabNetServer_2eproto[15];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_LabNetServer_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_LabNetServer_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_LabNetServer_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Server::DigitalOutState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Server::DigitalOutState, pin_),
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Server::DigitalOutState, state_),
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Server::DigitalOutState, time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Server::DigitalInState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Server::DigitalInState, pin_),
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Server::DigitalInState, state_),
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Server::DigitalInState, time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Server::NewByteData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Server::NewByteData, pin_),
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Server::NewByteData, data_),
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Server::NewByteData, time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Server::DataWriteComplete, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Server::DataWriteComplete, pin_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Server::InterfaceInitResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Server::InterfaceInitResult, interface_),
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Server::InterfaceInitResult, is_succeed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Server::InterfaceLost, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Server::InterfaceLost, interface_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Server::InterfaceReconnected, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Server::InterfaceReconnected, interface_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Server::DigitalInInitResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Server::DigitalInInitResult, interface_),
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Server::DigitalInInitResult, pin_),
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Server::DigitalInInitResult, is_succeed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Server::DigitalOutInitResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Server::DigitalOutInitResult, interface_),
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Server::DigitalOutInitResult, pin_),
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Server::DigitalOutInitResult, is_succeed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Server::OnlyOneConnectionAllowed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Server::LabNetResetReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Server::LabNetResetReply, is_reset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Server::LabNetIdReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Server::LabNetIdReply, id_),
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Server::LabNetIdReply, major_version_),
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Server::LabNetIdReply, minor_version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Server::DigitalOutLoopStartResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Server::DigitalOutLoopStartResult, loop_name_),
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Server::DigitalOutLoopStartResult, is_succeed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Server::DigitalOutLoopStopped, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Server::DigitalOutLoopStopped, loop_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Server::ChiBioPumpMoveResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Server::ChiBioPumpMoveResult, pump_id_),
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Server::ChiBioPumpMoveResult, result_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::LabNetProt::Server::DigitalOutState)},
  { 9, -1, -1, sizeof(::LabNetProt::Server::DigitalInState)},
  { 18, -1, -1, sizeof(::LabNetProt::Server::NewByteData)},
  { 27, -1, -1, sizeof(::LabNetProt::Server::DataWriteComplete)},
  { 34, -1, -1, sizeof(::LabNetProt::Server::InterfaceInitResult)},
  { 42, -1, -1, sizeof(::LabNetProt::Server::InterfaceLost)},
  { 49, -1, -1, sizeof(::LabNetProt::Server::InterfaceReconnected)},
  { 56, -1, -1, sizeof(::LabNetProt::Server::DigitalInInitResult)},
  { 65, -1, -1, sizeof(::LabNetProt::Server::DigitalOutInitResult)},
  { 74, -1, -1, sizeof(::LabNetProt::Server::OnlyOneConnectionAllowed)},
  { 80, -1, -1, sizeof(::LabNetProt::Server::LabNetResetReply)},
  { 87, -1, -1, sizeof(::LabNetProt::Server::LabNetIdReply)},
  { 96, -1, -1, sizeof(::LabNetProt::Server::DigitalOutLoopStartResult)},
  { 104, -1, -1, sizeof(::LabNetProt::Server::DigitalOutLoopStopped)},
  { 111, -1, -1, sizeof(::LabNetProt::Server::ChiBioPumpMoveResult)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LabNetProt::Server::_DigitalOutState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LabNetProt::Server::_DigitalInState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LabNetProt::Server::_NewByteData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LabNetProt::Server::_DataWriteComplete_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LabNetProt::Server::_InterfaceInitResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LabNetProt::Server::_InterfaceLost_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LabNetProt::Server::_InterfaceReconnected_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LabNetProt::Server::_DigitalInInitResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LabNetProt::Server::_DigitalOutInitResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LabNetProt::Server::_OnlyOneConnectionAllowed_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LabNetProt::Server::_LabNetResetReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LabNetProt::Server::_LabNetIdReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LabNetProt::Server::_DigitalOutLoopStartResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LabNetProt::Server::_DigitalOutLoopStopped_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LabNetProt::Server::_ChiBioPumpMoveResult_default_instance_),
};

const char descriptor_table_protodef_LabNetServer_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022LabNetServer.proto\022\021LabNetProt.Server\032"
  "\014LabNet.proto\032\037google/protobuf/timestamp"
  ".proto\"j\n\017DigitalOutState\022\036\n\003pin\030\001 \001(\0132\021"
  ".LabNetProt.PinId\022\r\n\005state\030\002 \001(\010\022(\n\004time"
  "\030\003 \001(\0132\032.google.protobuf.Timestamp\"i\n\016Di"
  "gitalInState\022\036\n\003pin\030\001 \001(\0132\021.LabNetProt.P"
  "inId\022\r\n\005state\030\002 \001(\010\022(\n\004time\030\003 \001(\0132\032.goog"
  "le.protobuf.Timestamp\"e\n\013NewByteData\022\036\n\003"
  "pin\030\001 \001(\0132\021.LabNetProt.PinId\022\014\n\004data\030\002 \001"
  "(\014\022(\n\004time\030\003 \001(\0132\032.google.protobuf.Times"
  "tamp\"3\n\021DataWriteComplete\022\036\n\003pin\030\001 \001(\0132\021"
  ".LabNetProt.PinId\"T\n\023InterfaceInitResult"
  "\022)\n\tinterface\030\001 \001(\0162\026.LabNetProt.Interfa"
  "ces\022\022\n\nis_succeed\030\002 \001(\010\":\n\rInterfaceLost"
  "\022)\n\tinterface\030\001 \001(\0162\026.LabNetProt.Interfa"
  "ces\"A\n\024InterfaceReconnected\022)\n\tinterface"
  "\030\001 \001(\0162\026.LabNetProt.Interfaces\"a\n\023Digita"
  "lInInitResult\022)\n\tinterface\030\001 \001(\0162\026.LabNe"
  "tProt.Interfaces\022\013\n\003pin\030\002 \001(\r\022\022\n\nis_succ"
  "eed\030\003 \001(\010\"b\n\024DigitalOutInitResult\022)\n\tint"
  "erface\030\001 \001(\0162\026.LabNetProt.Interfaces\022\013\n\003"
  "pin\030\002 \001(\r\022\022\n\nis_succeed\030\003 \001(\010\"\032\n\030OnlyOne"
  "ConnectionAllowed\"$\n\020LabNetResetReply\022\020\n"
  "\010is_reset\030\001 \001(\010\"I\n\rLabNetIdReply\022\n\n\002id\030\001"
  " \001(\t\022\025\n\rmajor_version\030\002 \001(\r\022\025\n\rminor_ver"
  "sion\030\003 \001(\r\"B\n\031DigitalOutLoopStartResult\022"
  "\021\n\tloop_name\030\001 \001(\t\022\022\n\nis_succeed\030\002 \001(\010\"*"
  "\n\025DigitalOutLoopStopped\022\021\n\tloop_name\030\001 \001"
  "(\t\"\242\001\n\024ChiBioPumpMoveResult\022\017\n\007pump_id\030\001"
  " \001(\r\022B\n\006result\030\002 \001(\01622.LabNetProt.Server"
  ".ChiBioPumpMoveResult.MoveResult\"5\n\nMove"
  "Result\022\013\n\007STOPPED\020\000\022\r\n\tMOVE_DOWN\020\001\022\013\n\007MO"
  "VE_UP\020\002*\246\003\n\021ServerMessageType\022\010\n\004NONE\020\000\022"
  "\023\n\017LABNET_ID_REPLY\020\001\022\026\n\022LABNET_RESET_REP"
  "LY\020\002\022\025\n\021DIGITAL_OUT_STATE\020\003\022\024\n\020DIGITAL_I"
  "N_STATE\020\004\022\021\n\rNEW_BYTE_DATA\020\005\022\027\n\023DATA_WRI"
  "TE_COMPLETE\020\006\022\031\n\025INTERFACE_INIT_RESULT\020\007"
  "\022\032\n\026DIGITAL_IN_INIT_RESULT\020\010\022\033\n\027DIGITAL_"
  "OUT_INIT_RESULT\020\t\022\037\n\033ONLY_ONE_CONNECTION"
  "_ALLOWED\020\n\022\022\n\016INTERFACE_LOST\020\013\022\031\n\025INTERF"
  "ACE_RECONNECTED\020\014\022!\n\035DIGITAL_OUT_LOOP_ST"
  "ART_RESULT\020\r\022\034\n\030DIGITAL_OUT_LOOP_STOPPED"
  "\020\016\022\034\n\030CHI_BIO_PUMP_MOVE_RESULT\020\031b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_LabNetServer_2eproto_deps[2] = {
  &::descriptor_table_LabNet_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_LabNetServer_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_LabNetServer_2eproto = {
  false, false, 1720, descriptor_table_protodef_LabNetServer_2eproto, "LabNetServer.proto", 
  &descriptor_table_LabNetServer_2eproto_once, descriptor_table_LabNetServer_2eproto_deps, 2, 15,
  schemas, file_default_instances, TableStruct_LabNetServer_2eproto::offsets,
  file_level_metadata_LabNetServer_2eproto, file_level_enum_descriptors_LabNetServer_2eproto, file_level_service_descriptors_LabNetServer_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_LabNetServer_2eproto_getter() {
  return &descriptor_table_LabNetServer_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_LabNetServer_2eproto(&descriptor_table_LabNetServer_2eproto);
namespace LabNetProt {
namespace Server {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChiBioPumpMoveResult_MoveResult_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_LabNetServer_2eproto);
  return file_level_enum_descriptors_LabNetServer_2eproto[0];
}
bool ChiBioPumpMoveResult_MoveResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ChiBioPumpMoveResult_MoveResult ChiBioPumpMoveResult::STOPPED;
constexpr ChiBioPumpMoveResult_MoveResult ChiBioPumpMoveResult::MOVE_DOWN;
constexpr ChiBioPumpMoveResult_MoveResult ChiBioPumpMoveResult::MOVE_UP;
constexpr ChiBioPumpMoveResult_MoveResult ChiBioPumpMoveResult::MoveResult_MIN;
constexpr ChiBioPumpMoveResult_MoveResult ChiBioPumpMoveResult::MoveResult_MAX;
constexpr int ChiBioPumpMoveResult::MoveResult_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ServerMessageType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_LabNetServer_2eproto);
  return file_level_enum_descriptors_LabNetServer_2eproto[1];
}
bool ServerMessageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 25:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class DigitalOutState::_Internal {
 public:
  static const ::LabNetProt::PinId& pin(const DigitalOutState* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& time(const DigitalOutState* msg);
};

const ::LabNetProt::PinId&
DigitalOutState::_Internal::pin(const DigitalOutState* msg) {
  return *msg->pin_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
DigitalOutState::_Internal::time(const DigitalOutState* msg) {
  return *msg->time_;
}
void DigitalOutState::clear_pin() {
  if (GetArenaForAllocation() == nullptr && pin_ != nullptr) {
    delete pin_;
  }
  pin_ = nullptr;
}
void DigitalOutState::clear_time() {
  if (GetArenaForAllocation() == nullptr && time_ != nullptr) {
    delete time_;
  }
  time_ = nullptr;
}
DigitalOutState::DigitalOutState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:LabNetProt.Server.DigitalOutState)
}
DigitalOutState::DigitalOutState(const DigitalOutState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pin()) {
    pin_ = new ::LabNetProt::PinId(*from.pin_);
  } else {
    pin_ = nullptr;
  }
  if (from._internal_has_time()) {
    time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.time_);
  } else {
    time_ = nullptr;
  }
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:LabNetProt.Server.DigitalOutState)
}

void DigitalOutState::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pin_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&pin_)) + sizeof(state_));
}

DigitalOutState::~DigitalOutState() {
  // @@protoc_insertion_point(destructor:LabNetProt.Server.DigitalOutState)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DigitalOutState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete pin_;
  if (this != internal_default_instance()) delete time_;
}

void DigitalOutState::ArenaDtor(void* object) {
  DigitalOutState* _this = reinterpret_cast< DigitalOutState* >(object);
  (void)_this;
}
void DigitalOutState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DigitalOutState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DigitalOutState::Clear() {
// @@protoc_insertion_point(message_clear_start:LabNetProt.Server.DigitalOutState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && pin_ != nullptr) {
    delete pin_;
  }
  pin_ = nullptr;
  if (GetArenaForAllocation() == nullptr && time_ != nullptr) {
    delete time_;
  }
  time_ = nullptr;
  state_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DigitalOutState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .LabNetProt.PinId pin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pin(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DigitalOutState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LabNetProt.Server.DigitalOutState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .LabNetProt.PinId pin = 1;
  if (this->_internal_has_pin()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::pin(this), target, stream);
  }

  // bool state = 2;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_state(), target);
  }

  // .google.protobuf.Timestamp time = 3;
  if (this->_internal_has_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::time(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LabNetProt.Server.DigitalOutState)
  return target;
}

size_t DigitalOutState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LabNetProt.Server.DigitalOutState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .LabNetProt.PinId pin = 1;
  if (this->_internal_has_pin()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pin_);
  }

  // .google.protobuf.Timestamp time = 3;
  if (this->_internal_has_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *time_);
  }

  // bool state = 2;
  if (this->_internal_state() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DigitalOutState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DigitalOutState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DigitalOutState::GetClassData() const { return &_class_data_; }

void DigitalOutState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DigitalOutState *>(to)->MergeFrom(
      static_cast<const DigitalOutState &>(from));
}


void DigitalOutState::MergeFrom(const DigitalOutState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LabNetProt.Server.DigitalOutState)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_pin()) {
    _internal_mutable_pin()->::LabNetProt::PinId::MergeFrom(from._internal_pin());
  }
  if (from._internal_has_time()) {
    _internal_mutable_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_time());
  }
  if (from._internal_state() != 0) {
    _internal_set_state(from._internal_state());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DigitalOutState::CopyFrom(const DigitalOutState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LabNetProt.Server.DigitalOutState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DigitalOutState::IsInitialized() const {
  return true;
}

void DigitalOutState::InternalSwap(DigitalOutState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DigitalOutState, state_)
      + sizeof(DigitalOutState::state_)
      - PROTOBUF_FIELD_OFFSET(DigitalOutState, pin_)>(
          reinterpret_cast<char*>(&pin_),
          reinterpret_cast<char*>(&other->pin_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DigitalOutState::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_LabNetServer_2eproto_getter, &descriptor_table_LabNetServer_2eproto_once,
      file_level_metadata_LabNetServer_2eproto[0]);
}

// ===================================================================

class DigitalInState::_Internal {
 public:
  static const ::LabNetProt::PinId& pin(const DigitalInState* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& time(const DigitalInState* msg);
};

const ::LabNetProt::PinId&
DigitalInState::_Internal::pin(const DigitalInState* msg) {
  return *msg->pin_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
DigitalInState::_Internal::time(const DigitalInState* msg) {
  return *msg->time_;
}
void DigitalInState::clear_pin() {
  if (GetArenaForAllocation() == nullptr && pin_ != nullptr) {
    delete pin_;
  }
  pin_ = nullptr;
}
void DigitalInState::clear_time() {
  if (GetArenaForAllocation() == nullptr && time_ != nullptr) {
    delete time_;
  }
  time_ = nullptr;
}
DigitalInState::DigitalInState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:LabNetProt.Server.DigitalInState)
}
DigitalInState::DigitalInState(const DigitalInState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pin()) {
    pin_ = new ::LabNetProt::PinId(*from.pin_);
  } else {
    pin_ = nullptr;
  }
  if (from._internal_has_time()) {
    time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.time_);
  } else {
    time_ = nullptr;
  }
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:LabNetProt.Server.DigitalInState)
}

void DigitalInState::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pin_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&pin_)) + sizeof(state_));
}

DigitalInState::~DigitalInState() {
  // @@protoc_insertion_point(destructor:LabNetProt.Server.DigitalInState)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DigitalInState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete pin_;
  if (this != internal_default_instance()) delete time_;
}

void DigitalInState::ArenaDtor(void* object) {
  DigitalInState* _this = reinterpret_cast< DigitalInState* >(object);
  (void)_this;
}
void DigitalInState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DigitalInState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DigitalInState::Clear() {
// @@protoc_insertion_point(message_clear_start:LabNetProt.Server.DigitalInState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && pin_ != nullptr) {
    delete pin_;
  }
  pin_ = nullptr;
  if (GetArenaForAllocation() == nullptr && time_ != nullptr) {
    delete time_;
  }
  time_ = nullptr;
  state_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DigitalInState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .LabNetProt.PinId pin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pin(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DigitalInState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LabNetProt.Server.DigitalInState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .LabNetProt.PinId pin = 1;
  if (this->_internal_has_pin()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::pin(this), target, stream);
  }

  // bool state = 2;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_state(), target);
  }

  // .google.protobuf.Timestamp time = 3;
  if (this->_internal_has_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::time(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LabNetProt.Server.DigitalInState)
  return target;
}

size_t DigitalInState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LabNetProt.Server.DigitalInState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .LabNetProt.PinId pin = 1;
  if (this->_internal_has_pin()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pin_);
  }

  // .google.protobuf.Timestamp time = 3;
  if (this->_internal_has_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *time_);
  }

  // bool state = 2;
  if (this->_internal_state() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DigitalInState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DigitalInState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DigitalInState::GetClassData() const { return &_class_data_; }

void DigitalInState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DigitalInState *>(to)->MergeFrom(
      static_cast<const DigitalInState &>(from));
}


void DigitalInState::MergeFrom(const DigitalInState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LabNetProt.Server.DigitalInState)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_pin()) {
    _internal_mutable_pin()->::LabNetProt::PinId::MergeFrom(from._internal_pin());
  }
  if (from._internal_has_time()) {
    _internal_mutable_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_time());
  }
  if (from._internal_state() != 0) {
    _internal_set_state(from._internal_state());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DigitalInState::CopyFrom(const DigitalInState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LabNetProt.Server.DigitalInState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DigitalInState::IsInitialized() const {
  return true;
}

void DigitalInState::InternalSwap(DigitalInState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DigitalInState, state_)
      + sizeof(DigitalInState::state_)
      - PROTOBUF_FIELD_OFFSET(DigitalInState, pin_)>(
          reinterpret_cast<char*>(&pin_),
          reinterpret_cast<char*>(&other->pin_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DigitalInState::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_LabNetServer_2eproto_getter, &descriptor_table_LabNetServer_2eproto_once,
      file_level_metadata_LabNetServer_2eproto[1]);
}

// ===================================================================

class NewByteData::_Internal {
 public:
  static const ::LabNetProt::PinId& pin(const NewByteData* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& time(const NewByteData* msg);
};

const ::LabNetProt::PinId&
NewByteData::_Internal::pin(const NewByteData* msg) {
  return *msg->pin_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
NewByteData::_Internal::time(const NewByteData* msg) {
  return *msg->time_;
}
void NewByteData::clear_pin() {
  if (GetArenaForAllocation() == nullptr && pin_ != nullptr) {
    delete pin_;
  }
  pin_ = nullptr;
}
void NewByteData::clear_time() {
  if (GetArenaForAllocation() == nullptr && time_ != nullptr) {
    delete time_;
  }
  time_ = nullptr;
}
NewByteData::NewByteData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:LabNetProt.Server.NewByteData)
}
NewByteData::NewByteData(const NewByteData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_pin()) {
    pin_ = new ::LabNetProt::PinId(*from.pin_);
  } else {
    pin_ = nullptr;
  }
  if (from._internal_has_time()) {
    time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.time_);
  } else {
    time_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:LabNetProt.Server.NewByteData)
}

void NewByteData::SharedCtor() {
data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pin_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&time_) -
    reinterpret_cast<char*>(&pin_)) + sizeof(time_));
}

NewByteData::~NewByteData() {
  // @@protoc_insertion_point(destructor:LabNetProt.Server.NewByteData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NewByteData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pin_;
  if (this != internal_default_instance()) delete time_;
}

void NewByteData::ArenaDtor(void* object) {
  NewByteData* _this = reinterpret_cast< NewByteData* >(object);
  (void)_this;
}
void NewByteData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NewByteData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NewByteData::Clear() {
// @@protoc_insertion_point(message_clear_start:LabNetProt.Server.NewByteData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && pin_ != nullptr) {
    delete pin_;
  }
  pin_ = nullptr;
  if (GetArenaForAllocation() == nullptr && time_ != nullptr) {
    delete time_;
  }
  time_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NewByteData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .LabNetProt.PinId pin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pin(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NewByteData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LabNetProt.Server.NewByteData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .LabNetProt.PinId pin = 1;
  if (this->_internal_has_pin()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::pin(this), target, stream);
  }

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  // .google.protobuf.Timestamp time = 3;
  if (this->_internal_has_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::time(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LabNetProt.Server.NewByteData)
  return target;
}

size_t NewByteData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LabNetProt.Server.NewByteData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // .LabNetProt.PinId pin = 1;
  if (this->_internal_has_pin()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pin_);
  }

  // .google.protobuf.Timestamp time = 3;
  if (this->_internal_has_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *time_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NewByteData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NewByteData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NewByteData::GetClassData() const { return &_class_data_; }

void NewByteData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NewByteData *>(to)->MergeFrom(
      static_cast<const NewByteData &>(from));
}


void NewByteData::MergeFrom(const NewByteData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LabNetProt.Server.NewByteData)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _internal_set_data(from._internal_data());
  }
  if (from._internal_has_pin()) {
    _internal_mutable_pin()->::LabNetProt::PinId::MergeFrom(from._internal_pin());
  }
  if (from._internal_has_time()) {
    _internal_mutable_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_time());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NewByteData::CopyFrom(const NewByteData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LabNetProt.Server.NewByteData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewByteData::IsInitialized() const {
  return true;
}

void NewByteData::InternalSwap(NewByteData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &data_, lhs_arena,
      &other->data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NewByteData, time_)
      + sizeof(NewByteData::time_)
      - PROTOBUF_FIELD_OFFSET(NewByteData, pin_)>(
          reinterpret_cast<char*>(&pin_),
          reinterpret_cast<char*>(&other->pin_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NewByteData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_LabNetServer_2eproto_getter, &descriptor_table_LabNetServer_2eproto_once,
      file_level_metadata_LabNetServer_2eproto[2]);
}

// ===================================================================

class DataWriteComplete::_Internal {
 public:
  static const ::LabNetProt::PinId& pin(const DataWriteComplete* msg);
};

const ::LabNetProt::PinId&
DataWriteComplete::_Internal::pin(const DataWriteComplete* msg) {
  return *msg->pin_;
}
void DataWriteComplete::clear_pin() {
  if (GetArenaForAllocation() == nullptr && pin_ != nullptr) {
    delete pin_;
  }
  pin_ = nullptr;
}
DataWriteComplete::DataWriteComplete(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:LabNetProt.Server.DataWriteComplete)
}
DataWriteComplete::DataWriteComplete(const DataWriteComplete& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pin()) {
    pin_ = new ::LabNetProt::PinId(*from.pin_);
  } else {
    pin_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:LabNetProt.Server.DataWriteComplete)
}

void DataWriteComplete::SharedCtor() {
pin_ = nullptr;
}

DataWriteComplete::~DataWriteComplete() {
  // @@protoc_insertion_point(destructor:LabNetProt.Server.DataWriteComplete)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DataWriteComplete::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete pin_;
}

void DataWriteComplete::ArenaDtor(void* object) {
  DataWriteComplete* _this = reinterpret_cast< DataWriteComplete* >(object);
  (void)_this;
}
void DataWriteComplete::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DataWriteComplete::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DataWriteComplete::Clear() {
// @@protoc_insertion_point(message_clear_start:LabNetProt.Server.DataWriteComplete)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && pin_ != nullptr) {
    delete pin_;
  }
  pin_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataWriteComplete::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .LabNetProt.PinId pin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pin(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DataWriteComplete::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LabNetProt.Server.DataWriteComplete)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .LabNetProt.PinId pin = 1;
  if (this->_internal_has_pin()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::pin(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LabNetProt.Server.DataWriteComplete)
  return target;
}

size_t DataWriteComplete::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LabNetProt.Server.DataWriteComplete)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .LabNetProt.PinId pin = 1;
  if (this->_internal_has_pin()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pin_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DataWriteComplete::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DataWriteComplete::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DataWriteComplete::GetClassData() const { return &_class_data_; }

void DataWriteComplete::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DataWriteComplete *>(to)->MergeFrom(
      static_cast<const DataWriteComplete &>(from));
}


void DataWriteComplete::MergeFrom(const DataWriteComplete& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LabNetProt.Server.DataWriteComplete)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_pin()) {
    _internal_mutable_pin()->::LabNetProt::PinId::MergeFrom(from._internal_pin());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DataWriteComplete::CopyFrom(const DataWriteComplete& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LabNetProt.Server.DataWriteComplete)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataWriteComplete::IsInitialized() const {
  return true;
}

void DataWriteComplete::InternalSwap(DataWriteComplete* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(pin_, other->pin_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DataWriteComplete::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_LabNetServer_2eproto_getter, &descriptor_table_LabNetServer_2eproto_once,
      file_level_metadata_LabNetServer_2eproto[3]);
}

// ===================================================================

class InterfaceInitResult::_Internal {
 public:
};

InterfaceInitResult::InterfaceInitResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:LabNetProt.Server.InterfaceInitResult)
}
InterfaceInitResult::InterfaceInitResult(const InterfaceInitResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&interface_, &from.interface_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_succeed_) -
    reinterpret_cast<char*>(&interface_)) + sizeof(is_succeed_));
  // @@protoc_insertion_point(copy_constructor:LabNetProt.Server.InterfaceInitResult)
}

void InterfaceInitResult::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&interface_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_succeed_) -
    reinterpret_cast<char*>(&interface_)) + sizeof(is_succeed_));
}

InterfaceInitResult::~InterfaceInitResult() {
  // @@protoc_insertion_point(destructor:LabNetProt.Server.InterfaceInitResult)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void InterfaceInitResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void InterfaceInitResult::ArenaDtor(void* object) {
  InterfaceInitResult* _this = reinterpret_cast< InterfaceInitResult* >(object);
  (void)_this;
}
void InterfaceInitResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InterfaceInitResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InterfaceInitResult::Clear() {
// @@protoc_insertion_point(message_clear_start:LabNetProt.Server.InterfaceInitResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&interface_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_succeed_) -
      reinterpret_cast<char*>(&interface_)) + sizeof(is_succeed_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InterfaceInitResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .LabNetProt.Interfaces interface = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_interface(static_cast<::LabNetProt::Interfaces>(val));
        } else
          goto handle_unusual;
        continue;
      // bool is_succeed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          is_succeed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InterfaceInitResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LabNetProt.Server.InterfaceInitResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .LabNetProt.Interfaces interface = 1;
  if (this->_internal_interface() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_interface(), target);
  }

  // bool is_succeed = 2;
  if (this->_internal_is_succeed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_succeed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LabNetProt.Server.InterfaceInitResult)
  return target;
}

size_t InterfaceInitResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LabNetProt.Server.InterfaceInitResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .LabNetProt.Interfaces interface = 1;
  if (this->_internal_interface() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_interface());
  }

  // bool is_succeed = 2;
  if (this->_internal_is_succeed() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InterfaceInitResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InterfaceInitResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InterfaceInitResult::GetClassData() const { return &_class_data_; }

void InterfaceInitResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InterfaceInitResult *>(to)->MergeFrom(
      static_cast<const InterfaceInitResult &>(from));
}


void InterfaceInitResult::MergeFrom(const InterfaceInitResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LabNetProt.Server.InterfaceInitResult)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_interface() != 0) {
    _internal_set_interface(from._internal_interface());
  }
  if (from._internal_is_succeed() != 0) {
    _internal_set_is_succeed(from._internal_is_succeed());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InterfaceInitResult::CopyFrom(const InterfaceInitResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LabNetProt.Server.InterfaceInitResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InterfaceInitResult::IsInitialized() const {
  return true;
}

void InterfaceInitResult::InternalSwap(InterfaceInitResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InterfaceInitResult, is_succeed_)
      + sizeof(InterfaceInitResult::is_succeed_)
      - PROTOBUF_FIELD_OFFSET(InterfaceInitResult, interface_)>(
          reinterpret_cast<char*>(&interface_),
          reinterpret_cast<char*>(&other->interface_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InterfaceInitResult::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_LabNetServer_2eproto_getter, &descriptor_table_LabNetServer_2eproto_once,
      file_level_metadata_LabNetServer_2eproto[4]);
}

// ===================================================================

class InterfaceLost::_Internal {
 public:
};

InterfaceLost::InterfaceLost(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:LabNetProt.Server.InterfaceLost)
}
InterfaceLost::InterfaceLost(const InterfaceLost& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  interface_ = from.interface_;
  // @@protoc_insertion_point(copy_constructor:LabNetProt.Server.InterfaceLost)
}

void InterfaceLost::SharedCtor() {
interface_ = 0;
}

InterfaceLost::~InterfaceLost() {
  // @@protoc_insertion_point(destructor:LabNetProt.Server.InterfaceLost)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void InterfaceLost::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void InterfaceLost::ArenaDtor(void* object) {
  InterfaceLost* _this = reinterpret_cast< InterfaceLost* >(object);
  (void)_this;
}
void InterfaceLost::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InterfaceLost::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InterfaceLost::Clear() {
// @@protoc_insertion_point(message_clear_start:LabNetProt.Server.InterfaceLost)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  interface_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InterfaceLost::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .LabNetProt.Interfaces interface = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_interface(static_cast<::LabNetProt::Interfaces>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InterfaceLost::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LabNetProt.Server.InterfaceLost)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .LabNetProt.Interfaces interface = 1;
  if (this->_internal_interface() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_interface(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LabNetProt.Server.InterfaceLost)
  return target;
}

size_t InterfaceLost::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LabNetProt.Server.InterfaceLost)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .LabNetProt.Interfaces interface = 1;
  if (this->_internal_interface() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_interface());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InterfaceLost::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InterfaceLost::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InterfaceLost::GetClassData() const { return &_class_data_; }

void InterfaceLost::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InterfaceLost *>(to)->MergeFrom(
      static_cast<const InterfaceLost &>(from));
}


void InterfaceLost::MergeFrom(const InterfaceLost& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LabNetProt.Server.InterfaceLost)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_interface() != 0) {
    _internal_set_interface(from._internal_interface());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InterfaceLost::CopyFrom(const InterfaceLost& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LabNetProt.Server.InterfaceLost)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InterfaceLost::IsInitialized() const {
  return true;
}

void InterfaceLost::InternalSwap(InterfaceLost* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(interface_, other->interface_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InterfaceLost::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_LabNetServer_2eproto_getter, &descriptor_table_LabNetServer_2eproto_once,
      file_level_metadata_LabNetServer_2eproto[5]);
}

// ===================================================================

class InterfaceReconnected::_Internal {
 public:
};

InterfaceReconnected::InterfaceReconnected(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:LabNetProt.Server.InterfaceReconnected)
}
InterfaceReconnected::InterfaceReconnected(const InterfaceReconnected& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  interface_ = from.interface_;
  // @@protoc_insertion_point(copy_constructor:LabNetProt.Server.InterfaceReconnected)
}

void InterfaceReconnected::SharedCtor() {
interface_ = 0;
}

InterfaceReconnected::~InterfaceReconnected() {
  // @@protoc_insertion_point(destructor:LabNetProt.Server.InterfaceReconnected)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void InterfaceReconnected::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void InterfaceReconnected::ArenaDtor(void* object) {
  InterfaceReconnected* _this = reinterpret_cast< InterfaceReconnected* >(object);
  (void)_this;
}
void InterfaceReconnected::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InterfaceReconnected::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InterfaceReconnected::Clear() {
// @@protoc_insertion_point(message_clear_start:LabNetProt.Server.InterfaceReconnected)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  interface_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InterfaceReconnected::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .LabNetProt.Interfaces interface = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_interface(static_cast<::LabNetProt::Interfaces>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InterfaceReconnected::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LabNetProt.Server.InterfaceReconnected)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .LabNetProt.Interfaces interface = 1;
  if (this->_internal_interface() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_interface(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LabNetProt.Server.InterfaceReconnected)
  return target;
}

size_t InterfaceReconnected::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LabNetProt.Server.InterfaceReconnected)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .LabNetProt.Interfaces interface = 1;
  if (this->_internal_interface() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_interface());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InterfaceReconnected::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InterfaceReconnected::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InterfaceReconnected::GetClassData() const { return &_class_data_; }

void InterfaceReconnected::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InterfaceReconnected *>(to)->MergeFrom(
      static_cast<const InterfaceReconnected &>(from));
}


void InterfaceReconnected::MergeFrom(const InterfaceReconnected& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LabNetProt.Server.InterfaceReconnected)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_interface() != 0) {
    _internal_set_interface(from._internal_interface());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InterfaceReconnected::CopyFrom(const InterfaceReconnected& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LabNetProt.Server.InterfaceReconnected)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InterfaceReconnected::IsInitialized() const {
  return true;
}

void InterfaceReconnected::InternalSwap(InterfaceReconnected* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(interface_, other->interface_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InterfaceReconnected::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_LabNetServer_2eproto_getter, &descriptor_table_LabNetServer_2eproto_once,
      file_level_metadata_LabNetServer_2eproto[6]);
}

// ===================================================================

class DigitalInInitResult::_Internal {
 public:
};

DigitalInInitResult::DigitalInInitResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:LabNetProt.Server.DigitalInInitResult)
}
DigitalInInitResult::DigitalInInitResult(const DigitalInInitResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&interface_, &from.interface_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_succeed_) -
    reinterpret_cast<char*>(&interface_)) + sizeof(is_succeed_));
  // @@protoc_insertion_point(copy_constructor:LabNetProt.Server.DigitalInInitResult)
}

void DigitalInInitResult::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&interface_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_succeed_) -
    reinterpret_cast<char*>(&interface_)) + sizeof(is_succeed_));
}

DigitalInInitResult::~DigitalInInitResult() {
  // @@protoc_insertion_point(destructor:LabNetProt.Server.DigitalInInitResult)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DigitalInInitResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DigitalInInitResult::ArenaDtor(void* object) {
  DigitalInInitResult* _this = reinterpret_cast< DigitalInInitResult* >(object);
  (void)_this;
}
void DigitalInInitResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DigitalInInitResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DigitalInInitResult::Clear() {
// @@protoc_insertion_point(message_clear_start:LabNetProt.Server.DigitalInInitResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&interface_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_succeed_) -
      reinterpret_cast<char*>(&interface_)) + sizeof(is_succeed_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DigitalInInitResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .LabNetProt.Interfaces interface = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_interface(static_cast<::LabNetProt::Interfaces>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 pin = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          pin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_succeed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          is_succeed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DigitalInInitResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LabNetProt.Server.DigitalInInitResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .LabNetProt.Interfaces interface = 1;
  if (this->_internal_interface() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_interface(), target);
  }

  // uint32 pin = 2;
  if (this->_internal_pin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_pin(), target);
  }

  // bool is_succeed = 3;
  if (this->_internal_is_succeed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_succeed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LabNetProt.Server.DigitalInInitResult)
  return target;
}

size_t DigitalInInitResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LabNetProt.Server.DigitalInInitResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .LabNetProt.Interfaces interface = 1;
  if (this->_internal_interface() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_interface());
  }

  // uint32 pin = 2;
  if (this->_internal_pin() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_pin());
  }

  // bool is_succeed = 3;
  if (this->_internal_is_succeed() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DigitalInInitResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DigitalInInitResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DigitalInInitResult::GetClassData() const { return &_class_data_; }

void DigitalInInitResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DigitalInInitResult *>(to)->MergeFrom(
      static_cast<const DigitalInInitResult &>(from));
}


void DigitalInInitResult::MergeFrom(const DigitalInInitResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LabNetProt.Server.DigitalInInitResult)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_interface() != 0) {
    _internal_set_interface(from._internal_interface());
  }
  if (from._internal_pin() != 0) {
    _internal_set_pin(from._internal_pin());
  }
  if (from._internal_is_succeed() != 0) {
    _internal_set_is_succeed(from._internal_is_succeed());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DigitalInInitResult::CopyFrom(const DigitalInInitResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LabNetProt.Server.DigitalInInitResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DigitalInInitResult::IsInitialized() const {
  return true;
}

void DigitalInInitResult::InternalSwap(DigitalInInitResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DigitalInInitResult, is_succeed_)
      + sizeof(DigitalInInitResult::is_succeed_)
      - PROTOBUF_FIELD_OFFSET(DigitalInInitResult, interface_)>(
          reinterpret_cast<char*>(&interface_),
          reinterpret_cast<char*>(&other->interface_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DigitalInInitResult::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_LabNetServer_2eproto_getter, &descriptor_table_LabNetServer_2eproto_once,
      file_level_metadata_LabNetServer_2eproto[7]);
}

// ===================================================================

class DigitalOutInitResult::_Internal {
 public:
};

DigitalOutInitResult::DigitalOutInitResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:LabNetProt.Server.DigitalOutInitResult)
}
DigitalOutInitResult::DigitalOutInitResult(const DigitalOutInitResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&interface_, &from.interface_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_succeed_) -
    reinterpret_cast<char*>(&interface_)) + sizeof(is_succeed_));
  // @@protoc_insertion_point(copy_constructor:LabNetProt.Server.DigitalOutInitResult)
}

void DigitalOutInitResult::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&interface_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_succeed_) -
    reinterpret_cast<char*>(&interface_)) + sizeof(is_succeed_));
}

DigitalOutInitResult::~DigitalOutInitResult() {
  // @@protoc_insertion_point(destructor:LabNetProt.Server.DigitalOutInitResult)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DigitalOutInitResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DigitalOutInitResult::ArenaDtor(void* object) {
  DigitalOutInitResult* _this = reinterpret_cast< DigitalOutInitResult* >(object);
  (void)_this;
}
void DigitalOutInitResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DigitalOutInitResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DigitalOutInitResult::Clear() {
// @@protoc_insertion_point(message_clear_start:LabNetProt.Server.DigitalOutInitResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&interface_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_succeed_) -
      reinterpret_cast<char*>(&interface_)) + sizeof(is_succeed_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DigitalOutInitResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .LabNetProt.Interfaces interface = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_interface(static_cast<::LabNetProt::Interfaces>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 pin = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          pin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_succeed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          is_succeed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DigitalOutInitResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LabNetProt.Server.DigitalOutInitResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .LabNetProt.Interfaces interface = 1;
  if (this->_internal_interface() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_interface(), target);
  }

  // uint32 pin = 2;
  if (this->_internal_pin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_pin(), target);
  }

  // bool is_succeed = 3;
  if (this->_internal_is_succeed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_succeed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LabNetProt.Server.DigitalOutInitResult)
  return target;
}

size_t DigitalOutInitResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LabNetProt.Server.DigitalOutInitResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .LabNetProt.Interfaces interface = 1;
  if (this->_internal_interface() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_interface());
  }

  // uint32 pin = 2;
  if (this->_internal_pin() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_pin());
  }

  // bool is_succeed = 3;
  if (this->_internal_is_succeed() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DigitalOutInitResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DigitalOutInitResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DigitalOutInitResult::GetClassData() const { return &_class_data_; }

void DigitalOutInitResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DigitalOutInitResult *>(to)->MergeFrom(
      static_cast<const DigitalOutInitResult &>(from));
}


void DigitalOutInitResult::MergeFrom(const DigitalOutInitResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LabNetProt.Server.DigitalOutInitResult)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_interface() != 0) {
    _internal_set_interface(from._internal_interface());
  }
  if (from._internal_pin() != 0) {
    _internal_set_pin(from._internal_pin());
  }
  if (from._internal_is_succeed() != 0) {
    _internal_set_is_succeed(from._internal_is_succeed());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DigitalOutInitResult::CopyFrom(const DigitalOutInitResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LabNetProt.Server.DigitalOutInitResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DigitalOutInitResult::IsInitialized() const {
  return true;
}

void DigitalOutInitResult::InternalSwap(DigitalOutInitResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DigitalOutInitResult, is_succeed_)
      + sizeof(DigitalOutInitResult::is_succeed_)
      - PROTOBUF_FIELD_OFFSET(DigitalOutInitResult, interface_)>(
          reinterpret_cast<char*>(&interface_),
          reinterpret_cast<char*>(&other->interface_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DigitalOutInitResult::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_LabNetServer_2eproto_getter, &descriptor_table_LabNetServer_2eproto_once,
      file_level_metadata_LabNetServer_2eproto[8]);
}

// ===================================================================

class OnlyOneConnectionAllowed::_Internal {
 public:
};

OnlyOneConnectionAllowed::OnlyOneConnectionAllowed(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:LabNetProt.Server.OnlyOneConnectionAllowed)
}
OnlyOneConnectionAllowed::OnlyOneConnectionAllowed(const OnlyOneConnectionAllowed& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:LabNetProt.Server.OnlyOneConnectionAllowed)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OnlyOneConnectionAllowed::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OnlyOneConnectionAllowed::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata OnlyOneConnectionAllowed::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_LabNetServer_2eproto_getter, &descriptor_table_LabNetServer_2eproto_once,
      file_level_metadata_LabNetServer_2eproto[9]);
}

// ===================================================================

class LabNetResetReply::_Internal {
 public:
};

LabNetResetReply::LabNetResetReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:LabNetProt.Server.LabNetResetReply)
}
LabNetResetReply::LabNetResetReply(const LabNetResetReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  is_reset_ = from.is_reset_;
  // @@protoc_insertion_point(copy_constructor:LabNetProt.Server.LabNetResetReply)
}

void LabNetResetReply::SharedCtor() {
is_reset_ = false;
}

LabNetResetReply::~LabNetResetReply() {
  // @@protoc_insertion_point(destructor:LabNetProt.Server.LabNetResetReply)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LabNetResetReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LabNetResetReply::ArenaDtor(void* object) {
  LabNetResetReply* _this = reinterpret_cast< LabNetResetReply* >(object);
  (void)_this;
}
void LabNetResetReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LabNetResetReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LabNetResetReply::Clear() {
// @@protoc_insertion_point(message_clear_start:LabNetProt.Server.LabNetResetReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  is_reset_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LabNetResetReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool is_reset = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          is_reset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LabNetResetReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LabNetProt.Server.LabNetResetReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_reset = 1;
  if (this->_internal_is_reset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_reset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LabNetProt.Server.LabNetResetReply)
  return target;
}

size_t LabNetResetReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LabNetProt.Server.LabNetResetReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool is_reset = 1;
  if (this->_internal_is_reset() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LabNetResetReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LabNetResetReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LabNetResetReply::GetClassData() const { return &_class_data_; }

void LabNetResetReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LabNetResetReply *>(to)->MergeFrom(
      static_cast<const LabNetResetReply &>(from));
}


void LabNetResetReply::MergeFrom(const LabNetResetReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LabNetProt.Server.LabNetResetReply)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_is_reset() != 0) {
    _internal_set_is_reset(from._internal_is_reset());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LabNetResetReply::CopyFrom(const LabNetResetReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LabNetProt.Server.LabNetResetReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LabNetResetReply::IsInitialized() const {
  return true;
}

void LabNetResetReply::InternalSwap(LabNetResetReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(is_reset_, other->is_reset_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LabNetResetReply::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_LabNetServer_2eproto_getter, &descriptor_table_LabNetServer_2eproto_once,
      file_level_metadata_LabNetServer_2eproto[10]);
}

// ===================================================================

class LabNetIdReply::_Internal {
 public:
};

LabNetIdReply::LabNetIdReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:LabNetProt.Server.LabNetIdReply)
}
LabNetIdReply::LabNetIdReply(const LabNetIdReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&major_version_, &from.major_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&minor_version_) -
    reinterpret_cast<char*>(&major_version_)) + sizeof(minor_version_));
  // @@protoc_insertion_point(copy_constructor:LabNetProt.Server.LabNetIdReply)
}

void LabNetIdReply::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&major_version_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&minor_version_) -
    reinterpret_cast<char*>(&major_version_)) + sizeof(minor_version_));
}

LabNetIdReply::~LabNetIdReply() {
  // @@protoc_insertion_point(destructor:LabNetProt.Server.LabNetIdReply)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LabNetIdReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LabNetIdReply::ArenaDtor(void* object) {
  LabNetIdReply* _this = reinterpret_cast< LabNetIdReply* >(object);
  (void)_this;
}
void LabNetIdReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LabNetIdReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LabNetIdReply::Clear() {
// @@protoc_insertion_point(message_clear_start:LabNetProt.Server.LabNetIdReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  ::memset(&major_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&minor_version_) -
      reinterpret_cast<char*>(&major_version_)) + sizeof(minor_version_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LabNetIdReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "LabNetProt.Server.LabNetIdReply.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 major_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          major_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 minor_version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          minor_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LabNetIdReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LabNetProt.Server.LabNetIdReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "LabNetProt.Server.LabNetIdReply.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // uint32 major_version = 2;
  if (this->_internal_major_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_major_version(), target);
  }

  // uint32 minor_version = 3;
  if (this->_internal_minor_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_minor_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LabNetProt.Server.LabNetIdReply)
  return target;
}

size_t LabNetIdReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LabNetProt.Server.LabNetIdReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // uint32 major_version = 2;
  if (this->_internal_major_version() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_major_version());
  }

  // uint32 minor_version = 3;
  if (this->_internal_minor_version() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_minor_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LabNetIdReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LabNetIdReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LabNetIdReply::GetClassData() const { return &_class_data_; }

void LabNetIdReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LabNetIdReply *>(to)->MergeFrom(
      static_cast<const LabNetIdReply &>(from));
}


void LabNetIdReply::MergeFrom(const LabNetIdReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LabNetProt.Server.LabNetIdReply)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_major_version() != 0) {
    _internal_set_major_version(from._internal_major_version());
  }
  if (from._internal_minor_version() != 0) {
    _internal_set_minor_version(from._internal_minor_version());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LabNetIdReply::CopyFrom(const LabNetIdReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LabNetProt.Server.LabNetIdReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LabNetIdReply::IsInitialized() const {
  return true;
}

void LabNetIdReply::InternalSwap(LabNetIdReply* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LabNetIdReply, minor_version_)
      + sizeof(LabNetIdReply::minor_version_)
      - PROTOBUF_FIELD_OFFSET(LabNetIdReply, major_version_)>(
          reinterpret_cast<char*>(&major_version_),
          reinterpret_cast<char*>(&other->major_version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LabNetIdReply::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_LabNetServer_2eproto_getter, &descriptor_table_LabNetServer_2eproto_once,
      file_level_metadata_LabNetServer_2eproto[11]);
}

// ===================================================================

class DigitalOutLoopStartResult::_Internal {
 public:
};

DigitalOutLoopStartResult::DigitalOutLoopStartResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:LabNetProt.Server.DigitalOutLoopStartResult)
}
DigitalOutLoopStartResult::DigitalOutLoopStartResult(const DigitalOutLoopStartResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  loop_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_loop_name().empty()) {
    loop_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_loop_name(), 
      GetArenaForAllocation());
  }
  is_succeed_ = from.is_succeed_;
  // @@protoc_insertion_point(copy_constructor:LabNetProt.Server.DigitalOutLoopStartResult)
}

void DigitalOutLoopStartResult::SharedCtor() {
loop_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
is_succeed_ = false;
}

DigitalOutLoopStartResult::~DigitalOutLoopStartResult() {
  // @@protoc_insertion_point(destructor:LabNetProt.Server.DigitalOutLoopStartResult)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DigitalOutLoopStartResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  loop_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DigitalOutLoopStartResult::ArenaDtor(void* object) {
  DigitalOutLoopStartResult* _this = reinterpret_cast< DigitalOutLoopStartResult* >(object);
  (void)_this;
}
void DigitalOutLoopStartResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DigitalOutLoopStartResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DigitalOutLoopStartResult::Clear() {
// @@protoc_insertion_point(message_clear_start:LabNetProt.Server.DigitalOutLoopStartResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  loop_name_.ClearToEmpty();
  is_succeed_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DigitalOutLoopStartResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string loop_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_loop_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "LabNetProt.Server.DigitalOutLoopStartResult.loop_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_succeed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          is_succeed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DigitalOutLoopStartResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LabNetProt.Server.DigitalOutLoopStartResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string loop_name = 1;
  if (!this->_internal_loop_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_loop_name().data(), static_cast<int>(this->_internal_loop_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "LabNetProt.Server.DigitalOutLoopStartResult.loop_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_loop_name(), target);
  }

  // bool is_succeed = 2;
  if (this->_internal_is_succeed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_succeed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LabNetProt.Server.DigitalOutLoopStartResult)
  return target;
}

size_t DigitalOutLoopStartResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LabNetProt.Server.DigitalOutLoopStartResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string loop_name = 1;
  if (!this->_internal_loop_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_loop_name());
  }

  // bool is_succeed = 2;
  if (this->_internal_is_succeed() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DigitalOutLoopStartResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DigitalOutLoopStartResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DigitalOutLoopStartResult::GetClassData() const { return &_class_data_; }

void DigitalOutLoopStartResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DigitalOutLoopStartResult *>(to)->MergeFrom(
      static_cast<const DigitalOutLoopStartResult &>(from));
}


void DigitalOutLoopStartResult::MergeFrom(const DigitalOutLoopStartResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LabNetProt.Server.DigitalOutLoopStartResult)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_loop_name().empty()) {
    _internal_set_loop_name(from._internal_loop_name());
  }
  if (from._internal_is_succeed() != 0) {
    _internal_set_is_succeed(from._internal_is_succeed());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DigitalOutLoopStartResult::CopyFrom(const DigitalOutLoopStartResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LabNetProt.Server.DigitalOutLoopStartResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DigitalOutLoopStartResult::IsInitialized() const {
  return true;
}

void DigitalOutLoopStartResult::InternalSwap(DigitalOutLoopStartResult* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &loop_name_, lhs_arena,
      &other->loop_name_, rhs_arena
  );
  swap(is_succeed_, other->is_succeed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DigitalOutLoopStartResult::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_LabNetServer_2eproto_getter, &descriptor_table_LabNetServer_2eproto_once,
      file_level_metadata_LabNetServer_2eproto[12]);
}

// ===================================================================

class DigitalOutLoopStopped::_Internal {
 public:
};

DigitalOutLoopStopped::DigitalOutLoopStopped(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:LabNetProt.Server.DigitalOutLoopStopped)
}
DigitalOutLoopStopped::DigitalOutLoopStopped(const DigitalOutLoopStopped& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  loop_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_loop_name().empty()) {
    loop_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_loop_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:LabNetProt.Server.DigitalOutLoopStopped)
}

void DigitalOutLoopStopped::SharedCtor() {
loop_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DigitalOutLoopStopped::~DigitalOutLoopStopped() {
  // @@protoc_insertion_point(destructor:LabNetProt.Server.DigitalOutLoopStopped)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DigitalOutLoopStopped::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  loop_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DigitalOutLoopStopped::ArenaDtor(void* object) {
  DigitalOutLoopStopped* _this = reinterpret_cast< DigitalOutLoopStopped* >(object);
  (void)_this;
}
void DigitalOutLoopStopped::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DigitalOutLoopStopped::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DigitalOutLoopStopped::Clear() {
// @@protoc_insertion_point(message_clear_start:LabNetProt.Server.DigitalOutLoopStopped)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  loop_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DigitalOutLoopStopped::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string loop_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_loop_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "LabNetProt.Server.DigitalOutLoopStopped.loop_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DigitalOutLoopStopped::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LabNetProt.Server.DigitalOutLoopStopped)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string loop_name = 1;
  if (!this->_internal_loop_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_loop_name().data(), static_cast<int>(this->_internal_loop_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "LabNetProt.Server.DigitalOutLoopStopped.loop_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_loop_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LabNetProt.Server.DigitalOutLoopStopped)
  return target;
}

size_t DigitalOutLoopStopped::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LabNetProt.Server.DigitalOutLoopStopped)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string loop_name = 1;
  if (!this->_internal_loop_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_loop_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DigitalOutLoopStopped::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DigitalOutLoopStopped::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DigitalOutLoopStopped::GetClassData() const { return &_class_data_; }

void DigitalOutLoopStopped::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DigitalOutLoopStopped *>(to)->MergeFrom(
      static_cast<const DigitalOutLoopStopped &>(from));
}


void DigitalOutLoopStopped::MergeFrom(const DigitalOutLoopStopped& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LabNetProt.Server.DigitalOutLoopStopped)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_loop_name().empty()) {
    _internal_set_loop_name(from._internal_loop_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DigitalOutLoopStopped::CopyFrom(const DigitalOutLoopStopped& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LabNetProt.Server.DigitalOutLoopStopped)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DigitalOutLoopStopped::IsInitialized() const {
  return true;
}

void DigitalOutLoopStopped::InternalSwap(DigitalOutLoopStopped* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &loop_name_, lhs_arena,
      &other->loop_name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DigitalOutLoopStopped::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_LabNetServer_2eproto_getter, &descriptor_table_LabNetServer_2eproto_once,
      file_level_metadata_LabNetServer_2eproto[13]);
}

// ===================================================================

class ChiBioPumpMoveResult::_Internal {
 public:
};

ChiBioPumpMoveResult::ChiBioPumpMoveResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:LabNetProt.Server.ChiBioPumpMoveResult)
}
ChiBioPumpMoveResult::ChiBioPumpMoveResult(const ChiBioPumpMoveResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&pump_id_, &from.pump_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&pump_id_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:LabNetProt.Server.ChiBioPumpMoveResult)
}

void ChiBioPumpMoveResult::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pump_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&pump_id_)) + sizeof(result_));
}

ChiBioPumpMoveResult::~ChiBioPumpMoveResult() {
  // @@protoc_insertion_point(destructor:LabNetProt.Server.ChiBioPumpMoveResult)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ChiBioPumpMoveResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ChiBioPumpMoveResult::ArenaDtor(void* object) {
  ChiBioPumpMoveResult* _this = reinterpret_cast< ChiBioPumpMoveResult* >(object);
  (void)_this;
}
void ChiBioPumpMoveResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChiBioPumpMoveResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChiBioPumpMoveResult::Clear() {
// @@protoc_insertion_point(message_clear_start:LabNetProt.Server.ChiBioPumpMoveResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&pump_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&pump_id_)) + sizeof(result_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChiBioPumpMoveResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 pump_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          pump_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .LabNetProt.Server.ChiBioPumpMoveResult.MoveResult result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::LabNetProt::Server::ChiBioPumpMoveResult_MoveResult>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChiBioPumpMoveResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LabNetProt.Server.ChiBioPumpMoveResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pump_id = 1;
  if (this->_internal_pump_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pump_id(), target);
  }

  // .LabNetProt.Server.ChiBioPumpMoveResult.MoveResult result = 2;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LabNetProt.Server.ChiBioPumpMoveResult)
  return target;
}

size_t ChiBioPumpMoveResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LabNetProt.Server.ChiBioPumpMoveResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 pump_id = 1;
  if (this->_internal_pump_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_pump_id());
  }

  // .LabNetProt.Server.ChiBioPumpMoveResult.MoveResult result = 2;
  if (this->_internal_result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChiBioPumpMoveResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ChiBioPumpMoveResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChiBioPumpMoveResult::GetClassData() const { return &_class_data_; }

void ChiBioPumpMoveResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ChiBioPumpMoveResult *>(to)->MergeFrom(
      static_cast<const ChiBioPumpMoveResult &>(from));
}


void ChiBioPumpMoveResult::MergeFrom(const ChiBioPumpMoveResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LabNetProt.Server.ChiBioPumpMoveResult)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_pump_id() != 0) {
    _internal_set_pump_id(from._internal_pump_id());
  }
  if (from._internal_result() != 0) {
    _internal_set_result(from._internal_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChiBioPumpMoveResult::CopyFrom(const ChiBioPumpMoveResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LabNetProt.Server.ChiBioPumpMoveResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChiBioPumpMoveResult::IsInitialized() const {
  return true;
}

void ChiBioPumpMoveResult::InternalSwap(ChiBioPumpMoveResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChiBioPumpMoveResult, result_)
      + sizeof(ChiBioPumpMoveResult::result_)
      - PROTOBUF_FIELD_OFFSET(ChiBioPumpMoveResult, pump_id_)>(
          reinterpret_cast<char*>(&pump_id_),
          reinterpret_cast<char*>(&other->pump_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChiBioPumpMoveResult::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_LabNetServer_2eproto_getter, &descriptor_table_LabNetServer_2eproto_once,
      file_level_metadata_LabNetServer_2eproto[14]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Server
}  // namespace LabNetProt
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::LabNetProt::Server::DigitalOutState* Arena::CreateMaybeMessage< ::LabNetProt::Server::DigitalOutState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LabNetProt::Server::DigitalOutState >(arena);
}
template<> PROTOBUF_NOINLINE ::LabNetProt::Server::DigitalInState* Arena::CreateMaybeMessage< ::LabNetProt::Server::DigitalInState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LabNetProt::Server::DigitalInState >(arena);
}
template<> PROTOBUF_NOINLINE ::LabNetProt::Server::NewByteData* Arena::CreateMaybeMessage< ::LabNetProt::Server::NewByteData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LabNetProt::Server::NewByteData >(arena);
}
template<> PROTOBUF_NOINLINE ::LabNetProt::Server::DataWriteComplete* Arena::CreateMaybeMessage< ::LabNetProt::Server::DataWriteComplete >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LabNetProt::Server::DataWriteComplete >(arena);
}
template<> PROTOBUF_NOINLINE ::LabNetProt::Server::InterfaceInitResult* Arena::CreateMaybeMessage< ::LabNetProt::Server::InterfaceInitResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LabNetProt::Server::InterfaceInitResult >(arena);
}
template<> PROTOBUF_NOINLINE ::LabNetProt::Server::InterfaceLost* Arena::CreateMaybeMessage< ::LabNetProt::Server::InterfaceLost >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LabNetProt::Server::InterfaceLost >(arena);
}
template<> PROTOBUF_NOINLINE ::LabNetProt::Server::InterfaceReconnected* Arena::CreateMaybeMessage< ::LabNetProt::Server::InterfaceReconnected >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LabNetProt::Server::InterfaceReconnected >(arena);
}
template<> PROTOBUF_NOINLINE ::LabNetProt::Server::DigitalInInitResult* Arena::CreateMaybeMessage< ::LabNetProt::Server::DigitalInInitResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LabNetProt::Server::DigitalInInitResult >(arena);
}
template<> PROTOBUF_NOINLINE ::LabNetProt::Server::DigitalOutInitResult* Arena::CreateMaybeMessage< ::LabNetProt::Server::DigitalOutInitResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LabNetProt::Server::DigitalOutInitResult >(arena);
}
template<> PROTOBUF_NOINLINE ::LabNetProt::Server::OnlyOneConnectionAllowed* Arena::CreateMaybeMessage< ::LabNetProt::Server::OnlyOneConnectionAllowed >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LabNetProt::Server::OnlyOneConnectionAllowed >(arena);
}
template<> PROTOBUF_NOINLINE ::LabNetProt::Server::LabNetResetReply* Arena::CreateMaybeMessage< ::LabNetProt::Server::LabNetResetReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LabNetProt::Server::LabNetResetReply >(arena);
}
template<> PROTOBUF_NOINLINE ::LabNetProt::Server::LabNetIdReply* Arena::CreateMaybeMessage< ::LabNetProt::Server::LabNetIdReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LabNetProt::Server::LabNetIdReply >(arena);
}
template<> PROTOBUF_NOINLINE ::LabNetProt::Server::DigitalOutLoopStartResult* Arena::CreateMaybeMessage< ::LabNetProt::Server::DigitalOutLoopStartResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LabNetProt::Server::DigitalOutLoopStartResult >(arena);
}
template<> PROTOBUF_NOINLINE ::LabNetProt::Server::DigitalOutLoopStopped* Arena::CreateMaybeMessage< ::LabNetProt::Server::DigitalOutLoopStopped >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LabNetProt::Server::DigitalOutLoopStopped >(arena);
}
template<> PROTOBUF_NOINLINE ::LabNetProt::Server::ChiBioPumpMoveResult* Arena::CreateMaybeMessage< ::LabNetProt::Server::ChiBioPumpMoveResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LabNetProt::Server::ChiBioPumpMoveResult >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
