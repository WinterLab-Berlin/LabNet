// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LabNet.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_LabNet_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_LabNet_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_LabNet_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_LabNet_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_LabNet_2eproto;
namespace LabNetProt {
class PinId;
class PinIdDefaultTypeInternal;
extern PinIdDefaultTypeInternal _PinId_default_instance_;
}  // namespace LabNetProt
PROTOBUF_NAMESPACE_OPEN
template<> ::LabNetProt::PinId* Arena::CreateMaybeMessage<::LabNetProt::PinId>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace LabNetProt {

enum Interfaces : int {
  INTERFACE_NONE = 0,
  INTERFACE_IO_BOARD = 1,
  INTERFACE_RFID_BOARD = 2,
  INTERFACE_GPIO_WIRINGPI = 3,
  INTERFACE_SOUND = 4,
  INTERFACE_UART0 = 100,
  INTERFACE_UART1 = 101,
  INTERFACE_UART2 = 102,
  INTERFACE_UART3 = 103,
  INTERFACE_UART4 = 104,
  Interfaces_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Interfaces_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Interfaces_IsValid(int value);
constexpr Interfaces Interfaces_MIN = INTERFACE_NONE;
constexpr Interfaces Interfaces_MAX = INTERFACE_UART4;
constexpr int Interfaces_ARRAYSIZE = Interfaces_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Interfaces_descriptor();
template<typename T>
inline const std::string& Interfaces_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Interfaces>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Interfaces_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Interfaces_descriptor(), enum_t_value);
}
inline bool Interfaces_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Interfaces* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Interfaces>(
    Interfaces_descriptor(), name, value);
}
enum Uarts : int {
  UART_NONE = 0,
  UART_PORT0 = 100,
  UART_PORT1 = 101,
  UART_PORT2 = 102,
  UART_PORT3 = 103,
  UART_PORT4 = 104,
  Uarts_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Uarts_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Uarts_IsValid(int value);
constexpr Uarts Uarts_MIN = UART_NONE;
constexpr Uarts Uarts_MAX = UART_PORT4;
constexpr int Uarts_ARRAYSIZE = Uarts_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Uarts_descriptor();
template<typename T>
inline const std::string& Uarts_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Uarts>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Uarts_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Uarts_descriptor(), enum_t_value);
}
inline bool Uarts_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Uarts* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Uarts>(
    Uarts_descriptor(), name, value);
}
// ===================================================================

class PinId PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LabNetProt.PinId) */ {
 public:
  inline PinId() : PinId(nullptr) {}
  virtual ~PinId();

  PinId(const PinId& from);
  PinId(PinId&& from) noexcept
    : PinId() {
    *this = ::std::move(from);
  }

  inline PinId& operator=(const PinId& from) {
    CopyFrom(from);
    return *this;
  }
  inline PinId& operator=(PinId&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PinId& default_instance();

  static inline const PinId* internal_default_instance() {
    return reinterpret_cast<const PinId*>(
               &_PinId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PinId& a, PinId& b) {
    a.Swap(&b);
  }
  inline void Swap(PinId* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PinId* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PinId* New() const final {
    return CreateMaybeMessage<PinId>(nullptr);
  }

  PinId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PinId>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PinId& from);
  void MergeFrom(const PinId& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PinId* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LabNetProt.PinId";
  }
  protected:
  explicit PinId(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LabNet_2eproto);
    return ::descriptor_table_LabNet_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInterfaceFieldNumber = 1,
    kPinFieldNumber = 2,
  };
  // .LabNetProt.Interfaces interface = 1;
  void clear_interface();
  ::LabNetProt::Interfaces interface() const;
  void set_interface(::LabNetProt::Interfaces value);
  private:
  ::LabNetProt::Interfaces _internal_interface() const;
  void _internal_set_interface(::LabNetProt::Interfaces value);
  public:

  // uint32 pin = 2;
  void clear_pin();
  ::PROTOBUF_NAMESPACE_ID::uint32 pin() const;
  void set_pin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pin() const;
  void _internal_set_pin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:LabNetProt.PinId)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int interface_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pin_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LabNet_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PinId

// .LabNetProt.Interfaces interface = 1;
inline void PinId::clear_interface() {
  interface_ = 0;
}
inline ::LabNetProt::Interfaces PinId::_internal_interface() const {
  return static_cast< ::LabNetProt::Interfaces >(interface_);
}
inline ::LabNetProt::Interfaces PinId::interface() const {
  // @@protoc_insertion_point(field_get:LabNetProt.PinId.interface)
  return _internal_interface();
}
inline void PinId::_internal_set_interface(::LabNetProt::Interfaces value) {
  
  interface_ = value;
}
inline void PinId::set_interface(::LabNetProt::Interfaces value) {
  _internal_set_interface(value);
  // @@protoc_insertion_point(field_set:LabNetProt.PinId.interface)
}

// uint32 pin = 2;
inline void PinId::clear_pin() {
  pin_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PinId::_internal_pin() const {
  return pin_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PinId::pin() const {
  // @@protoc_insertion_point(field_get:LabNetProt.PinId.pin)
  return _internal_pin();
}
inline void PinId::_internal_set_pin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  pin_ = value;
}
inline void PinId::set_pin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pin(value);
  // @@protoc_insertion_point(field_set:LabNetProt.PinId.pin)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace LabNetProt

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::LabNetProt::Interfaces> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::LabNetProt::Interfaces>() {
  return ::LabNetProt::Interfaces_descriptor();
}
template <> struct is_proto_enum< ::LabNetProt::Uarts> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::LabNetProt::Uarts>() {
  return ::LabNetProt::Uarts_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_LabNet_2eproto
