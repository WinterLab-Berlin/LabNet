// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LabNetClient.proto

#include "LabNetClient.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace LabNetProt {
namespace Client {
constexpr IoBoardInit::IoBoardInit(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct IoBoardInitDefaultTypeInternal {
  constexpr IoBoardInitDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IoBoardInitDefaultTypeInternal() {}
  union {
    IoBoardInit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IoBoardInitDefaultTypeInternal _IoBoardInit_default_instance_;
constexpr IoBoardInitDigitalIn::IoBoardInitDigitalIn(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pin_(0u)
  , resistor_state_(0)

  , is_inverted_(false){}
struct IoBoardInitDigitalInDefaultTypeInternal {
  constexpr IoBoardInitDigitalInDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IoBoardInitDigitalInDefaultTypeInternal() {}
  union {
    IoBoardInitDigitalIn _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IoBoardInitDigitalInDefaultTypeInternal _IoBoardInitDigitalIn_default_instance_;
constexpr IoBoardInitDigitalOut::IoBoardInitDigitalOut(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pin_(0u)
  , is_inverted_(false){}
struct IoBoardInitDigitalOutDefaultTypeInternal {
  constexpr IoBoardInitDigitalOutDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IoBoardInitDigitalOutDefaultTypeInternal() {}
  union {
    IoBoardInitDigitalOut _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IoBoardInitDigitalOutDefaultTypeInternal _IoBoardInitDigitalOut_default_instance_;
constexpr RfidBoardInit::RfidBoardInit(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : antenna_phase1_(0u)
  , antenna_phase2_(0u)
  , phase_duration_(0u)
  , inverted_(false){}
struct RfidBoardInitDefaultTypeInternal {
  constexpr RfidBoardInitDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RfidBoardInitDefaultTypeInternal() {}
  union {
    RfidBoardInit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RfidBoardInitDefaultTypeInternal _RfidBoardInit_default_instance_;
constexpr RfidBoardSetPhaseMatrix::RfidBoardSetPhaseMatrix(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : antenna_phase1_(0u)
  , antenna_phase2_(0u)
  , phase_duration_(0u){}
struct RfidBoardSetPhaseMatrixDefaultTypeInternal {
  constexpr RfidBoardSetPhaseMatrixDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RfidBoardSetPhaseMatrixDefaultTypeInternal() {}
  union {
    RfidBoardSetPhaseMatrix _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RfidBoardSetPhaseMatrixDefaultTypeInternal _RfidBoardSetPhaseMatrix_default_instance_;
constexpr UartInit::UartInit(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : port_(0)

  , baud_(0u){}
struct UartInitDefaultTypeInternal {
  constexpr UartInitDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UartInitDefaultTypeInternal() {}
  union {
    UartInit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UartInitDefaultTypeInternal _UartInit_default_instance_;
constexpr UartWriteData::UartWriteData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , port_(0)
{}
struct UartWriteDataDefaultTypeInternal {
  constexpr UartWriteDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UartWriteDataDefaultTypeInternal() {}
  union {
    UartWriteData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UartWriteDataDefaultTypeInternal _UartWriteData_default_instance_;
constexpr UartInitDigitalIn::UartInitDigitalIn(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : port_(0)

  , pin_(0u)
  , is_inverted_(false){}
struct UartInitDigitalInDefaultTypeInternal {
  constexpr UartInitDigitalInDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UartInitDigitalInDefaultTypeInternal() {}
  union {
    UartInitDigitalIn _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UartInitDigitalInDefaultTypeInternal _UartInitDigitalIn_default_instance_;
constexpr UartInitDigitalOut::UartInitDigitalOut(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : port_(0)

  , pin_(0u)
  , is_inverted_(false){}
struct UartInitDigitalOutDefaultTypeInternal {
  constexpr UartInitDigitalOutDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UartInitDigitalOutDefaultTypeInternal() {}
  union {
    UartInitDigitalOut _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UartInitDigitalOutDefaultTypeInternal _UartInitDigitalOut_default_instance_;
constexpr GpioWiringPiInit::GpioWiringPiInit(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct GpioWiringPiInitDefaultTypeInternal {
  constexpr GpioWiringPiInitDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GpioWiringPiInitDefaultTypeInternal() {}
  union {
    GpioWiringPiInit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GpioWiringPiInitDefaultTypeInternal _GpioWiringPiInit_default_instance_;
constexpr GpioWiringPiInitDigitalIn::GpioWiringPiInitDigitalIn(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pin_(0u)
  , resistor_state_(0)

  , is_inverted_(false){}
struct GpioWiringPiInitDigitalInDefaultTypeInternal {
  constexpr GpioWiringPiInitDigitalInDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GpioWiringPiInitDigitalInDefaultTypeInternal() {}
  union {
    GpioWiringPiInitDigitalIn _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GpioWiringPiInitDigitalInDefaultTypeInternal _GpioWiringPiInitDigitalIn_default_instance_;
constexpr GpioWiringPiInitDigitalOut::GpioWiringPiInitDigitalOut(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pin_(0u)
  , is_inverted_(false){}
struct GpioWiringPiInitDigitalOutDefaultTypeInternal {
  constexpr GpioWiringPiInitDigitalOutDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GpioWiringPiInitDigitalOutDefaultTypeInternal() {}
  union {
    GpioWiringPiInitDigitalOut _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GpioWiringPiInitDigitalOutDefaultTypeInternal _GpioWiringPiInitDigitalOut_default_instance_;
constexpr DigitalOutSet::DigitalOutSet(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(nullptr)
  , state_(false){}
struct DigitalOutSetDefaultTypeInternal {
  constexpr DigitalOutSetDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DigitalOutSetDefaultTypeInternal() {}
  union {
    DigitalOutSet _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DigitalOutSetDefaultTypeInternal _DigitalOutSet_default_instance_;
constexpr DigitalOutPulse::DigitalOutPulse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(nullptr)
  , high_duration_(0u)
  , low_duration_(0u)
  , pulses_(0u){}
struct DigitalOutPulseDefaultTypeInternal {
  constexpr DigitalOutPulseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DigitalOutPulseDefaultTypeInternal() {}
  union {
    DigitalOutPulse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DigitalOutPulseDefaultTypeInternal _DigitalOutPulse_default_instance_;
constexpr StartDigitalOutLoop_DigitalOutputParameter::StartDigitalOutLoop_DigitalOutputParameter(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(nullptr)
  , offset_(0u)
  , duration_(0u){}
struct StartDigitalOutLoop_DigitalOutputParameterDefaultTypeInternal {
  constexpr StartDigitalOutLoop_DigitalOutputParameterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StartDigitalOutLoop_DigitalOutputParameterDefaultTypeInternal() {}
  union {
    StartDigitalOutLoop_DigitalOutputParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StartDigitalOutLoop_DigitalOutputParameterDefaultTypeInternal _StartDigitalOutLoop_DigitalOutputParameter_default_instance_;
constexpr StartDigitalOutLoop::StartDigitalOutLoop(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : digital_outputs_()
  , loop_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , loop_pause_(0u){}
struct StartDigitalOutLoopDefaultTypeInternal {
  constexpr StartDigitalOutLoopDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StartDigitalOutLoopDefaultTypeInternal() {}
  union {
    StartDigitalOutLoop _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StartDigitalOutLoopDefaultTypeInternal _StartDigitalOutLoop_default_instance_;
constexpr StopDigitalOutLoop::StopDigitalOutLoop(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : loop_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct StopDigitalOutLoopDefaultTypeInternal {
  constexpr StopDigitalOutLoopDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StopDigitalOutLoopDefaultTypeInternal() {}
  union {
    StopDigitalOutLoop _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StopDigitalOutLoopDefaultTypeInternal _StopDigitalOutLoop_default_instance_;
constexpr LabNetResetRequest::LabNetResetRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct LabNetResetRequestDefaultTypeInternal {
  constexpr LabNetResetRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LabNetResetRequestDefaultTypeInternal() {}
  union {
    LabNetResetRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LabNetResetRequestDefaultTypeInternal _LabNetResetRequest_default_instance_;
constexpr LabNetIdRequest::LabNetIdRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct LabNetIdRequestDefaultTypeInternal {
  constexpr LabNetIdRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LabNetIdRequestDefaultTypeInternal() {}
  union {
    LabNetIdRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LabNetIdRequestDefaultTypeInternal _LabNetIdRequest_default_instance_;
constexpr InitSound::InitSound(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct InitSoundDefaultTypeInternal {
  constexpr InitSoundDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InitSoundDefaultTypeInternal() {}
  union {
    InitSound _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InitSoundDefaultTypeInternal _InitSound_default_instance_;
constexpr InitSoundSignal::InitSoundSignal(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : signal_type_(0)

  , id_(0u)
  , frequency_(0u)
  , frequency_end_(0u)
  , sweep_length_seconds_(0)
  , volume_(0){}
struct InitSoundSignalDefaultTypeInternal {
  constexpr InitSoundSignalDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InitSoundSignalDefaultTypeInternal() {}
  union {
    InitSoundSignal _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InitSoundSignalDefaultTypeInternal _InitSoundSignal_default_instance_;
constexpr ChiBioInit::ChiBioInit(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ChiBioInitDefaultTypeInternal {
  constexpr ChiBioInitDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChiBioInitDefaultTypeInternal() {}
  union {
    ChiBioInit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChiBioInitDefaultTypeInternal _ChiBioInit_default_instance_;
constexpr MoveChiBioPump::MoveChiBioPump(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pump_id_(0u)
  , move_(0){}
struct MoveChiBioPumpDefaultTypeInternal {
  constexpr MoveChiBioPumpDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MoveChiBioPumpDefaultTypeInternal() {}
  union {
    MoveChiBioPump _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MoveChiBioPumpDefaultTypeInternal _MoveChiBioPump_default_instance_;
}  // namespace Client
}  // namespace LabNetProt
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_LabNetClient_2eproto[23];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_LabNetClient_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_LabNetClient_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_LabNetClient_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::IoBoardInit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::IoBoardInitDigitalIn, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::IoBoardInitDigitalIn, pin_),
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::IoBoardInitDigitalIn, resistor_state_),
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::IoBoardInitDigitalIn, is_inverted_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::IoBoardInitDigitalOut, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::IoBoardInitDigitalOut, pin_),
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::IoBoardInitDigitalOut, is_inverted_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::RfidBoardInit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::RfidBoardInit, antenna_phase1_),
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::RfidBoardInit, antenna_phase2_),
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::RfidBoardInit, phase_duration_),
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::RfidBoardInit, inverted_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::RfidBoardSetPhaseMatrix, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::RfidBoardSetPhaseMatrix, antenna_phase1_),
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::RfidBoardSetPhaseMatrix, antenna_phase2_),
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::RfidBoardSetPhaseMatrix, phase_duration_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::UartInit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::UartInit, port_),
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::UartInit, baud_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::UartWriteData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::UartWriteData, port_),
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::UartWriteData, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::UartInitDigitalIn, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::UartInitDigitalIn, port_),
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::UartInitDigitalIn, pin_),
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::UartInitDigitalIn, is_inverted_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::UartInitDigitalOut, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::UartInitDigitalOut, port_),
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::UartInitDigitalOut, pin_),
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::UartInitDigitalOut, is_inverted_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::GpioWiringPiInit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::GpioWiringPiInitDigitalIn, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::GpioWiringPiInitDigitalIn, pin_),
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::GpioWiringPiInitDigitalIn, resistor_state_),
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::GpioWiringPiInitDigitalIn, is_inverted_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::GpioWiringPiInitDigitalOut, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::GpioWiringPiInitDigitalOut, pin_),
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::GpioWiringPiInitDigitalOut, is_inverted_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::DigitalOutSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::DigitalOutSet, id_),
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::DigitalOutSet, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::DigitalOutPulse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::DigitalOutPulse, id_),
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::DigitalOutPulse, high_duration_),
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::DigitalOutPulse, low_duration_),
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::DigitalOutPulse, pulses_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::StartDigitalOutLoop_DigitalOutputParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::StartDigitalOutLoop_DigitalOutputParameter, id_),
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::StartDigitalOutLoop_DigitalOutputParameter, offset_),
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::StartDigitalOutLoop_DigitalOutputParameter, duration_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::StartDigitalOutLoop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::StartDigitalOutLoop, loop_name_),
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::StartDigitalOutLoop, loop_pause_),
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::StartDigitalOutLoop, digital_outputs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::StopDigitalOutLoop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::StopDigitalOutLoop, loop_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::LabNetResetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::LabNetIdRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::InitSound, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::InitSoundSignal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::InitSoundSignal, signal_type_),
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::InitSoundSignal, id_),
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::InitSoundSignal, frequency_),
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::InitSoundSignal, frequency_end_),
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::InitSoundSignal, sweep_length_seconds_),
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::InitSoundSignal, volume_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::ChiBioInit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::MoveChiBioPump, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::MoveChiBioPump, pump_id_),
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::MoveChiBioPump, move_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::LabNetProt::Client::IoBoardInit)},
  { 6, -1, -1, sizeof(::LabNetProt::Client::IoBoardInitDigitalIn)},
  { 15, -1, -1, sizeof(::LabNetProt::Client::IoBoardInitDigitalOut)},
  { 23, -1, -1, sizeof(::LabNetProt::Client::RfidBoardInit)},
  { 33, -1, -1, sizeof(::LabNetProt::Client::RfidBoardSetPhaseMatrix)},
  { 42, -1, -1, sizeof(::LabNetProt::Client::UartInit)},
  { 50, -1, -1, sizeof(::LabNetProt::Client::UartWriteData)},
  { 58, -1, -1, sizeof(::LabNetProt::Client::UartInitDigitalIn)},
  { 67, -1, -1, sizeof(::LabNetProt::Client::UartInitDigitalOut)},
  { 76, -1, -1, sizeof(::LabNetProt::Client::GpioWiringPiInit)},
  { 82, -1, -1, sizeof(::LabNetProt::Client::GpioWiringPiInitDigitalIn)},
  { 91, -1, -1, sizeof(::LabNetProt::Client::GpioWiringPiInitDigitalOut)},
  { 99, -1, -1, sizeof(::LabNetProt::Client::DigitalOutSet)},
  { 107, -1, -1, sizeof(::LabNetProt::Client::DigitalOutPulse)},
  { 117, -1, -1, sizeof(::LabNetProt::Client::StartDigitalOutLoop_DigitalOutputParameter)},
  { 126, -1, -1, sizeof(::LabNetProt::Client::StartDigitalOutLoop)},
  { 135, -1, -1, sizeof(::LabNetProt::Client::StopDigitalOutLoop)},
  { 142, -1, -1, sizeof(::LabNetProt::Client::LabNetResetRequest)},
  { 148, -1, -1, sizeof(::LabNetProt::Client::LabNetIdRequest)},
  { 154, -1, -1, sizeof(::LabNetProt::Client::InitSound)},
  { 160, -1, -1, sizeof(::LabNetProt::Client::InitSoundSignal)},
  { 172, -1, -1, sizeof(::LabNetProt::Client::ChiBioInit)},
  { 178, -1, -1, sizeof(::LabNetProt::Client::MoveChiBioPump)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LabNetProt::Client::_IoBoardInit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LabNetProt::Client::_IoBoardInitDigitalIn_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LabNetProt::Client::_IoBoardInitDigitalOut_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LabNetProt::Client::_RfidBoardInit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LabNetProt::Client::_RfidBoardSetPhaseMatrix_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LabNetProt::Client::_UartInit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LabNetProt::Client::_UartWriteData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LabNetProt::Client::_UartInitDigitalIn_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LabNetProt::Client::_UartInitDigitalOut_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LabNetProt::Client::_GpioWiringPiInit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LabNetProt::Client::_GpioWiringPiInitDigitalIn_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LabNetProt::Client::_GpioWiringPiInitDigitalOut_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LabNetProt::Client::_DigitalOutSet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LabNetProt::Client::_DigitalOutPulse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LabNetProt::Client::_StartDigitalOutLoop_DigitalOutputParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LabNetProt::Client::_StartDigitalOutLoop_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LabNetProt::Client::_StopDigitalOutLoop_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LabNetProt::Client::_LabNetResetRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LabNetProt::Client::_LabNetIdRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LabNetProt::Client::_InitSound_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LabNetProt::Client::_InitSoundSignal_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LabNetProt::Client::_ChiBioInit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LabNetProt::Client::_MoveChiBioPump_default_instance_),
};

const char descriptor_table_protodef_LabNetClient_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022LabNetClient.proto\022\021LabNetProt.Client\032"
  "\014LabNet.proto\"\r\n\013IoBoardInit\"\263\001\n\024IoBoard"
  "InitDigitalIn\022\013\n\003pin\030\001 \001(\r\022H\n\016resistor_s"
  "tate\030\002 \001(\01620.LabNetProt.Client.IoBoardIn"
  "itDigitalIn.Resistor\022\023\n\013is_inverted\030\003 \001("
  "\010\"/\n\010Resistor\022\007\n\003OFF\020\000\022\r\n\tPULL_DOWN\020\001\022\013\n"
  "\007PULL_UP\020\002\"9\n\025IoBoardInitDigitalOut\022\013\n\003p"
  "in\030\001 \001(\r\022\023\n\013is_inverted\030\002 \001(\010\"i\n\rRfidBoa"
  "rdInit\022\026\n\016antenna_phase1\030\001 \001(\r\022\026\n\016antenn"
  "a_phase2\030\002 \001(\r\022\026\n\016phase_duration\030\003 \001(\r\022\020"
  "\n\010inverted\030\004 \001(\010\"a\n\027RfidBoardSetPhaseMat"
  "rix\022\026\n\016antenna_phase1\030\001 \001(\r\022\026\n\016antenna_p"
  "hase2\030\002 \001(\r\022\026\n\016phase_duration\030\003 \001(\r\"9\n\010U"
  "artInit\022\037\n\004port\030\001 \001(\0162\021.LabNetProt.Uarts"
  "\022\014\n\004baud\030\002 \001(\r\">\n\rUartWriteData\022\037\n\004port\030"
  "\001 \001(\0162\021.LabNetProt.Uarts\022\014\n\004data\030\002 \001(\014\"V"
  "\n\021UartInitDigitalIn\022\037\n\004port\030\001 \001(\0162\021.LabN"
  "etProt.Uarts\022\013\n\003pin\030\002 \001(\r\022\023\n\013is_inverted"
  "\030\003 \001(\010\"W\n\022UartInitDigitalOut\022\037\n\004port\030\001 \001"
  "(\0162\021.LabNetProt.Uarts\022\013\n\003pin\030\002 \001(\r\022\023\n\013is"
  "_inverted\030\003 \001(\010\"\022\n\020GpioWiringPiInit\"\275\001\n\031"
  "GpioWiringPiInitDigitalIn\022\013\n\003pin\030\001 \001(\r\022M"
  "\n\016resistor_state\030\002 \001(\01625.LabNetProt.Clie"
  "nt.GpioWiringPiInitDigitalIn.Resistor\022\023\n"
  "\013is_inverted\030\003 \001(\010\"/\n\010Resistor\022\007\n\003OFF\020\000\022"
  "\r\n\tPULL_DOWN\020\001\022\013\n\007PULL_UP\020\002\">\n\032GpioWirin"
  "gPiInitDigitalOut\022\013\n\003pin\030\001 \001(\r\022\023\n\013is_inv"
  "erted\030\002 \001(\010\"=\n\rDigitalOutSet\022\035\n\002id\030\001 \001(\013"
  "2\021.LabNetProt.PinId\022\r\n\005state\030\002 \001(\010\"m\n\017Di"
  "gitalOutPulse\022\035\n\002id\030\001 \001(\0132\021.LabNetProt.P"
  "inId\022\025\n\rhigh_duration\030\002 \001(\r\022\024\n\014low_durat"
  "ion\030\003 \001(\r\022\016\n\006pulses\030\004 \001(\r\"\357\001\n\023StartDigit"
  "alOutLoop\022\021\n\tloop_name\030\001 \001(\t\022\022\n\nloop_pau"
  "se\030\002 \001(\r\022V\n\017digital_outputs\030\003 \003(\0132=.LabN"
  "etProt.Client.StartDigitalOutLoop.Digita"
  "lOutputParameter\032Y\n\026DigitalOutputParamet"
  "er\022\035\n\002id\030\001 \001(\0132\021.LabNetProt.PinId\022\016\n\006off"
  "set\030\002 \001(\r\022\020\n\010duration\030\003 \001(\r\"\'\n\022StopDigit"
  "alOutLoop\022\021\n\tloop_name\030\001 \001(\t\"\024\n\022LabNetRe"
  "setRequest\"\021\n\017LabNetIdRequest\"\013\n\tInitSou"
  "nd\"\256\001\n\017InitSoundSignal\0227\n\013signal_type\030\001 "
  "\001(\0162\".LabNetProt.Client.SoundSignalType\022"
  "\n\n\002id\030\002 \001(\r\022\021\n\tfrequency\030\003 \001(\r\022\025\n\rfreque"
  "ncy_end\030\004 \001(\r\022\034\n\024sweep_length_seconds\030\005 "
  "\001(\002\022\016\n\006volume\030\006 \001(\002\"\014\n\nChiBioInit\"/\n\016Mov"
  "eChiBioPump\022\017\n\007pump_id\030\001 \001(\r\022\014\n\004move\030\002 \001"
  "(\005*\277\004\n\021ClientMessageType\022\010\n\004NONE\020\000\022\025\n\021LA"
  "BNET_ID_REQUEST\020\001\022\030\n\024LABNET_RESET_REQUES"
  "T\020\002\022\021\n\rIO_BOARD_INIT\020\003\022\034\n\030IO_BOARD_INIT_"
  "DIGITAL_IN\020\004\022\035\n\031IO_BOARD_INIT_DIGITAL_OU"
  "T\020\005\022\023\n\017RFID_BOARD_INIT\020\006\022\037\n\033RFID_BOARD_S"
  "ET_PHASE_MATRIX\020\007\022\r\n\tUART_INIT\020\010\022\023\n\017UART"
  "_WRITE_DATA\020\t\022\023\n\017DIGITAL_OUT_SET\020\n\022\025\n\021DI"
  "GITAL_OUT_PULSE\020\013\022\032\n\026START_DIGITAL_OUT_L"
  "OOP\020\014\022\031\n\025STOP_DIGITAL_OUT_LOOP\020\r\022\026\n\022GPIO"
  "_WIRINGPI_INIT\020\016\022!\n\035GPIO_WIRINGPI_INIT_D"
  "IGITAL_IN\020\017\022\"\n\036GPIO_WIRINGPI_INIT_DIGITA"
  "L_OUT\020\020\022\016\n\nINIT_SOUND\020\021\022\025\n\021INIT_SOUND_SI"
  "GNAL\020\022\022\030\n\024UART_INIT_DIGITAL_IN\020\023\022\031\n\025UART"
  "_INIT_DIGITAL_OUT\020\024\022\020\n\014CHI_BIO_INIT\020\025\022\025\n"
  "\021MOVE_CHI_BIO_PUMP\020\026*\204\001\n\017SoundSignalType"
  "\022\r\n\tSINE_WAVE\020\000\022\017\n\013SQUARE_WAVE\020\001\022\021\n\rTRIA"
  "NGLE_WAVE\020\002\022\022\n\016SAW_TOOTH_WAVE\020\003\022\017\n\013WHITE"
  "_NOISE\020\004\022\016\n\nPINK_NOISE\020\005\022\t\n\005SWEEP\020\006b\006pro"
  "to3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_LabNetClient_2eproto_deps[1] = {
  &::descriptor_table_LabNet_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_LabNetClient_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_LabNetClient_2eproto = {
  false, false, 2563, descriptor_table_protodef_LabNetClient_2eproto, "LabNetClient.proto", 
  &descriptor_table_LabNetClient_2eproto_once, descriptor_table_LabNetClient_2eproto_deps, 1, 23,
  schemas, file_default_instances, TableStruct_LabNetClient_2eproto::offsets,
  file_level_metadata_LabNetClient_2eproto, file_level_enum_descriptors_LabNetClient_2eproto, file_level_service_descriptors_LabNetClient_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_LabNetClient_2eproto_getter() {
  return &descriptor_table_LabNetClient_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_LabNetClient_2eproto(&descriptor_table_LabNetClient_2eproto);
namespace LabNetProt {
namespace Client {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IoBoardInitDigitalIn_Resistor_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_LabNetClient_2eproto);
  return file_level_enum_descriptors_LabNetClient_2eproto[0];
}
bool IoBoardInitDigitalIn_Resistor_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr IoBoardInitDigitalIn_Resistor IoBoardInitDigitalIn::OFF;
constexpr IoBoardInitDigitalIn_Resistor IoBoardInitDigitalIn::PULL_DOWN;
constexpr IoBoardInitDigitalIn_Resistor IoBoardInitDigitalIn::PULL_UP;
constexpr IoBoardInitDigitalIn_Resistor IoBoardInitDigitalIn::Resistor_MIN;
constexpr IoBoardInitDigitalIn_Resistor IoBoardInitDigitalIn::Resistor_MAX;
constexpr int IoBoardInitDigitalIn::Resistor_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GpioWiringPiInitDigitalIn_Resistor_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_LabNetClient_2eproto);
  return file_level_enum_descriptors_LabNetClient_2eproto[1];
}
bool GpioWiringPiInitDigitalIn_Resistor_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr GpioWiringPiInitDigitalIn_Resistor GpioWiringPiInitDigitalIn::OFF;
constexpr GpioWiringPiInitDigitalIn_Resistor GpioWiringPiInitDigitalIn::PULL_DOWN;
constexpr GpioWiringPiInitDigitalIn_Resistor GpioWiringPiInitDigitalIn::PULL_UP;
constexpr GpioWiringPiInitDigitalIn_Resistor GpioWiringPiInitDigitalIn::Resistor_MIN;
constexpr GpioWiringPiInitDigitalIn_Resistor GpioWiringPiInitDigitalIn::Resistor_MAX;
constexpr int GpioWiringPiInitDigitalIn::Resistor_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClientMessageType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_LabNetClient_2eproto);
  return file_level_enum_descriptors_LabNetClient_2eproto[2];
}
bool ClientMessageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SoundSignalType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_LabNetClient_2eproto);
  return file_level_enum_descriptors_LabNetClient_2eproto[3];
}
bool SoundSignalType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class IoBoardInit::_Internal {
 public:
};

IoBoardInit::IoBoardInit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:LabNetProt.Client.IoBoardInit)
}
IoBoardInit::IoBoardInit(const IoBoardInit& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:LabNetProt.Client.IoBoardInit)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IoBoardInit::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IoBoardInit::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata IoBoardInit::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_LabNetClient_2eproto_getter, &descriptor_table_LabNetClient_2eproto_once,
      file_level_metadata_LabNetClient_2eproto[0]);
}

// ===================================================================

class IoBoardInitDigitalIn::_Internal {
 public:
};

IoBoardInitDigitalIn::IoBoardInitDigitalIn(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:LabNetProt.Client.IoBoardInitDigitalIn)
}
IoBoardInitDigitalIn::IoBoardInitDigitalIn(const IoBoardInitDigitalIn& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&pin_, &from.pin_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_inverted_) -
    reinterpret_cast<char*>(&pin_)) + sizeof(is_inverted_));
  // @@protoc_insertion_point(copy_constructor:LabNetProt.Client.IoBoardInitDigitalIn)
}

void IoBoardInitDigitalIn::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pin_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_inverted_) -
    reinterpret_cast<char*>(&pin_)) + sizeof(is_inverted_));
}

IoBoardInitDigitalIn::~IoBoardInitDigitalIn() {
  // @@protoc_insertion_point(destructor:LabNetProt.Client.IoBoardInitDigitalIn)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void IoBoardInitDigitalIn::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IoBoardInitDigitalIn::ArenaDtor(void* object) {
  IoBoardInitDigitalIn* _this = reinterpret_cast< IoBoardInitDigitalIn* >(object);
  (void)_this;
}
void IoBoardInitDigitalIn::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IoBoardInitDigitalIn::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IoBoardInitDigitalIn::Clear() {
// @@protoc_insertion_point(message_clear_start:LabNetProt.Client.IoBoardInitDigitalIn)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&pin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_inverted_) -
      reinterpret_cast<char*>(&pin_)) + sizeof(is_inverted_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IoBoardInitDigitalIn::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 pin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          pin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .LabNetProt.Client.IoBoardInitDigitalIn.Resistor resistor_state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_resistor_state(static_cast<::LabNetProt::Client::IoBoardInitDigitalIn_Resistor>(val));
        } else
          goto handle_unusual;
        continue;
      // bool is_inverted = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          is_inverted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IoBoardInitDigitalIn::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LabNetProt.Client.IoBoardInitDigitalIn)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pin = 1;
  if (this->_internal_pin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pin(), target);
  }

  // .LabNetProt.Client.IoBoardInitDigitalIn.Resistor resistor_state = 2;
  if (this->_internal_resistor_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_resistor_state(), target);
  }

  // bool is_inverted = 3;
  if (this->_internal_is_inverted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_inverted(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LabNetProt.Client.IoBoardInitDigitalIn)
  return target;
}

size_t IoBoardInitDigitalIn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LabNetProt.Client.IoBoardInitDigitalIn)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 pin = 1;
  if (this->_internal_pin() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_pin());
  }

  // .LabNetProt.Client.IoBoardInitDigitalIn.Resistor resistor_state = 2;
  if (this->_internal_resistor_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_resistor_state());
  }

  // bool is_inverted = 3;
  if (this->_internal_is_inverted() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IoBoardInitDigitalIn::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IoBoardInitDigitalIn::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IoBoardInitDigitalIn::GetClassData() const { return &_class_data_; }

void IoBoardInitDigitalIn::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<IoBoardInitDigitalIn *>(to)->MergeFrom(
      static_cast<const IoBoardInitDigitalIn &>(from));
}


void IoBoardInitDigitalIn::MergeFrom(const IoBoardInitDigitalIn& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LabNetProt.Client.IoBoardInitDigitalIn)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_pin() != 0) {
    _internal_set_pin(from._internal_pin());
  }
  if (from._internal_resistor_state() != 0) {
    _internal_set_resistor_state(from._internal_resistor_state());
  }
  if (from._internal_is_inverted() != 0) {
    _internal_set_is_inverted(from._internal_is_inverted());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IoBoardInitDigitalIn::CopyFrom(const IoBoardInitDigitalIn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LabNetProt.Client.IoBoardInitDigitalIn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IoBoardInitDigitalIn::IsInitialized() const {
  return true;
}

void IoBoardInitDigitalIn::InternalSwap(IoBoardInitDigitalIn* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IoBoardInitDigitalIn, is_inverted_)
      + sizeof(IoBoardInitDigitalIn::is_inverted_)
      - PROTOBUF_FIELD_OFFSET(IoBoardInitDigitalIn, pin_)>(
          reinterpret_cast<char*>(&pin_),
          reinterpret_cast<char*>(&other->pin_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IoBoardInitDigitalIn::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_LabNetClient_2eproto_getter, &descriptor_table_LabNetClient_2eproto_once,
      file_level_metadata_LabNetClient_2eproto[1]);
}

// ===================================================================

class IoBoardInitDigitalOut::_Internal {
 public:
};

IoBoardInitDigitalOut::IoBoardInitDigitalOut(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:LabNetProt.Client.IoBoardInitDigitalOut)
}
IoBoardInitDigitalOut::IoBoardInitDigitalOut(const IoBoardInitDigitalOut& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&pin_, &from.pin_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_inverted_) -
    reinterpret_cast<char*>(&pin_)) + sizeof(is_inverted_));
  // @@protoc_insertion_point(copy_constructor:LabNetProt.Client.IoBoardInitDigitalOut)
}

void IoBoardInitDigitalOut::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pin_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_inverted_) -
    reinterpret_cast<char*>(&pin_)) + sizeof(is_inverted_));
}

IoBoardInitDigitalOut::~IoBoardInitDigitalOut() {
  // @@protoc_insertion_point(destructor:LabNetProt.Client.IoBoardInitDigitalOut)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void IoBoardInitDigitalOut::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IoBoardInitDigitalOut::ArenaDtor(void* object) {
  IoBoardInitDigitalOut* _this = reinterpret_cast< IoBoardInitDigitalOut* >(object);
  (void)_this;
}
void IoBoardInitDigitalOut::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IoBoardInitDigitalOut::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IoBoardInitDigitalOut::Clear() {
// @@protoc_insertion_point(message_clear_start:LabNetProt.Client.IoBoardInitDigitalOut)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&pin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_inverted_) -
      reinterpret_cast<char*>(&pin_)) + sizeof(is_inverted_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IoBoardInitDigitalOut::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 pin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          pin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_inverted = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          is_inverted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IoBoardInitDigitalOut::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LabNetProt.Client.IoBoardInitDigitalOut)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pin = 1;
  if (this->_internal_pin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pin(), target);
  }

  // bool is_inverted = 2;
  if (this->_internal_is_inverted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_inverted(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LabNetProt.Client.IoBoardInitDigitalOut)
  return target;
}

size_t IoBoardInitDigitalOut::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LabNetProt.Client.IoBoardInitDigitalOut)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 pin = 1;
  if (this->_internal_pin() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_pin());
  }

  // bool is_inverted = 2;
  if (this->_internal_is_inverted() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IoBoardInitDigitalOut::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IoBoardInitDigitalOut::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IoBoardInitDigitalOut::GetClassData() const { return &_class_data_; }

void IoBoardInitDigitalOut::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<IoBoardInitDigitalOut *>(to)->MergeFrom(
      static_cast<const IoBoardInitDigitalOut &>(from));
}


void IoBoardInitDigitalOut::MergeFrom(const IoBoardInitDigitalOut& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LabNetProt.Client.IoBoardInitDigitalOut)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_pin() != 0) {
    _internal_set_pin(from._internal_pin());
  }
  if (from._internal_is_inverted() != 0) {
    _internal_set_is_inverted(from._internal_is_inverted());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IoBoardInitDigitalOut::CopyFrom(const IoBoardInitDigitalOut& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LabNetProt.Client.IoBoardInitDigitalOut)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IoBoardInitDigitalOut::IsInitialized() const {
  return true;
}

void IoBoardInitDigitalOut::InternalSwap(IoBoardInitDigitalOut* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IoBoardInitDigitalOut, is_inverted_)
      + sizeof(IoBoardInitDigitalOut::is_inverted_)
      - PROTOBUF_FIELD_OFFSET(IoBoardInitDigitalOut, pin_)>(
          reinterpret_cast<char*>(&pin_),
          reinterpret_cast<char*>(&other->pin_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IoBoardInitDigitalOut::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_LabNetClient_2eproto_getter, &descriptor_table_LabNetClient_2eproto_once,
      file_level_metadata_LabNetClient_2eproto[2]);
}

// ===================================================================

class RfidBoardInit::_Internal {
 public:
};

RfidBoardInit::RfidBoardInit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:LabNetProt.Client.RfidBoardInit)
}
RfidBoardInit::RfidBoardInit(const RfidBoardInit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&antenna_phase1_, &from.antenna_phase1_,
    static_cast<size_t>(reinterpret_cast<char*>(&inverted_) -
    reinterpret_cast<char*>(&antenna_phase1_)) + sizeof(inverted_));
  // @@protoc_insertion_point(copy_constructor:LabNetProt.Client.RfidBoardInit)
}

void RfidBoardInit::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&antenna_phase1_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&inverted_) -
    reinterpret_cast<char*>(&antenna_phase1_)) + sizeof(inverted_));
}

RfidBoardInit::~RfidBoardInit() {
  // @@protoc_insertion_point(destructor:LabNetProt.Client.RfidBoardInit)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RfidBoardInit::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RfidBoardInit::ArenaDtor(void* object) {
  RfidBoardInit* _this = reinterpret_cast< RfidBoardInit* >(object);
  (void)_this;
}
void RfidBoardInit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RfidBoardInit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RfidBoardInit::Clear() {
// @@protoc_insertion_point(message_clear_start:LabNetProt.Client.RfidBoardInit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&antenna_phase1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&inverted_) -
      reinterpret_cast<char*>(&antenna_phase1_)) + sizeof(inverted_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RfidBoardInit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 antenna_phase1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          antenna_phase1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 antenna_phase2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          antenna_phase2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 phase_duration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          phase_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool inverted = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          inverted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RfidBoardInit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LabNetProt.Client.RfidBoardInit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 antenna_phase1 = 1;
  if (this->_internal_antenna_phase1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_antenna_phase1(), target);
  }

  // uint32 antenna_phase2 = 2;
  if (this->_internal_antenna_phase2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_antenna_phase2(), target);
  }

  // uint32 phase_duration = 3;
  if (this->_internal_phase_duration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_phase_duration(), target);
  }

  // bool inverted = 4;
  if (this->_internal_inverted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_inverted(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LabNetProt.Client.RfidBoardInit)
  return target;
}

size_t RfidBoardInit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LabNetProt.Client.RfidBoardInit)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 antenna_phase1 = 1;
  if (this->_internal_antenna_phase1() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_antenna_phase1());
  }

  // uint32 antenna_phase2 = 2;
  if (this->_internal_antenna_phase2() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_antenna_phase2());
  }

  // uint32 phase_duration = 3;
  if (this->_internal_phase_duration() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_phase_duration());
  }

  // bool inverted = 4;
  if (this->_internal_inverted() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RfidBoardInit::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RfidBoardInit::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RfidBoardInit::GetClassData() const { return &_class_data_; }

void RfidBoardInit::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RfidBoardInit *>(to)->MergeFrom(
      static_cast<const RfidBoardInit &>(from));
}


void RfidBoardInit::MergeFrom(const RfidBoardInit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LabNetProt.Client.RfidBoardInit)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_antenna_phase1() != 0) {
    _internal_set_antenna_phase1(from._internal_antenna_phase1());
  }
  if (from._internal_antenna_phase2() != 0) {
    _internal_set_antenna_phase2(from._internal_antenna_phase2());
  }
  if (from._internal_phase_duration() != 0) {
    _internal_set_phase_duration(from._internal_phase_duration());
  }
  if (from._internal_inverted() != 0) {
    _internal_set_inverted(from._internal_inverted());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RfidBoardInit::CopyFrom(const RfidBoardInit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LabNetProt.Client.RfidBoardInit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RfidBoardInit::IsInitialized() const {
  return true;
}

void RfidBoardInit::InternalSwap(RfidBoardInit* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RfidBoardInit, inverted_)
      + sizeof(RfidBoardInit::inverted_)
      - PROTOBUF_FIELD_OFFSET(RfidBoardInit, antenna_phase1_)>(
          reinterpret_cast<char*>(&antenna_phase1_),
          reinterpret_cast<char*>(&other->antenna_phase1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RfidBoardInit::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_LabNetClient_2eproto_getter, &descriptor_table_LabNetClient_2eproto_once,
      file_level_metadata_LabNetClient_2eproto[3]);
}

// ===================================================================

class RfidBoardSetPhaseMatrix::_Internal {
 public:
};

RfidBoardSetPhaseMatrix::RfidBoardSetPhaseMatrix(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:LabNetProt.Client.RfidBoardSetPhaseMatrix)
}
RfidBoardSetPhaseMatrix::RfidBoardSetPhaseMatrix(const RfidBoardSetPhaseMatrix& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&antenna_phase1_, &from.antenna_phase1_,
    static_cast<size_t>(reinterpret_cast<char*>(&phase_duration_) -
    reinterpret_cast<char*>(&antenna_phase1_)) + sizeof(phase_duration_));
  // @@protoc_insertion_point(copy_constructor:LabNetProt.Client.RfidBoardSetPhaseMatrix)
}

void RfidBoardSetPhaseMatrix::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&antenna_phase1_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&phase_duration_) -
    reinterpret_cast<char*>(&antenna_phase1_)) + sizeof(phase_duration_));
}

RfidBoardSetPhaseMatrix::~RfidBoardSetPhaseMatrix() {
  // @@protoc_insertion_point(destructor:LabNetProt.Client.RfidBoardSetPhaseMatrix)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RfidBoardSetPhaseMatrix::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RfidBoardSetPhaseMatrix::ArenaDtor(void* object) {
  RfidBoardSetPhaseMatrix* _this = reinterpret_cast< RfidBoardSetPhaseMatrix* >(object);
  (void)_this;
}
void RfidBoardSetPhaseMatrix::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RfidBoardSetPhaseMatrix::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RfidBoardSetPhaseMatrix::Clear() {
// @@protoc_insertion_point(message_clear_start:LabNetProt.Client.RfidBoardSetPhaseMatrix)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&antenna_phase1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&phase_duration_) -
      reinterpret_cast<char*>(&antenna_phase1_)) + sizeof(phase_duration_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RfidBoardSetPhaseMatrix::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 antenna_phase1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          antenna_phase1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 antenna_phase2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          antenna_phase2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 phase_duration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          phase_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RfidBoardSetPhaseMatrix::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LabNetProt.Client.RfidBoardSetPhaseMatrix)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 antenna_phase1 = 1;
  if (this->_internal_antenna_phase1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_antenna_phase1(), target);
  }

  // uint32 antenna_phase2 = 2;
  if (this->_internal_antenna_phase2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_antenna_phase2(), target);
  }

  // uint32 phase_duration = 3;
  if (this->_internal_phase_duration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_phase_duration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LabNetProt.Client.RfidBoardSetPhaseMatrix)
  return target;
}

size_t RfidBoardSetPhaseMatrix::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LabNetProt.Client.RfidBoardSetPhaseMatrix)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 antenna_phase1 = 1;
  if (this->_internal_antenna_phase1() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_antenna_phase1());
  }

  // uint32 antenna_phase2 = 2;
  if (this->_internal_antenna_phase2() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_antenna_phase2());
  }

  // uint32 phase_duration = 3;
  if (this->_internal_phase_duration() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_phase_duration());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RfidBoardSetPhaseMatrix::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RfidBoardSetPhaseMatrix::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RfidBoardSetPhaseMatrix::GetClassData() const { return &_class_data_; }

void RfidBoardSetPhaseMatrix::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RfidBoardSetPhaseMatrix *>(to)->MergeFrom(
      static_cast<const RfidBoardSetPhaseMatrix &>(from));
}


void RfidBoardSetPhaseMatrix::MergeFrom(const RfidBoardSetPhaseMatrix& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LabNetProt.Client.RfidBoardSetPhaseMatrix)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_antenna_phase1() != 0) {
    _internal_set_antenna_phase1(from._internal_antenna_phase1());
  }
  if (from._internal_antenna_phase2() != 0) {
    _internal_set_antenna_phase2(from._internal_antenna_phase2());
  }
  if (from._internal_phase_duration() != 0) {
    _internal_set_phase_duration(from._internal_phase_duration());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RfidBoardSetPhaseMatrix::CopyFrom(const RfidBoardSetPhaseMatrix& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LabNetProt.Client.RfidBoardSetPhaseMatrix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RfidBoardSetPhaseMatrix::IsInitialized() const {
  return true;
}

void RfidBoardSetPhaseMatrix::InternalSwap(RfidBoardSetPhaseMatrix* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RfidBoardSetPhaseMatrix, phase_duration_)
      + sizeof(RfidBoardSetPhaseMatrix::phase_duration_)
      - PROTOBUF_FIELD_OFFSET(RfidBoardSetPhaseMatrix, antenna_phase1_)>(
          reinterpret_cast<char*>(&antenna_phase1_),
          reinterpret_cast<char*>(&other->antenna_phase1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RfidBoardSetPhaseMatrix::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_LabNetClient_2eproto_getter, &descriptor_table_LabNetClient_2eproto_once,
      file_level_metadata_LabNetClient_2eproto[4]);
}

// ===================================================================

class UartInit::_Internal {
 public:
};

UartInit::UartInit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:LabNetProt.Client.UartInit)
}
UartInit::UartInit(const UartInit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&port_, &from.port_,
    static_cast<size_t>(reinterpret_cast<char*>(&baud_) -
    reinterpret_cast<char*>(&port_)) + sizeof(baud_));
  // @@protoc_insertion_point(copy_constructor:LabNetProt.Client.UartInit)
}

void UartInit::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&port_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&baud_) -
    reinterpret_cast<char*>(&port_)) + sizeof(baud_));
}

UartInit::~UartInit() {
  // @@protoc_insertion_point(destructor:LabNetProt.Client.UartInit)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UartInit::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UartInit::ArenaDtor(void* object) {
  UartInit* _this = reinterpret_cast< UartInit* >(object);
  (void)_this;
}
void UartInit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UartInit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UartInit::Clear() {
// @@protoc_insertion_point(message_clear_start:LabNetProt.Client.UartInit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&baud_) -
      reinterpret_cast<char*>(&port_)) + sizeof(baud_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UartInit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .LabNetProt.Uarts port = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_port(static_cast<::LabNetProt::Uarts>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 baud = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          baud_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UartInit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LabNetProt.Client.UartInit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .LabNetProt.Uarts port = 1;
  if (this->_internal_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_port(), target);
  }

  // uint32 baud = 2;
  if (this->_internal_baud() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_baud(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LabNetProt.Client.UartInit)
  return target;
}

size_t UartInit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LabNetProt.Client.UartInit)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .LabNetProt.Uarts port = 1;
  if (this->_internal_port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_port());
  }

  // uint32 baud = 2;
  if (this->_internal_baud() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_baud());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UartInit::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UartInit::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UartInit::GetClassData() const { return &_class_data_; }

void UartInit::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UartInit *>(to)->MergeFrom(
      static_cast<const UartInit &>(from));
}


void UartInit::MergeFrom(const UartInit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LabNetProt.Client.UartInit)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_port() != 0) {
    _internal_set_port(from._internal_port());
  }
  if (from._internal_baud() != 0) {
    _internal_set_baud(from._internal_baud());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UartInit::CopyFrom(const UartInit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LabNetProt.Client.UartInit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UartInit::IsInitialized() const {
  return true;
}

void UartInit::InternalSwap(UartInit* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UartInit, baud_)
      + sizeof(UartInit::baud_)
      - PROTOBUF_FIELD_OFFSET(UartInit, port_)>(
          reinterpret_cast<char*>(&port_),
          reinterpret_cast<char*>(&other->port_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UartInit::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_LabNetClient_2eproto_getter, &descriptor_table_LabNetClient_2eproto_once,
      file_level_metadata_LabNetClient_2eproto[5]);
}

// ===================================================================

class UartWriteData::_Internal {
 public:
};

UartWriteData::UartWriteData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:LabNetProt.Client.UartWriteData)
}
UartWriteData::UartWriteData(const UartWriteData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArenaForAllocation());
  }
  port_ = from.port_;
  // @@protoc_insertion_point(copy_constructor:LabNetProt.Client.UartWriteData)
}

void UartWriteData::SharedCtor() {
data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
port_ = 0;
}

UartWriteData::~UartWriteData() {
  // @@protoc_insertion_point(destructor:LabNetProt.Client.UartWriteData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UartWriteData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UartWriteData::ArenaDtor(void* object) {
  UartWriteData* _this = reinterpret_cast< UartWriteData* >(object);
  (void)_this;
}
void UartWriteData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UartWriteData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UartWriteData::Clear() {
// @@protoc_insertion_point(message_clear_start:LabNetProt.Client.UartWriteData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmpty();
  port_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UartWriteData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .LabNetProt.Uarts port = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_port(static_cast<::LabNetProt::Uarts>(val));
        } else
          goto handle_unusual;
        continue;
      // bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UartWriteData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LabNetProt.Client.UartWriteData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .LabNetProt.Uarts port = 1;
  if (this->_internal_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_port(), target);
  }

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LabNetProt.Client.UartWriteData)
  return target;
}

size_t UartWriteData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LabNetProt.Client.UartWriteData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // .LabNetProt.Uarts port = 1;
  if (this->_internal_port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_port());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UartWriteData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UartWriteData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UartWriteData::GetClassData() const { return &_class_data_; }

void UartWriteData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UartWriteData *>(to)->MergeFrom(
      static_cast<const UartWriteData &>(from));
}


void UartWriteData::MergeFrom(const UartWriteData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LabNetProt.Client.UartWriteData)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _internal_set_data(from._internal_data());
  }
  if (from._internal_port() != 0) {
    _internal_set_port(from._internal_port());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UartWriteData::CopyFrom(const UartWriteData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LabNetProt.Client.UartWriteData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UartWriteData::IsInitialized() const {
  return true;
}

void UartWriteData::InternalSwap(UartWriteData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &data_, lhs_arena,
      &other->data_, rhs_arena
  );
  swap(port_, other->port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UartWriteData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_LabNetClient_2eproto_getter, &descriptor_table_LabNetClient_2eproto_once,
      file_level_metadata_LabNetClient_2eproto[6]);
}

// ===================================================================

class UartInitDigitalIn::_Internal {
 public:
};

UartInitDigitalIn::UartInitDigitalIn(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:LabNetProt.Client.UartInitDigitalIn)
}
UartInitDigitalIn::UartInitDigitalIn(const UartInitDigitalIn& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&port_, &from.port_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_inverted_) -
    reinterpret_cast<char*>(&port_)) + sizeof(is_inverted_));
  // @@protoc_insertion_point(copy_constructor:LabNetProt.Client.UartInitDigitalIn)
}

void UartInitDigitalIn::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&port_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_inverted_) -
    reinterpret_cast<char*>(&port_)) + sizeof(is_inverted_));
}

UartInitDigitalIn::~UartInitDigitalIn() {
  // @@protoc_insertion_point(destructor:LabNetProt.Client.UartInitDigitalIn)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UartInitDigitalIn::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UartInitDigitalIn::ArenaDtor(void* object) {
  UartInitDigitalIn* _this = reinterpret_cast< UartInitDigitalIn* >(object);
  (void)_this;
}
void UartInitDigitalIn::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UartInitDigitalIn::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UartInitDigitalIn::Clear() {
// @@protoc_insertion_point(message_clear_start:LabNetProt.Client.UartInitDigitalIn)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_inverted_) -
      reinterpret_cast<char*>(&port_)) + sizeof(is_inverted_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UartInitDigitalIn::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .LabNetProt.Uarts port = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_port(static_cast<::LabNetProt::Uarts>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 pin = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          pin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_inverted = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          is_inverted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UartInitDigitalIn::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LabNetProt.Client.UartInitDigitalIn)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .LabNetProt.Uarts port = 1;
  if (this->_internal_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_port(), target);
  }

  // uint32 pin = 2;
  if (this->_internal_pin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_pin(), target);
  }

  // bool is_inverted = 3;
  if (this->_internal_is_inverted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_inverted(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LabNetProt.Client.UartInitDigitalIn)
  return target;
}

size_t UartInitDigitalIn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LabNetProt.Client.UartInitDigitalIn)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .LabNetProt.Uarts port = 1;
  if (this->_internal_port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_port());
  }

  // uint32 pin = 2;
  if (this->_internal_pin() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_pin());
  }

  // bool is_inverted = 3;
  if (this->_internal_is_inverted() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UartInitDigitalIn::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UartInitDigitalIn::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UartInitDigitalIn::GetClassData() const { return &_class_data_; }

void UartInitDigitalIn::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UartInitDigitalIn *>(to)->MergeFrom(
      static_cast<const UartInitDigitalIn &>(from));
}


void UartInitDigitalIn::MergeFrom(const UartInitDigitalIn& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LabNetProt.Client.UartInitDigitalIn)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_port() != 0) {
    _internal_set_port(from._internal_port());
  }
  if (from._internal_pin() != 0) {
    _internal_set_pin(from._internal_pin());
  }
  if (from._internal_is_inverted() != 0) {
    _internal_set_is_inverted(from._internal_is_inverted());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UartInitDigitalIn::CopyFrom(const UartInitDigitalIn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LabNetProt.Client.UartInitDigitalIn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UartInitDigitalIn::IsInitialized() const {
  return true;
}

void UartInitDigitalIn::InternalSwap(UartInitDigitalIn* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UartInitDigitalIn, is_inverted_)
      + sizeof(UartInitDigitalIn::is_inverted_)
      - PROTOBUF_FIELD_OFFSET(UartInitDigitalIn, port_)>(
          reinterpret_cast<char*>(&port_),
          reinterpret_cast<char*>(&other->port_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UartInitDigitalIn::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_LabNetClient_2eproto_getter, &descriptor_table_LabNetClient_2eproto_once,
      file_level_metadata_LabNetClient_2eproto[7]);
}

// ===================================================================

class UartInitDigitalOut::_Internal {
 public:
};

UartInitDigitalOut::UartInitDigitalOut(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:LabNetProt.Client.UartInitDigitalOut)
}
UartInitDigitalOut::UartInitDigitalOut(const UartInitDigitalOut& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&port_, &from.port_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_inverted_) -
    reinterpret_cast<char*>(&port_)) + sizeof(is_inverted_));
  // @@protoc_insertion_point(copy_constructor:LabNetProt.Client.UartInitDigitalOut)
}

void UartInitDigitalOut::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&port_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_inverted_) -
    reinterpret_cast<char*>(&port_)) + sizeof(is_inverted_));
}

UartInitDigitalOut::~UartInitDigitalOut() {
  // @@protoc_insertion_point(destructor:LabNetProt.Client.UartInitDigitalOut)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UartInitDigitalOut::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UartInitDigitalOut::ArenaDtor(void* object) {
  UartInitDigitalOut* _this = reinterpret_cast< UartInitDigitalOut* >(object);
  (void)_this;
}
void UartInitDigitalOut::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UartInitDigitalOut::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UartInitDigitalOut::Clear() {
// @@protoc_insertion_point(message_clear_start:LabNetProt.Client.UartInitDigitalOut)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_inverted_) -
      reinterpret_cast<char*>(&port_)) + sizeof(is_inverted_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UartInitDigitalOut::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .LabNetProt.Uarts port = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_port(static_cast<::LabNetProt::Uarts>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 pin = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          pin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_inverted = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          is_inverted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UartInitDigitalOut::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LabNetProt.Client.UartInitDigitalOut)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .LabNetProt.Uarts port = 1;
  if (this->_internal_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_port(), target);
  }

  // uint32 pin = 2;
  if (this->_internal_pin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_pin(), target);
  }

  // bool is_inverted = 3;
  if (this->_internal_is_inverted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_inverted(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LabNetProt.Client.UartInitDigitalOut)
  return target;
}

size_t UartInitDigitalOut::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LabNetProt.Client.UartInitDigitalOut)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .LabNetProt.Uarts port = 1;
  if (this->_internal_port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_port());
  }

  // uint32 pin = 2;
  if (this->_internal_pin() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_pin());
  }

  // bool is_inverted = 3;
  if (this->_internal_is_inverted() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UartInitDigitalOut::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UartInitDigitalOut::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UartInitDigitalOut::GetClassData() const { return &_class_data_; }

void UartInitDigitalOut::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UartInitDigitalOut *>(to)->MergeFrom(
      static_cast<const UartInitDigitalOut &>(from));
}


void UartInitDigitalOut::MergeFrom(const UartInitDigitalOut& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LabNetProt.Client.UartInitDigitalOut)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_port() != 0) {
    _internal_set_port(from._internal_port());
  }
  if (from._internal_pin() != 0) {
    _internal_set_pin(from._internal_pin());
  }
  if (from._internal_is_inverted() != 0) {
    _internal_set_is_inverted(from._internal_is_inverted());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UartInitDigitalOut::CopyFrom(const UartInitDigitalOut& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LabNetProt.Client.UartInitDigitalOut)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UartInitDigitalOut::IsInitialized() const {
  return true;
}

void UartInitDigitalOut::InternalSwap(UartInitDigitalOut* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UartInitDigitalOut, is_inverted_)
      + sizeof(UartInitDigitalOut::is_inverted_)
      - PROTOBUF_FIELD_OFFSET(UartInitDigitalOut, port_)>(
          reinterpret_cast<char*>(&port_),
          reinterpret_cast<char*>(&other->port_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UartInitDigitalOut::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_LabNetClient_2eproto_getter, &descriptor_table_LabNetClient_2eproto_once,
      file_level_metadata_LabNetClient_2eproto[8]);
}

// ===================================================================

class GpioWiringPiInit::_Internal {
 public:
};

GpioWiringPiInit::GpioWiringPiInit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:LabNetProt.Client.GpioWiringPiInit)
}
GpioWiringPiInit::GpioWiringPiInit(const GpioWiringPiInit& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:LabNetProt.Client.GpioWiringPiInit)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GpioWiringPiInit::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GpioWiringPiInit::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata GpioWiringPiInit::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_LabNetClient_2eproto_getter, &descriptor_table_LabNetClient_2eproto_once,
      file_level_metadata_LabNetClient_2eproto[9]);
}

// ===================================================================

class GpioWiringPiInitDigitalIn::_Internal {
 public:
};

GpioWiringPiInitDigitalIn::GpioWiringPiInitDigitalIn(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:LabNetProt.Client.GpioWiringPiInitDigitalIn)
}
GpioWiringPiInitDigitalIn::GpioWiringPiInitDigitalIn(const GpioWiringPiInitDigitalIn& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&pin_, &from.pin_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_inverted_) -
    reinterpret_cast<char*>(&pin_)) + sizeof(is_inverted_));
  // @@protoc_insertion_point(copy_constructor:LabNetProt.Client.GpioWiringPiInitDigitalIn)
}

void GpioWiringPiInitDigitalIn::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pin_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_inverted_) -
    reinterpret_cast<char*>(&pin_)) + sizeof(is_inverted_));
}

GpioWiringPiInitDigitalIn::~GpioWiringPiInitDigitalIn() {
  // @@protoc_insertion_point(destructor:LabNetProt.Client.GpioWiringPiInitDigitalIn)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GpioWiringPiInitDigitalIn::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GpioWiringPiInitDigitalIn::ArenaDtor(void* object) {
  GpioWiringPiInitDigitalIn* _this = reinterpret_cast< GpioWiringPiInitDigitalIn* >(object);
  (void)_this;
}
void GpioWiringPiInitDigitalIn::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GpioWiringPiInitDigitalIn::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GpioWiringPiInitDigitalIn::Clear() {
// @@protoc_insertion_point(message_clear_start:LabNetProt.Client.GpioWiringPiInitDigitalIn)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&pin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_inverted_) -
      reinterpret_cast<char*>(&pin_)) + sizeof(is_inverted_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GpioWiringPiInitDigitalIn::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 pin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          pin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .LabNetProt.Client.GpioWiringPiInitDigitalIn.Resistor resistor_state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_resistor_state(static_cast<::LabNetProt::Client::GpioWiringPiInitDigitalIn_Resistor>(val));
        } else
          goto handle_unusual;
        continue;
      // bool is_inverted = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          is_inverted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GpioWiringPiInitDigitalIn::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LabNetProt.Client.GpioWiringPiInitDigitalIn)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pin = 1;
  if (this->_internal_pin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pin(), target);
  }

  // .LabNetProt.Client.GpioWiringPiInitDigitalIn.Resistor resistor_state = 2;
  if (this->_internal_resistor_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_resistor_state(), target);
  }

  // bool is_inverted = 3;
  if (this->_internal_is_inverted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_inverted(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LabNetProt.Client.GpioWiringPiInitDigitalIn)
  return target;
}

size_t GpioWiringPiInitDigitalIn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LabNetProt.Client.GpioWiringPiInitDigitalIn)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 pin = 1;
  if (this->_internal_pin() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_pin());
  }

  // .LabNetProt.Client.GpioWiringPiInitDigitalIn.Resistor resistor_state = 2;
  if (this->_internal_resistor_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_resistor_state());
  }

  // bool is_inverted = 3;
  if (this->_internal_is_inverted() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GpioWiringPiInitDigitalIn::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GpioWiringPiInitDigitalIn::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GpioWiringPiInitDigitalIn::GetClassData() const { return &_class_data_; }

void GpioWiringPiInitDigitalIn::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GpioWiringPiInitDigitalIn *>(to)->MergeFrom(
      static_cast<const GpioWiringPiInitDigitalIn &>(from));
}


void GpioWiringPiInitDigitalIn::MergeFrom(const GpioWiringPiInitDigitalIn& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LabNetProt.Client.GpioWiringPiInitDigitalIn)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_pin() != 0) {
    _internal_set_pin(from._internal_pin());
  }
  if (from._internal_resistor_state() != 0) {
    _internal_set_resistor_state(from._internal_resistor_state());
  }
  if (from._internal_is_inverted() != 0) {
    _internal_set_is_inverted(from._internal_is_inverted());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GpioWiringPiInitDigitalIn::CopyFrom(const GpioWiringPiInitDigitalIn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LabNetProt.Client.GpioWiringPiInitDigitalIn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GpioWiringPiInitDigitalIn::IsInitialized() const {
  return true;
}

void GpioWiringPiInitDigitalIn::InternalSwap(GpioWiringPiInitDigitalIn* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GpioWiringPiInitDigitalIn, is_inverted_)
      + sizeof(GpioWiringPiInitDigitalIn::is_inverted_)
      - PROTOBUF_FIELD_OFFSET(GpioWiringPiInitDigitalIn, pin_)>(
          reinterpret_cast<char*>(&pin_),
          reinterpret_cast<char*>(&other->pin_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GpioWiringPiInitDigitalIn::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_LabNetClient_2eproto_getter, &descriptor_table_LabNetClient_2eproto_once,
      file_level_metadata_LabNetClient_2eproto[10]);
}

// ===================================================================

class GpioWiringPiInitDigitalOut::_Internal {
 public:
};

GpioWiringPiInitDigitalOut::GpioWiringPiInitDigitalOut(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:LabNetProt.Client.GpioWiringPiInitDigitalOut)
}
GpioWiringPiInitDigitalOut::GpioWiringPiInitDigitalOut(const GpioWiringPiInitDigitalOut& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&pin_, &from.pin_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_inverted_) -
    reinterpret_cast<char*>(&pin_)) + sizeof(is_inverted_));
  // @@protoc_insertion_point(copy_constructor:LabNetProt.Client.GpioWiringPiInitDigitalOut)
}

void GpioWiringPiInitDigitalOut::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pin_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_inverted_) -
    reinterpret_cast<char*>(&pin_)) + sizeof(is_inverted_));
}

GpioWiringPiInitDigitalOut::~GpioWiringPiInitDigitalOut() {
  // @@protoc_insertion_point(destructor:LabNetProt.Client.GpioWiringPiInitDigitalOut)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GpioWiringPiInitDigitalOut::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GpioWiringPiInitDigitalOut::ArenaDtor(void* object) {
  GpioWiringPiInitDigitalOut* _this = reinterpret_cast< GpioWiringPiInitDigitalOut* >(object);
  (void)_this;
}
void GpioWiringPiInitDigitalOut::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GpioWiringPiInitDigitalOut::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GpioWiringPiInitDigitalOut::Clear() {
// @@protoc_insertion_point(message_clear_start:LabNetProt.Client.GpioWiringPiInitDigitalOut)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&pin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_inverted_) -
      reinterpret_cast<char*>(&pin_)) + sizeof(is_inverted_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GpioWiringPiInitDigitalOut::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 pin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          pin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_inverted = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          is_inverted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GpioWiringPiInitDigitalOut::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LabNetProt.Client.GpioWiringPiInitDigitalOut)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pin = 1;
  if (this->_internal_pin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pin(), target);
  }

  // bool is_inverted = 2;
  if (this->_internal_is_inverted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_inverted(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LabNetProt.Client.GpioWiringPiInitDigitalOut)
  return target;
}

size_t GpioWiringPiInitDigitalOut::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LabNetProt.Client.GpioWiringPiInitDigitalOut)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 pin = 1;
  if (this->_internal_pin() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_pin());
  }

  // bool is_inverted = 2;
  if (this->_internal_is_inverted() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GpioWiringPiInitDigitalOut::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GpioWiringPiInitDigitalOut::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GpioWiringPiInitDigitalOut::GetClassData() const { return &_class_data_; }

void GpioWiringPiInitDigitalOut::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GpioWiringPiInitDigitalOut *>(to)->MergeFrom(
      static_cast<const GpioWiringPiInitDigitalOut &>(from));
}


void GpioWiringPiInitDigitalOut::MergeFrom(const GpioWiringPiInitDigitalOut& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LabNetProt.Client.GpioWiringPiInitDigitalOut)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_pin() != 0) {
    _internal_set_pin(from._internal_pin());
  }
  if (from._internal_is_inverted() != 0) {
    _internal_set_is_inverted(from._internal_is_inverted());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GpioWiringPiInitDigitalOut::CopyFrom(const GpioWiringPiInitDigitalOut& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LabNetProt.Client.GpioWiringPiInitDigitalOut)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GpioWiringPiInitDigitalOut::IsInitialized() const {
  return true;
}

void GpioWiringPiInitDigitalOut::InternalSwap(GpioWiringPiInitDigitalOut* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GpioWiringPiInitDigitalOut, is_inverted_)
      + sizeof(GpioWiringPiInitDigitalOut::is_inverted_)
      - PROTOBUF_FIELD_OFFSET(GpioWiringPiInitDigitalOut, pin_)>(
          reinterpret_cast<char*>(&pin_),
          reinterpret_cast<char*>(&other->pin_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GpioWiringPiInitDigitalOut::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_LabNetClient_2eproto_getter, &descriptor_table_LabNetClient_2eproto_once,
      file_level_metadata_LabNetClient_2eproto[11]);
}

// ===================================================================

class DigitalOutSet::_Internal {
 public:
  static const ::LabNetProt::PinId& id(const DigitalOutSet* msg);
};

const ::LabNetProt::PinId&
DigitalOutSet::_Internal::id(const DigitalOutSet* msg) {
  return *msg->id_;
}
void DigitalOutSet::clear_id() {
  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
DigitalOutSet::DigitalOutSet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:LabNetProt.Client.DigitalOutSet)
}
DigitalOutSet::DigitalOutSet(const DigitalOutSet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_id()) {
    id_ = new ::LabNetProt::PinId(*from.id_);
  } else {
    id_ = nullptr;
  }
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:LabNetProt.Client.DigitalOutSet)
}

void DigitalOutSet::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&id_)) + sizeof(state_));
}

DigitalOutSet::~DigitalOutSet() {
  // @@protoc_insertion_point(destructor:LabNetProt.Client.DigitalOutSet)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DigitalOutSet::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete id_;
}

void DigitalOutSet::ArenaDtor(void* object) {
  DigitalOutSet* _this = reinterpret_cast< DigitalOutSet* >(object);
  (void)_this;
}
void DigitalOutSet::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DigitalOutSet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DigitalOutSet::Clear() {
// @@protoc_insertion_point(message_clear_start:LabNetProt.Client.DigitalOutSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  state_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DigitalOutSet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .LabNetProt.PinId id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DigitalOutSet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LabNetProt.Client.DigitalOutSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .LabNetProt.PinId id = 1;
  if (this->_internal_has_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::id(this), target, stream);
  }

  // bool state = 2;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LabNetProt.Client.DigitalOutSet)
  return target;
}

size_t DigitalOutSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LabNetProt.Client.DigitalOutSet)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .LabNetProt.PinId id = 1;
  if (this->_internal_has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // bool state = 2;
  if (this->_internal_state() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DigitalOutSet::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DigitalOutSet::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DigitalOutSet::GetClassData() const { return &_class_data_; }

void DigitalOutSet::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DigitalOutSet *>(to)->MergeFrom(
      static_cast<const DigitalOutSet &>(from));
}


void DigitalOutSet::MergeFrom(const DigitalOutSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LabNetProt.Client.DigitalOutSet)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_id()) {
    _internal_mutable_id()->::LabNetProt::PinId::MergeFrom(from._internal_id());
  }
  if (from._internal_state() != 0) {
    _internal_set_state(from._internal_state());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DigitalOutSet::CopyFrom(const DigitalOutSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LabNetProt.Client.DigitalOutSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DigitalOutSet::IsInitialized() const {
  return true;
}

void DigitalOutSet::InternalSwap(DigitalOutSet* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DigitalOutSet, state_)
      + sizeof(DigitalOutSet::state_)
      - PROTOBUF_FIELD_OFFSET(DigitalOutSet, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DigitalOutSet::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_LabNetClient_2eproto_getter, &descriptor_table_LabNetClient_2eproto_once,
      file_level_metadata_LabNetClient_2eproto[12]);
}

// ===================================================================

class DigitalOutPulse::_Internal {
 public:
  static const ::LabNetProt::PinId& id(const DigitalOutPulse* msg);
};

const ::LabNetProt::PinId&
DigitalOutPulse::_Internal::id(const DigitalOutPulse* msg) {
  return *msg->id_;
}
void DigitalOutPulse::clear_id() {
  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
DigitalOutPulse::DigitalOutPulse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:LabNetProt.Client.DigitalOutPulse)
}
DigitalOutPulse::DigitalOutPulse(const DigitalOutPulse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_id()) {
    id_ = new ::LabNetProt::PinId(*from.id_);
  } else {
    id_ = nullptr;
  }
  ::memcpy(&high_duration_, &from.high_duration_,
    static_cast<size_t>(reinterpret_cast<char*>(&pulses_) -
    reinterpret_cast<char*>(&high_duration_)) + sizeof(pulses_));
  // @@protoc_insertion_point(copy_constructor:LabNetProt.Client.DigitalOutPulse)
}

void DigitalOutPulse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&pulses_) -
    reinterpret_cast<char*>(&id_)) + sizeof(pulses_));
}

DigitalOutPulse::~DigitalOutPulse() {
  // @@protoc_insertion_point(destructor:LabNetProt.Client.DigitalOutPulse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DigitalOutPulse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete id_;
}

void DigitalOutPulse::ArenaDtor(void* object) {
  DigitalOutPulse* _this = reinterpret_cast< DigitalOutPulse* >(object);
  (void)_this;
}
void DigitalOutPulse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DigitalOutPulse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DigitalOutPulse::Clear() {
// @@protoc_insertion_point(message_clear_start:LabNetProt.Client.DigitalOutPulse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  ::memset(&high_duration_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pulses_) -
      reinterpret_cast<char*>(&high_duration_)) + sizeof(pulses_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DigitalOutPulse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .LabNetProt.PinId id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 high_duration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          high_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 low_duration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          low_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 pulses = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          pulses_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DigitalOutPulse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LabNetProt.Client.DigitalOutPulse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .LabNetProt.PinId id = 1;
  if (this->_internal_has_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::id(this), target, stream);
  }

  // uint32 high_duration = 2;
  if (this->_internal_high_duration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_high_duration(), target);
  }

  // uint32 low_duration = 3;
  if (this->_internal_low_duration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_low_duration(), target);
  }

  // uint32 pulses = 4;
  if (this->_internal_pulses() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_pulses(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LabNetProt.Client.DigitalOutPulse)
  return target;
}

size_t DigitalOutPulse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LabNetProt.Client.DigitalOutPulse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .LabNetProt.PinId id = 1;
  if (this->_internal_has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // uint32 high_duration = 2;
  if (this->_internal_high_duration() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_high_duration());
  }

  // uint32 low_duration = 3;
  if (this->_internal_low_duration() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_low_duration());
  }

  // uint32 pulses = 4;
  if (this->_internal_pulses() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_pulses());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DigitalOutPulse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DigitalOutPulse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DigitalOutPulse::GetClassData() const { return &_class_data_; }

void DigitalOutPulse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DigitalOutPulse *>(to)->MergeFrom(
      static_cast<const DigitalOutPulse &>(from));
}


void DigitalOutPulse::MergeFrom(const DigitalOutPulse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LabNetProt.Client.DigitalOutPulse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_id()) {
    _internal_mutable_id()->::LabNetProt::PinId::MergeFrom(from._internal_id());
  }
  if (from._internal_high_duration() != 0) {
    _internal_set_high_duration(from._internal_high_duration());
  }
  if (from._internal_low_duration() != 0) {
    _internal_set_low_duration(from._internal_low_duration());
  }
  if (from._internal_pulses() != 0) {
    _internal_set_pulses(from._internal_pulses());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DigitalOutPulse::CopyFrom(const DigitalOutPulse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LabNetProt.Client.DigitalOutPulse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DigitalOutPulse::IsInitialized() const {
  return true;
}

void DigitalOutPulse::InternalSwap(DigitalOutPulse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DigitalOutPulse, pulses_)
      + sizeof(DigitalOutPulse::pulses_)
      - PROTOBUF_FIELD_OFFSET(DigitalOutPulse, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DigitalOutPulse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_LabNetClient_2eproto_getter, &descriptor_table_LabNetClient_2eproto_once,
      file_level_metadata_LabNetClient_2eproto[13]);
}

// ===================================================================

class StartDigitalOutLoop_DigitalOutputParameter::_Internal {
 public:
  static const ::LabNetProt::PinId& id(const StartDigitalOutLoop_DigitalOutputParameter* msg);
};

const ::LabNetProt::PinId&
StartDigitalOutLoop_DigitalOutputParameter::_Internal::id(const StartDigitalOutLoop_DigitalOutputParameter* msg) {
  return *msg->id_;
}
void StartDigitalOutLoop_DigitalOutputParameter::clear_id() {
  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
StartDigitalOutLoop_DigitalOutputParameter::StartDigitalOutLoop_DigitalOutputParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:LabNetProt.Client.StartDigitalOutLoop.DigitalOutputParameter)
}
StartDigitalOutLoop_DigitalOutputParameter::StartDigitalOutLoop_DigitalOutputParameter(const StartDigitalOutLoop_DigitalOutputParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_id()) {
    id_ = new ::LabNetProt::PinId(*from.id_);
  } else {
    id_ = nullptr;
  }
  ::memcpy(&offset_, &from.offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&offset_)) + sizeof(duration_));
  // @@protoc_insertion_point(copy_constructor:LabNetProt.Client.StartDigitalOutLoop.DigitalOutputParameter)
}

void StartDigitalOutLoop_DigitalOutputParameter::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&id_)) + sizeof(duration_));
}

StartDigitalOutLoop_DigitalOutputParameter::~StartDigitalOutLoop_DigitalOutputParameter() {
  // @@protoc_insertion_point(destructor:LabNetProt.Client.StartDigitalOutLoop.DigitalOutputParameter)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StartDigitalOutLoop_DigitalOutputParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete id_;
}

void StartDigitalOutLoop_DigitalOutputParameter::ArenaDtor(void* object) {
  StartDigitalOutLoop_DigitalOutputParameter* _this = reinterpret_cast< StartDigitalOutLoop_DigitalOutputParameter* >(object);
  (void)_this;
}
void StartDigitalOutLoop_DigitalOutputParameter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StartDigitalOutLoop_DigitalOutputParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StartDigitalOutLoop_DigitalOutputParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:LabNetProt.Client.StartDigitalOutLoop.DigitalOutputParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  ::memset(&offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&duration_) -
      reinterpret_cast<char*>(&offset_)) + sizeof(duration_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StartDigitalOutLoop_DigitalOutputParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .LabNetProt.PinId id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 duration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StartDigitalOutLoop_DigitalOutputParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LabNetProt.Client.StartDigitalOutLoop.DigitalOutputParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .LabNetProt.PinId id = 1;
  if (this->_internal_has_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::id(this), target, stream);
  }

  // uint32 offset = 2;
  if (this->_internal_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_offset(), target);
  }

  // uint32 duration = 3;
  if (this->_internal_duration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_duration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LabNetProt.Client.StartDigitalOutLoop.DigitalOutputParameter)
  return target;
}

size_t StartDigitalOutLoop_DigitalOutputParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LabNetProt.Client.StartDigitalOutLoop.DigitalOutputParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .LabNetProt.PinId id = 1;
  if (this->_internal_has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // uint32 offset = 2;
  if (this->_internal_offset() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_offset());
  }

  // uint32 duration = 3;
  if (this->_internal_duration() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_duration());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StartDigitalOutLoop_DigitalOutputParameter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StartDigitalOutLoop_DigitalOutputParameter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StartDigitalOutLoop_DigitalOutputParameter::GetClassData() const { return &_class_data_; }

void StartDigitalOutLoop_DigitalOutputParameter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StartDigitalOutLoop_DigitalOutputParameter *>(to)->MergeFrom(
      static_cast<const StartDigitalOutLoop_DigitalOutputParameter &>(from));
}


void StartDigitalOutLoop_DigitalOutputParameter::MergeFrom(const StartDigitalOutLoop_DigitalOutputParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LabNetProt.Client.StartDigitalOutLoop.DigitalOutputParameter)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_id()) {
    _internal_mutable_id()->::LabNetProt::PinId::MergeFrom(from._internal_id());
  }
  if (from._internal_offset() != 0) {
    _internal_set_offset(from._internal_offset());
  }
  if (from._internal_duration() != 0) {
    _internal_set_duration(from._internal_duration());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StartDigitalOutLoop_DigitalOutputParameter::CopyFrom(const StartDigitalOutLoop_DigitalOutputParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LabNetProt.Client.StartDigitalOutLoop.DigitalOutputParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartDigitalOutLoop_DigitalOutputParameter::IsInitialized() const {
  return true;
}

void StartDigitalOutLoop_DigitalOutputParameter::InternalSwap(StartDigitalOutLoop_DigitalOutputParameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StartDigitalOutLoop_DigitalOutputParameter, duration_)
      + sizeof(StartDigitalOutLoop_DigitalOutputParameter::duration_)
      - PROTOBUF_FIELD_OFFSET(StartDigitalOutLoop_DigitalOutputParameter, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StartDigitalOutLoop_DigitalOutputParameter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_LabNetClient_2eproto_getter, &descriptor_table_LabNetClient_2eproto_once,
      file_level_metadata_LabNetClient_2eproto[14]);
}

// ===================================================================

class StartDigitalOutLoop::_Internal {
 public:
};

StartDigitalOutLoop::StartDigitalOutLoop(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  digital_outputs_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:LabNetProt.Client.StartDigitalOutLoop)
}
StartDigitalOutLoop::StartDigitalOutLoop(const StartDigitalOutLoop& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      digital_outputs_(from.digital_outputs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  loop_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_loop_name().empty()) {
    loop_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_loop_name(), 
      GetArenaForAllocation());
  }
  loop_pause_ = from.loop_pause_;
  // @@protoc_insertion_point(copy_constructor:LabNetProt.Client.StartDigitalOutLoop)
}

void StartDigitalOutLoop::SharedCtor() {
loop_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
loop_pause_ = 0u;
}

StartDigitalOutLoop::~StartDigitalOutLoop() {
  // @@protoc_insertion_point(destructor:LabNetProt.Client.StartDigitalOutLoop)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StartDigitalOutLoop::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  loop_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StartDigitalOutLoop::ArenaDtor(void* object) {
  StartDigitalOutLoop* _this = reinterpret_cast< StartDigitalOutLoop* >(object);
  (void)_this;
}
void StartDigitalOutLoop::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StartDigitalOutLoop::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StartDigitalOutLoop::Clear() {
// @@protoc_insertion_point(message_clear_start:LabNetProt.Client.StartDigitalOutLoop)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  digital_outputs_.Clear();
  loop_name_.ClearToEmpty();
  loop_pause_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StartDigitalOutLoop::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string loop_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_loop_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "LabNetProt.Client.StartDigitalOutLoop.loop_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 loop_pause = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          loop_pause_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .LabNetProt.Client.StartDigitalOutLoop.DigitalOutputParameter digital_outputs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_digital_outputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StartDigitalOutLoop::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LabNetProt.Client.StartDigitalOutLoop)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string loop_name = 1;
  if (!this->_internal_loop_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_loop_name().data(), static_cast<int>(this->_internal_loop_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "LabNetProt.Client.StartDigitalOutLoop.loop_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_loop_name(), target);
  }

  // uint32 loop_pause = 2;
  if (this->_internal_loop_pause() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_loop_pause(), target);
  }

  // repeated .LabNetProt.Client.StartDigitalOutLoop.DigitalOutputParameter digital_outputs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_digital_outputs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_digital_outputs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LabNetProt.Client.StartDigitalOutLoop)
  return target;
}

size_t StartDigitalOutLoop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LabNetProt.Client.StartDigitalOutLoop)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .LabNetProt.Client.StartDigitalOutLoop.DigitalOutputParameter digital_outputs = 3;
  total_size += 1UL * this->_internal_digital_outputs_size();
  for (const auto& msg : this->digital_outputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string loop_name = 1;
  if (!this->_internal_loop_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_loop_name());
  }

  // uint32 loop_pause = 2;
  if (this->_internal_loop_pause() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_loop_pause());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StartDigitalOutLoop::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StartDigitalOutLoop::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StartDigitalOutLoop::GetClassData() const { return &_class_data_; }

void StartDigitalOutLoop::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StartDigitalOutLoop *>(to)->MergeFrom(
      static_cast<const StartDigitalOutLoop &>(from));
}


void StartDigitalOutLoop::MergeFrom(const StartDigitalOutLoop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LabNetProt.Client.StartDigitalOutLoop)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  digital_outputs_.MergeFrom(from.digital_outputs_);
  if (!from._internal_loop_name().empty()) {
    _internal_set_loop_name(from._internal_loop_name());
  }
  if (from._internal_loop_pause() != 0) {
    _internal_set_loop_pause(from._internal_loop_pause());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StartDigitalOutLoop::CopyFrom(const StartDigitalOutLoop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LabNetProt.Client.StartDigitalOutLoop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartDigitalOutLoop::IsInitialized() const {
  return true;
}

void StartDigitalOutLoop::InternalSwap(StartDigitalOutLoop* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  digital_outputs_.InternalSwap(&other->digital_outputs_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &loop_name_, lhs_arena,
      &other->loop_name_, rhs_arena
  );
  swap(loop_pause_, other->loop_pause_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StartDigitalOutLoop::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_LabNetClient_2eproto_getter, &descriptor_table_LabNetClient_2eproto_once,
      file_level_metadata_LabNetClient_2eproto[15]);
}

// ===================================================================

class StopDigitalOutLoop::_Internal {
 public:
};

StopDigitalOutLoop::StopDigitalOutLoop(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:LabNetProt.Client.StopDigitalOutLoop)
}
StopDigitalOutLoop::StopDigitalOutLoop(const StopDigitalOutLoop& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  loop_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_loop_name().empty()) {
    loop_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_loop_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:LabNetProt.Client.StopDigitalOutLoop)
}

void StopDigitalOutLoop::SharedCtor() {
loop_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

StopDigitalOutLoop::~StopDigitalOutLoop() {
  // @@protoc_insertion_point(destructor:LabNetProt.Client.StopDigitalOutLoop)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StopDigitalOutLoop::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  loop_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StopDigitalOutLoop::ArenaDtor(void* object) {
  StopDigitalOutLoop* _this = reinterpret_cast< StopDigitalOutLoop* >(object);
  (void)_this;
}
void StopDigitalOutLoop::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StopDigitalOutLoop::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StopDigitalOutLoop::Clear() {
// @@protoc_insertion_point(message_clear_start:LabNetProt.Client.StopDigitalOutLoop)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  loop_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StopDigitalOutLoop::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string loop_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_loop_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "LabNetProt.Client.StopDigitalOutLoop.loop_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StopDigitalOutLoop::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LabNetProt.Client.StopDigitalOutLoop)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string loop_name = 1;
  if (!this->_internal_loop_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_loop_name().data(), static_cast<int>(this->_internal_loop_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "LabNetProt.Client.StopDigitalOutLoop.loop_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_loop_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LabNetProt.Client.StopDigitalOutLoop)
  return target;
}

size_t StopDigitalOutLoop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LabNetProt.Client.StopDigitalOutLoop)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string loop_name = 1;
  if (!this->_internal_loop_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_loop_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StopDigitalOutLoop::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StopDigitalOutLoop::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StopDigitalOutLoop::GetClassData() const { return &_class_data_; }

void StopDigitalOutLoop::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StopDigitalOutLoop *>(to)->MergeFrom(
      static_cast<const StopDigitalOutLoop &>(from));
}


void StopDigitalOutLoop::MergeFrom(const StopDigitalOutLoop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LabNetProt.Client.StopDigitalOutLoop)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_loop_name().empty()) {
    _internal_set_loop_name(from._internal_loop_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StopDigitalOutLoop::CopyFrom(const StopDigitalOutLoop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LabNetProt.Client.StopDigitalOutLoop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopDigitalOutLoop::IsInitialized() const {
  return true;
}

void StopDigitalOutLoop::InternalSwap(StopDigitalOutLoop* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &loop_name_, lhs_arena,
      &other->loop_name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata StopDigitalOutLoop::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_LabNetClient_2eproto_getter, &descriptor_table_LabNetClient_2eproto_once,
      file_level_metadata_LabNetClient_2eproto[16]);
}

// ===================================================================

class LabNetResetRequest::_Internal {
 public:
};

LabNetResetRequest::LabNetResetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:LabNetProt.Client.LabNetResetRequest)
}
LabNetResetRequest::LabNetResetRequest(const LabNetResetRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:LabNetProt.Client.LabNetResetRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LabNetResetRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LabNetResetRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata LabNetResetRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_LabNetClient_2eproto_getter, &descriptor_table_LabNetClient_2eproto_once,
      file_level_metadata_LabNetClient_2eproto[17]);
}

// ===================================================================

class LabNetIdRequest::_Internal {
 public:
};

LabNetIdRequest::LabNetIdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:LabNetProt.Client.LabNetIdRequest)
}
LabNetIdRequest::LabNetIdRequest(const LabNetIdRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:LabNetProt.Client.LabNetIdRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LabNetIdRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LabNetIdRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata LabNetIdRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_LabNetClient_2eproto_getter, &descriptor_table_LabNetClient_2eproto_once,
      file_level_metadata_LabNetClient_2eproto[18]);
}

// ===================================================================

class InitSound::_Internal {
 public:
};

InitSound::InitSound(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:LabNetProt.Client.InitSound)
}
InitSound::InitSound(const InitSound& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:LabNetProt.Client.InitSound)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InitSound::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InitSound::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata InitSound::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_LabNetClient_2eproto_getter, &descriptor_table_LabNetClient_2eproto_once,
      file_level_metadata_LabNetClient_2eproto[19]);
}

// ===================================================================

class InitSoundSignal::_Internal {
 public:
};

InitSoundSignal::InitSoundSignal(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:LabNetProt.Client.InitSoundSignal)
}
InitSoundSignal::InitSoundSignal(const InitSoundSignal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&signal_type_, &from.signal_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&volume_) -
    reinterpret_cast<char*>(&signal_type_)) + sizeof(volume_));
  // @@protoc_insertion_point(copy_constructor:LabNetProt.Client.InitSoundSignal)
}

void InitSoundSignal::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&signal_type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&volume_) -
    reinterpret_cast<char*>(&signal_type_)) + sizeof(volume_));
}

InitSoundSignal::~InitSoundSignal() {
  // @@protoc_insertion_point(destructor:LabNetProt.Client.InitSoundSignal)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void InitSoundSignal::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void InitSoundSignal::ArenaDtor(void* object) {
  InitSoundSignal* _this = reinterpret_cast< InitSoundSignal* >(object);
  (void)_this;
}
void InitSoundSignal::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InitSoundSignal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InitSoundSignal::Clear() {
// @@protoc_insertion_point(message_clear_start:LabNetProt.Client.InitSoundSignal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&signal_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&volume_) -
      reinterpret_cast<char*>(&signal_type_)) + sizeof(volume_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InitSoundSignal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .LabNetProt.Client.SoundSignalType signal_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_signal_type(static_cast<::LabNetProt::Client::SoundSignalType>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 frequency = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          frequency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 frequency_end = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          frequency_end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float sweep_length_seconds = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          sweep_length_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float volume = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          volume_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InitSoundSignal::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LabNetProt.Client.InitSoundSignal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .LabNetProt.Client.SoundSignalType signal_type = 1;
  if (this->_internal_signal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_signal_type(), target);
  }

  // uint32 id = 2;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_id(), target);
  }

  // uint32 frequency = 3;
  if (this->_internal_frequency() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_frequency(), target);
  }

  // uint32 frequency_end = 4;
  if (this->_internal_frequency_end() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_frequency_end(), target);
  }

  // float sweep_length_seconds = 5;
  if (!(this->_internal_sweep_length_seconds() <= 0 && this->_internal_sweep_length_seconds() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_sweep_length_seconds(), target);
  }

  // float volume = 6;
  if (!(this->_internal_volume() <= 0 && this->_internal_volume() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_volume(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LabNetProt.Client.InitSoundSignal)
  return target;
}

size_t InitSoundSignal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LabNetProt.Client.InitSoundSignal)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .LabNetProt.Client.SoundSignalType signal_type = 1;
  if (this->_internal_signal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_signal_type());
  }

  // uint32 id = 2;
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  // uint32 frequency = 3;
  if (this->_internal_frequency() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_frequency());
  }

  // uint32 frequency_end = 4;
  if (this->_internal_frequency_end() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_frequency_end());
  }

  // float sweep_length_seconds = 5;
  if (!(this->_internal_sweep_length_seconds() <= 0 && this->_internal_sweep_length_seconds() >= 0)) {
    total_size += 1 + 4;
  }

  // float volume = 6;
  if (!(this->_internal_volume() <= 0 && this->_internal_volume() >= 0)) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InitSoundSignal::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InitSoundSignal::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InitSoundSignal::GetClassData() const { return &_class_data_; }

void InitSoundSignal::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InitSoundSignal *>(to)->MergeFrom(
      static_cast<const InitSoundSignal &>(from));
}


void InitSoundSignal::MergeFrom(const InitSoundSignal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LabNetProt.Client.InitSoundSignal)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_signal_type() != 0) {
    _internal_set_signal_type(from._internal_signal_type());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_frequency() != 0) {
    _internal_set_frequency(from._internal_frequency());
  }
  if (from._internal_frequency_end() != 0) {
    _internal_set_frequency_end(from._internal_frequency_end());
  }
  if (!(from._internal_sweep_length_seconds() <= 0 && from._internal_sweep_length_seconds() >= 0)) {
    _internal_set_sweep_length_seconds(from._internal_sweep_length_seconds());
  }
  if (!(from._internal_volume() <= 0 && from._internal_volume() >= 0)) {
    _internal_set_volume(from._internal_volume());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InitSoundSignal::CopyFrom(const InitSoundSignal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LabNetProt.Client.InitSoundSignal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitSoundSignal::IsInitialized() const {
  return true;
}

void InitSoundSignal::InternalSwap(InitSoundSignal* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InitSoundSignal, volume_)
      + sizeof(InitSoundSignal::volume_)
      - PROTOBUF_FIELD_OFFSET(InitSoundSignal, signal_type_)>(
          reinterpret_cast<char*>(&signal_type_),
          reinterpret_cast<char*>(&other->signal_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InitSoundSignal::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_LabNetClient_2eproto_getter, &descriptor_table_LabNetClient_2eproto_once,
      file_level_metadata_LabNetClient_2eproto[20]);
}

// ===================================================================

class ChiBioInit::_Internal {
 public:
};

ChiBioInit::ChiBioInit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:LabNetProt.Client.ChiBioInit)
}
ChiBioInit::ChiBioInit(const ChiBioInit& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:LabNetProt.Client.ChiBioInit)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChiBioInit::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChiBioInit::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ChiBioInit::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_LabNetClient_2eproto_getter, &descriptor_table_LabNetClient_2eproto_once,
      file_level_metadata_LabNetClient_2eproto[21]);
}

// ===================================================================

class MoveChiBioPump::_Internal {
 public:
};

MoveChiBioPump::MoveChiBioPump(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:LabNetProt.Client.MoveChiBioPump)
}
MoveChiBioPump::MoveChiBioPump(const MoveChiBioPump& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&pump_id_, &from.pump_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&move_) -
    reinterpret_cast<char*>(&pump_id_)) + sizeof(move_));
  // @@protoc_insertion_point(copy_constructor:LabNetProt.Client.MoveChiBioPump)
}

void MoveChiBioPump::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pump_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&move_) -
    reinterpret_cast<char*>(&pump_id_)) + sizeof(move_));
}

MoveChiBioPump::~MoveChiBioPump() {
  // @@protoc_insertion_point(destructor:LabNetProt.Client.MoveChiBioPump)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MoveChiBioPump::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MoveChiBioPump::ArenaDtor(void* object) {
  MoveChiBioPump* _this = reinterpret_cast< MoveChiBioPump* >(object);
  (void)_this;
}
void MoveChiBioPump::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MoveChiBioPump::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MoveChiBioPump::Clear() {
// @@protoc_insertion_point(message_clear_start:LabNetProt.Client.MoveChiBioPump)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&pump_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&move_) -
      reinterpret_cast<char*>(&pump_id_)) + sizeof(move_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MoveChiBioPump::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 pump_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          pump_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 move = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          move_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MoveChiBioPump::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LabNetProt.Client.MoveChiBioPump)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pump_id = 1;
  if (this->_internal_pump_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pump_id(), target);
  }

  // int32 move = 2;
  if (this->_internal_move() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_move(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LabNetProt.Client.MoveChiBioPump)
  return target;
}

size_t MoveChiBioPump::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LabNetProt.Client.MoveChiBioPump)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 pump_id = 1;
  if (this->_internal_pump_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_pump_id());
  }

  // int32 move = 2;
  if (this->_internal_move() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_move());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MoveChiBioPump::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MoveChiBioPump::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MoveChiBioPump::GetClassData() const { return &_class_data_; }

void MoveChiBioPump::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MoveChiBioPump *>(to)->MergeFrom(
      static_cast<const MoveChiBioPump &>(from));
}


void MoveChiBioPump::MergeFrom(const MoveChiBioPump& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LabNetProt.Client.MoveChiBioPump)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_pump_id() != 0) {
    _internal_set_pump_id(from._internal_pump_id());
  }
  if (from._internal_move() != 0) {
    _internal_set_move(from._internal_move());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MoveChiBioPump::CopyFrom(const MoveChiBioPump& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LabNetProt.Client.MoveChiBioPump)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveChiBioPump::IsInitialized() const {
  return true;
}

void MoveChiBioPump::InternalSwap(MoveChiBioPump* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MoveChiBioPump, move_)
      + sizeof(MoveChiBioPump::move_)
      - PROTOBUF_FIELD_OFFSET(MoveChiBioPump, pump_id_)>(
          reinterpret_cast<char*>(&pump_id_),
          reinterpret_cast<char*>(&other->pump_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MoveChiBioPump::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_LabNetClient_2eproto_getter, &descriptor_table_LabNetClient_2eproto_once,
      file_level_metadata_LabNetClient_2eproto[22]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Client
}  // namespace LabNetProt
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::LabNetProt::Client::IoBoardInit* Arena::CreateMaybeMessage< ::LabNetProt::Client::IoBoardInit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LabNetProt::Client::IoBoardInit >(arena);
}
template<> PROTOBUF_NOINLINE ::LabNetProt::Client::IoBoardInitDigitalIn* Arena::CreateMaybeMessage< ::LabNetProt::Client::IoBoardInitDigitalIn >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LabNetProt::Client::IoBoardInitDigitalIn >(arena);
}
template<> PROTOBUF_NOINLINE ::LabNetProt::Client::IoBoardInitDigitalOut* Arena::CreateMaybeMessage< ::LabNetProt::Client::IoBoardInitDigitalOut >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LabNetProt::Client::IoBoardInitDigitalOut >(arena);
}
template<> PROTOBUF_NOINLINE ::LabNetProt::Client::RfidBoardInit* Arena::CreateMaybeMessage< ::LabNetProt::Client::RfidBoardInit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LabNetProt::Client::RfidBoardInit >(arena);
}
template<> PROTOBUF_NOINLINE ::LabNetProt::Client::RfidBoardSetPhaseMatrix* Arena::CreateMaybeMessage< ::LabNetProt::Client::RfidBoardSetPhaseMatrix >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LabNetProt::Client::RfidBoardSetPhaseMatrix >(arena);
}
template<> PROTOBUF_NOINLINE ::LabNetProt::Client::UartInit* Arena::CreateMaybeMessage< ::LabNetProt::Client::UartInit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LabNetProt::Client::UartInit >(arena);
}
template<> PROTOBUF_NOINLINE ::LabNetProt::Client::UartWriteData* Arena::CreateMaybeMessage< ::LabNetProt::Client::UartWriteData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LabNetProt::Client::UartWriteData >(arena);
}
template<> PROTOBUF_NOINLINE ::LabNetProt::Client::UartInitDigitalIn* Arena::CreateMaybeMessage< ::LabNetProt::Client::UartInitDigitalIn >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LabNetProt::Client::UartInitDigitalIn >(arena);
}
template<> PROTOBUF_NOINLINE ::LabNetProt::Client::UartInitDigitalOut* Arena::CreateMaybeMessage< ::LabNetProt::Client::UartInitDigitalOut >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LabNetProt::Client::UartInitDigitalOut >(arena);
}
template<> PROTOBUF_NOINLINE ::LabNetProt::Client::GpioWiringPiInit* Arena::CreateMaybeMessage< ::LabNetProt::Client::GpioWiringPiInit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LabNetProt::Client::GpioWiringPiInit >(arena);
}
template<> PROTOBUF_NOINLINE ::LabNetProt::Client::GpioWiringPiInitDigitalIn* Arena::CreateMaybeMessage< ::LabNetProt::Client::GpioWiringPiInitDigitalIn >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LabNetProt::Client::GpioWiringPiInitDigitalIn >(arena);
}
template<> PROTOBUF_NOINLINE ::LabNetProt::Client::GpioWiringPiInitDigitalOut* Arena::CreateMaybeMessage< ::LabNetProt::Client::GpioWiringPiInitDigitalOut >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LabNetProt::Client::GpioWiringPiInitDigitalOut >(arena);
}
template<> PROTOBUF_NOINLINE ::LabNetProt::Client::DigitalOutSet* Arena::CreateMaybeMessage< ::LabNetProt::Client::DigitalOutSet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LabNetProt::Client::DigitalOutSet >(arena);
}
template<> PROTOBUF_NOINLINE ::LabNetProt::Client::DigitalOutPulse* Arena::CreateMaybeMessage< ::LabNetProt::Client::DigitalOutPulse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LabNetProt::Client::DigitalOutPulse >(arena);
}
template<> PROTOBUF_NOINLINE ::LabNetProt::Client::StartDigitalOutLoop_DigitalOutputParameter* Arena::CreateMaybeMessage< ::LabNetProt::Client::StartDigitalOutLoop_DigitalOutputParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LabNetProt::Client::StartDigitalOutLoop_DigitalOutputParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::LabNetProt::Client::StartDigitalOutLoop* Arena::CreateMaybeMessage< ::LabNetProt::Client::StartDigitalOutLoop >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LabNetProt::Client::StartDigitalOutLoop >(arena);
}
template<> PROTOBUF_NOINLINE ::LabNetProt::Client::StopDigitalOutLoop* Arena::CreateMaybeMessage< ::LabNetProt::Client::StopDigitalOutLoop >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LabNetProt::Client::StopDigitalOutLoop >(arena);
}
template<> PROTOBUF_NOINLINE ::LabNetProt::Client::LabNetResetRequest* Arena::CreateMaybeMessage< ::LabNetProt::Client::LabNetResetRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LabNetProt::Client::LabNetResetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::LabNetProt::Client::LabNetIdRequest* Arena::CreateMaybeMessage< ::LabNetProt::Client::LabNetIdRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LabNetProt::Client::LabNetIdRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::LabNetProt::Client::InitSound* Arena::CreateMaybeMessage< ::LabNetProt::Client::InitSound >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LabNetProt::Client::InitSound >(arena);
}
template<> PROTOBUF_NOINLINE ::LabNetProt::Client::InitSoundSignal* Arena::CreateMaybeMessage< ::LabNetProt::Client::InitSoundSignal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LabNetProt::Client::InitSoundSignal >(arena);
}
template<> PROTOBUF_NOINLINE ::LabNetProt::Client::ChiBioInit* Arena::CreateMaybeMessage< ::LabNetProt::Client::ChiBioInit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LabNetProt::Client::ChiBioInit >(arena);
}
template<> PROTOBUF_NOINLINE ::LabNetProt::Client::MoveChiBioPump* Arena::CreateMaybeMessage< ::LabNetProt::Client::MoveChiBioPump >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LabNetProt::Client::MoveChiBioPump >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
