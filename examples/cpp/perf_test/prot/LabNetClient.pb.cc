// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LabNetClient.proto

#include "LabNetClient.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_LabNetClient_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StartDigitalOutLoop_DigitalOutputParameter_LabNetClient_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LabNet_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PinId_LabNet_2eproto;
namespace LabNetProt {
namespace Client {
class IoBoardInitDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IoBoardInit> _instance;
} _IoBoardInit_default_instance_;
class IoBoardInitDigitalInDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IoBoardInitDigitalIn> _instance;
} _IoBoardInitDigitalIn_default_instance_;
class IoBoardInitDigitalOutDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IoBoardInitDigitalOut> _instance;
} _IoBoardInitDigitalOut_default_instance_;
class RfidBoardInitDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RfidBoardInit> _instance;
} _RfidBoardInit_default_instance_;
class RfidBoardSetPhaseMatrixDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RfidBoardSetPhaseMatrix> _instance;
} _RfidBoardSetPhaseMatrix_default_instance_;
class UartInitDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UartInit> _instance;
} _UartInit_default_instance_;
class UartWriteDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UartWriteData> _instance;
} _UartWriteData_default_instance_;
class UartInitDigitalInDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UartInitDigitalIn> _instance;
} _UartInitDigitalIn_default_instance_;
class UartInitDigitalOutDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UartInitDigitalOut> _instance;
} _UartInitDigitalOut_default_instance_;
class GpioWiringPiInitDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GpioWiringPiInit> _instance;
} _GpioWiringPiInit_default_instance_;
class GpioWiringPiInitDigitalInDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GpioWiringPiInitDigitalIn> _instance;
} _GpioWiringPiInitDigitalIn_default_instance_;
class GpioWiringPiInitDigitalOutDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GpioWiringPiInitDigitalOut> _instance;
} _GpioWiringPiInitDigitalOut_default_instance_;
class DigitalOutSetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DigitalOutSet> _instance;
} _DigitalOutSet_default_instance_;
class DigitalOutPulseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DigitalOutPulse> _instance;
} _DigitalOutPulse_default_instance_;
class StartDigitalOutLoop_DigitalOutputParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StartDigitalOutLoop_DigitalOutputParameter> _instance;
} _StartDigitalOutLoop_DigitalOutputParameter_default_instance_;
class StartDigitalOutLoopDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StartDigitalOutLoop> _instance;
} _StartDigitalOutLoop_default_instance_;
class StopDigitalOutLoopDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StopDigitalOutLoop> _instance;
} _StopDigitalOutLoop_default_instance_;
class LabNetResetRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LabNetResetRequest> _instance;
} _LabNetResetRequest_default_instance_;
class LabNetIdRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LabNetIdRequest> _instance;
} _LabNetIdRequest_default_instance_;
class InitSoundDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InitSound> _instance;
} _InitSound_default_instance_;
class InitSoundSignalDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InitSoundSignal> _instance;
} _InitSoundSignal_default_instance_;
}  // namespace Client
}  // namespace LabNetProt
static void InitDefaultsscc_info_DigitalOutPulse_LabNetClient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LabNetProt::Client::_DigitalOutPulse_default_instance_;
    new (ptr) ::LabNetProt::Client::DigitalOutPulse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DigitalOutPulse_LabNetClient_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DigitalOutPulse_LabNetClient_2eproto}, {
      &scc_info_PinId_LabNet_2eproto.base,}};

static void InitDefaultsscc_info_DigitalOutSet_LabNetClient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LabNetProt::Client::_DigitalOutSet_default_instance_;
    new (ptr) ::LabNetProt::Client::DigitalOutSet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DigitalOutSet_LabNetClient_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DigitalOutSet_LabNetClient_2eproto}, {
      &scc_info_PinId_LabNet_2eproto.base,}};

static void InitDefaultsscc_info_GpioWiringPiInit_LabNetClient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LabNetProt::Client::_GpioWiringPiInit_default_instance_;
    new (ptr) ::LabNetProt::Client::GpioWiringPiInit();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GpioWiringPiInit_LabNetClient_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GpioWiringPiInit_LabNetClient_2eproto}, {}};

static void InitDefaultsscc_info_GpioWiringPiInitDigitalIn_LabNetClient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LabNetProt::Client::_GpioWiringPiInitDigitalIn_default_instance_;
    new (ptr) ::LabNetProt::Client::GpioWiringPiInitDigitalIn();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GpioWiringPiInitDigitalIn_LabNetClient_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GpioWiringPiInitDigitalIn_LabNetClient_2eproto}, {}};

static void InitDefaultsscc_info_GpioWiringPiInitDigitalOut_LabNetClient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LabNetProt::Client::_GpioWiringPiInitDigitalOut_default_instance_;
    new (ptr) ::LabNetProt::Client::GpioWiringPiInitDigitalOut();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GpioWiringPiInitDigitalOut_LabNetClient_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GpioWiringPiInitDigitalOut_LabNetClient_2eproto}, {}};

static void InitDefaultsscc_info_InitSound_LabNetClient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LabNetProt::Client::_InitSound_default_instance_;
    new (ptr) ::LabNetProt::Client::InitSound();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InitSound_LabNetClient_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_InitSound_LabNetClient_2eproto}, {}};

static void InitDefaultsscc_info_InitSoundSignal_LabNetClient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LabNetProt::Client::_InitSoundSignal_default_instance_;
    new (ptr) ::LabNetProt::Client::InitSoundSignal();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InitSoundSignal_LabNetClient_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_InitSoundSignal_LabNetClient_2eproto}, {}};

static void InitDefaultsscc_info_IoBoardInit_LabNetClient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LabNetProt::Client::_IoBoardInit_default_instance_;
    new (ptr) ::LabNetProt::Client::IoBoardInit();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IoBoardInit_LabNetClient_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IoBoardInit_LabNetClient_2eproto}, {}};

static void InitDefaultsscc_info_IoBoardInitDigitalIn_LabNetClient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LabNetProt::Client::_IoBoardInitDigitalIn_default_instance_;
    new (ptr) ::LabNetProt::Client::IoBoardInitDigitalIn();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IoBoardInitDigitalIn_LabNetClient_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IoBoardInitDigitalIn_LabNetClient_2eproto}, {}};

static void InitDefaultsscc_info_IoBoardInitDigitalOut_LabNetClient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LabNetProt::Client::_IoBoardInitDigitalOut_default_instance_;
    new (ptr) ::LabNetProt::Client::IoBoardInitDigitalOut();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IoBoardInitDigitalOut_LabNetClient_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IoBoardInitDigitalOut_LabNetClient_2eproto}, {}};

static void InitDefaultsscc_info_LabNetIdRequest_LabNetClient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LabNetProt::Client::_LabNetIdRequest_default_instance_;
    new (ptr) ::LabNetProt::Client::LabNetIdRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LabNetIdRequest_LabNetClient_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LabNetIdRequest_LabNetClient_2eproto}, {}};

static void InitDefaultsscc_info_LabNetResetRequest_LabNetClient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LabNetProt::Client::_LabNetResetRequest_default_instance_;
    new (ptr) ::LabNetProt::Client::LabNetResetRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LabNetResetRequest_LabNetClient_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LabNetResetRequest_LabNetClient_2eproto}, {}};

static void InitDefaultsscc_info_RfidBoardInit_LabNetClient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LabNetProt::Client::_RfidBoardInit_default_instance_;
    new (ptr) ::LabNetProt::Client::RfidBoardInit();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RfidBoardInit_LabNetClient_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RfidBoardInit_LabNetClient_2eproto}, {}};

static void InitDefaultsscc_info_RfidBoardSetPhaseMatrix_LabNetClient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LabNetProt::Client::_RfidBoardSetPhaseMatrix_default_instance_;
    new (ptr) ::LabNetProt::Client::RfidBoardSetPhaseMatrix();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RfidBoardSetPhaseMatrix_LabNetClient_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RfidBoardSetPhaseMatrix_LabNetClient_2eproto}, {}};

static void InitDefaultsscc_info_StartDigitalOutLoop_LabNetClient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LabNetProt::Client::_StartDigitalOutLoop_default_instance_;
    new (ptr) ::LabNetProt::Client::StartDigitalOutLoop();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StartDigitalOutLoop_LabNetClient_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_StartDigitalOutLoop_LabNetClient_2eproto}, {
      &scc_info_StartDigitalOutLoop_DigitalOutputParameter_LabNetClient_2eproto.base,}};

static void InitDefaultsscc_info_StartDigitalOutLoop_DigitalOutputParameter_LabNetClient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LabNetProt::Client::_StartDigitalOutLoop_DigitalOutputParameter_default_instance_;
    new (ptr) ::LabNetProt::Client::StartDigitalOutLoop_DigitalOutputParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StartDigitalOutLoop_DigitalOutputParameter_LabNetClient_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_StartDigitalOutLoop_DigitalOutputParameter_LabNetClient_2eproto}, {
      &scc_info_PinId_LabNet_2eproto.base,}};

static void InitDefaultsscc_info_StopDigitalOutLoop_LabNetClient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LabNetProt::Client::_StopDigitalOutLoop_default_instance_;
    new (ptr) ::LabNetProt::Client::StopDigitalOutLoop();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StopDigitalOutLoop_LabNetClient_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StopDigitalOutLoop_LabNetClient_2eproto}, {}};

static void InitDefaultsscc_info_UartInit_LabNetClient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LabNetProt::Client::_UartInit_default_instance_;
    new (ptr) ::LabNetProt::Client::UartInit();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UartInit_LabNetClient_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UartInit_LabNetClient_2eproto}, {}};

static void InitDefaultsscc_info_UartInitDigitalIn_LabNetClient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LabNetProt::Client::_UartInitDigitalIn_default_instance_;
    new (ptr) ::LabNetProt::Client::UartInitDigitalIn();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UartInitDigitalIn_LabNetClient_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UartInitDigitalIn_LabNetClient_2eproto}, {}};

static void InitDefaultsscc_info_UartInitDigitalOut_LabNetClient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LabNetProt::Client::_UartInitDigitalOut_default_instance_;
    new (ptr) ::LabNetProt::Client::UartInitDigitalOut();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UartInitDigitalOut_LabNetClient_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UartInitDigitalOut_LabNetClient_2eproto}, {}};

static void InitDefaultsscc_info_UartWriteData_LabNetClient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LabNetProt::Client::_UartWriteData_default_instance_;
    new (ptr) ::LabNetProt::Client::UartWriteData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UartWriteData_LabNetClient_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UartWriteData_LabNetClient_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_LabNetClient_2eproto[21];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_LabNetClient_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_LabNetClient_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_LabNetClient_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::IoBoardInit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::IoBoardInitDigitalIn, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::IoBoardInitDigitalIn, pin_),
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::IoBoardInitDigitalIn, resistor_state_),
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::IoBoardInitDigitalIn, is_inverted_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::IoBoardInitDigitalOut, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::IoBoardInitDigitalOut, pin_),
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::IoBoardInitDigitalOut, is_inverted_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::RfidBoardInit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::RfidBoardInit, antenna_phase1_),
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::RfidBoardInit, antenna_phase2_),
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::RfidBoardInit, phase_duration_),
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::RfidBoardInit, inverted_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::RfidBoardSetPhaseMatrix, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::RfidBoardSetPhaseMatrix, antenna_phase1_),
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::RfidBoardSetPhaseMatrix, antenna_phase2_),
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::RfidBoardSetPhaseMatrix, phase_duration_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::UartInit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::UartInit, port_),
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::UartInit, baud_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::UartWriteData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::UartWriteData, port_),
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::UartWriteData, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::UartInitDigitalIn, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::UartInitDigitalIn, port_),
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::UartInitDigitalIn, pin_),
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::UartInitDigitalIn, is_inverted_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::UartInitDigitalOut, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::UartInitDigitalOut, port_),
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::UartInitDigitalOut, pin_),
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::UartInitDigitalOut, is_inverted_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::GpioWiringPiInit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::GpioWiringPiInitDigitalIn, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::GpioWiringPiInitDigitalIn, pin_),
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::GpioWiringPiInitDigitalIn, resistor_state_),
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::GpioWiringPiInitDigitalIn, is_inverted_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::GpioWiringPiInitDigitalOut, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::GpioWiringPiInitDigitalOut, pin_),
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::GpioWiringPiInitDigitalOut, is_inverted_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::DigitalOutSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::DigitalOutSet, id_),
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::DigitalOutSet, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::DigitalOutPulse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::DigitalOutPulse, id_),
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::DigitalOutPulse, high_duration_),
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::DigitalOutPulse, low_duration_),
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::DigitalOutPulse, pulses_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::StartDigitalOutLoop_DigitalOutputParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::StartDigitalOutLoop_DigitalOutputParameter, id_),
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::StartDigitalOutLoop_DigitalOutputParameter, offset_),
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::StartDigitalOutLoop_DigitalOutputParameter, duration_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::StartDigitalOutLoop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::StartDigitalOutLoop, loop_name_),
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::StartDigitalOutLoop, loop_pause_),
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::StartDigitalOutLoop, digital_outputs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::StopDigitalOutLoop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::StopDigitalOutLoop, loop_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::LabNetResetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::LabNetIdRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::InitSound, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::InitSoundSignal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::InitSoundSignal, signal_type_),
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::InitSoundSignal, id_),
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::InitSoundSignal, frequency_),
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::InitSoundSignal, frequency_end_),
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::InitSoundSignal, sweep_length_seconds_),
  PROTOBUF_FIELD_OFFSET(::LabNetProt::Client::InitSoundSignal, volume_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::LabNetProt::Client::IoBoardInit)},
  { 5, -1, sizeof(::LabNetProt::Client::IoBoardInitDigitalIn)},
  { 13, -1, sizeof(::LabNetProt::Client::IoBoardInitDigitalOut)},
  { 20, -1, sizeof(::LabNetProt::Client::RfidBoardInit)},
  { 29, -1, sizeof(::LabNetProt::Client::RfidBoardSetPhaseMatrix)},
  { 37, -1, sizeof(::LabNetProt::Client::UartInit)},
  { 44, -1, sizeof(::LabNetProt::Client::UartWriteData)},
  { 51, -1, sizeof(::LabNetProt::Client::UartInitDigitalIn)},
  { 59, -1, sizeof(::LabNetProt::Client::UartInitDigitalOut)},
  { 67, -1, sizeof(::LabNetProt::Client::GpioWiringPiInit)},
  { 72, -1, sizeof(::LabNetProt::Client::GpioWiringPiInitDigitalIn)},
  { 80, -1, sizeof(::LabNetProt::Client::GpioWiringPiInitDigitalOut)},
  { 87, -1, sizeof(::LabNetProt::Client::DigitalOutSet)},
  { 94, -1, sizeof(::LabNetProt::Client::DigitalOutPulse)},
  { 103, -1, sizeof(::LabNetProt::Client::StartDigitalOutLoop_DigitalOutputParameter)},
  { 111, -1, sizeof(::LabNetProt::Client::StartDigitalOutLoop)},
  { 119, -1, sizeof(::LabNetProt::Client::StopDigitalOutLoop)},
  { 125, -1, sizeof(::LabNetProt::Client::LabNetResetRequest)},
  { 130, -1, sizeof(::LabNetProt::Client::LabNetIdRequest)},
  { 135, -1, sizeof(::LabNetProt::Client::InitSound)},
  { 140, -1, sizeof(::LabNetProt::Client::InitSoundSignal)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LabNetProt::Client::_IoBoardInit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LabNetProt::Client::_IoBoardInitDigitalIn_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LabNetProt::Client::_IoBoardInitDigitalOut_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LabNetProt::Client::_RfidBoardInit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LabNetProt::Client::_RfidBoardSetPhaseMatrix_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LabNetProt::Client::_UartInit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LabNetProt::Client::_UartWriteData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LabNetProt::Client::_UartInitDigitalIn_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LabNetProt::Client::_UartInitDigitalOut_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LabNetProt::Client::_GpioWiringPiInit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LabNetProt::Client::_GpioWiringPiInitDigitalIn_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LabNetProt::Client::_GpioWiringPiInitDigitalOut_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LabNetProt::Client::_DigitalOutSet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LabNetProt::Client::_DigitalOutPulse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LabNetProt::Client::_StartDigitalOutLoop_DigitalOutputParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LabNetProt::Client::_StartDigitalOutLoop_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LabNetProt::Client::_StopDigitalOutLoop_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LabNetProt::Client::_LabNetResetRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LabNetProt::Client::_LabNetIdRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LabNetProt::Client::_InitSound_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::LabNetProt::Client::_InitSoundSignal_default_instance_),
};

const char descriptor_table_protodef_LabNetClient_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022LabNetClient.proto\022\021LabNetProt.Client\032"
  "\014LabNet.proto\"\r\n\013IoBoardInit\"\263\001\n\024IoBoard"
  "InitDigitalIn\022\013\n\003pin\030\001 \001(\r\022H\n\016resistor_s"
  "tate\030\002 \001(\01620.LabNetProt.Client.IoBoardIn"
  "itDigitalIn.Resistor\022\023\n\013is_inverted\030\003 \001("
  "\010\"/\n\010Resistor\022\007\n\003OFF\020\000\022\r\n\tPULL_DOWN\020\001\022\013\n"
  "\007PULL_UP\020\002\"9\n\025IoBoardInitDigitalOut\022\013\n\003p"
  "in\030\001 \001(\r\022\023\n\013is_inverted\030\002 \001(\010\"i\n\rRfidBoa"
  "rdInit\022\026\n\016antenna_phase1\030\001 \001(\r\022\026\n\016antenn"
  "a_phase2\030\002 \001(\r\022\026\n\016phase_duration\030\003 \001(\r\022\020"
  "\n\010inverted\030\004 \001(\010\"a\n\027RfidBoardSetPhaseMat"
  "rix\022\026\n\016antenna_phase1\030\001 \001(\r\022\026\n\016antenna_p"
  "hase2\030\002 \001(\r\022\026\n\016phase_duration\030\003 \001(\r\"9\n\010U"
  "artInit\022\037\n\004port\030\001 \001(\0162\021.LabNetProt.Uarts"
  "\022\014\n\004baud\030\002 \001(\r\">\n\rUartWriteData\022\037\n\004port\030"
  "\001 \001(\0162\021.LabNetProt.Uarts\022\014\n\004data\030\002 \001(\014\"V"
  "\n\021UartInitDigitalIn\022\037\n\004port\030\001 \001(\0162\021.LabN"
  "etProt.Uarts\022\013\n\003pin\030\002 \001(\r\022\023\n\013is_inverted"
  "\030\003 \001(\010\"W\n\022UartInitDigitalOut\022\037\n\004port\030\001 \001"
  "(\0162\021.LabNetProt.Uarts\022\013\n\003pin\030\002 \001(\r\022\023\n\013is"
  "_inverted\030\003 \001(\010\"\022\n\020GpioWiringPiInit\"\275\001\n\031"
  "GpioWiringPiInitDigitalIn\022\013\n\003pin\030\001 \001(\r\022M"
  "\n\016resistor_state\030\002 \001(\01625.LabNetProt.Clie"
  "nt.GpioWiringPiInitDigitalIn.Resistor\022\023\n"
  "\013is_inverted\030\003 \001(\010\"/\n\010Resistor\022\007\n\003OFF\020\000\022"
  "\r\n\tPULL_DOWN\020\001\022\013\n\007PULL_UP\020\002\">\n\032GpioWirin"
  "gPiInitDigitalOut\022\013\n\003pin\030\001 \001(\r\022\023\n\013is_inv"
  "erted\030\002 \001(\010\"=\n\rDigitalOutSet\022\035\n\002id\030\001 \001(\013"
  "2\021.LabNetProt.PinId\022\r\n\005state\030\002 \001(\010\"m\n\017Di"
  "gitalOutPulse\022\035\n\002id\030\001 \001(\0132\021.LabNetProt.P"
  "inId\022\025\n\rhigh_duration\030\002 \001(\r\022\024\n\014low_durat"
  "ion\030\003 \001(\r\022\016\n\006pulses\030\004 \001(\r\"\357\001\n\023StartDigit"
  "alOutLoop\022\021\n\tloop_name\030\001 \001(\t\022\022\n\nloop_pau"
  "se\030\002 \001(\r\022V\n\017digital_outputs\030\003 \003(\0132=.LabN"
  "etProt.Client.StartDigitalOutLoop.Digita"
  "lOutputParameter\032Y\n\026DigitalOutputParamet"
  "er\022\035\n\002id\030\001 \001(\0132\021.LabNetProt.PinId\022\016\n\006off"
  "set\030\002 \001(\r\022\020\n\010duration\030\003 \001(\r\"\'\n\022StopDigit"
  "alOutLoop\022\021\n\tloop_name\030\001 \001(\t\"\024\n\022LabNetRe"
  "setRequest\"\021\n\017LabNetIdRequest\"\013\n\tInitSou"
  "nd\"\256\001\n\017InitSoundSignal\0227\n\013signal_type\030\001 "
  "\001(\0162\".LabNetProt.Client.SoundSignalType\022"
  "\n\n\002id\030\002 \001(\r\022\021\n\tfrequency\030\003 \001(\r\022\025\n\rfreque"
  "ncy_end\030\004 \001(\r\022\034\n\024sweep_length_seconds\030\005 "
  "\001(\002\022\016\n\006volume\030\006 \001(\002*\226\004\n\021ClientMessageTyp"
  "e\022\010\n\004NONE\020\000\022\025\n\021LABNET_ID_REQUEST\020\001\022\030\n\024LA"
  "BNET_RESET_REQUEST\020\002\022\021\n\rIO_BOARD_INIT\020\003\022"
  "\034\n\030IO_BOARD_INIT_DIGITAL_IN\020\004\022\035\n\031IO_BOAR"
  "D_INIT_DIGITAL_OUT\020\005\022\023\n\017RFID_BOARD_INIT\020"
  "\006\022\037\n\033RFID_BOARD_SET_PHASE_MATRIX\020\007\022\r\n\tUA"
  "RT_INIT\020\010\022\023\n\017UART_WRITE_DATA\020\t\022\023\n\017DIGITA"
  "L_OUT_SET\020\n\022\025\n\021DIGITAL_OUT_PULSE\020\013\022\032\n\026ST"
  "ART_DIGITAL_OUT_LOOP\020\014\022\031\n\025STOP_DIGITAL_O"
  "UT_LOOP\020\r\022\026\n\022GPIO_WIRINGPI_INIT\020\016\022!\n\035GPI"
  "O_WIRINGPI_INIT_DIGITAL_IN\020\017\022\"\n\036GPIO_WIR"
  "INGPI_INIT_DIGITAL_OUT\020\020\022\016\n\nINIT_SOUND\020\021"
  "\022\025\n\021INIT_SOUND_SIGNAL\020\022\022\030\n\024UART_INIT_DIG"
  "ITAL_IN\020\023\022\031\n\025UART_INIT_DIGITAL_OUT\020\024*\204\001\n"
  "\017SoundSignalType\022\r\n\tSINE_WAVE\020\000\022\017\n\013SQUAR"
  "E_WAVE\020\001\022\021\n\rTRIANGLE_WAVE\020\002\022\022\n\016SAW_TOOTH"
  "_WAVE\020\003\022\017\n\013WHITE_NOISE\020\004\022\016\n\nPINK_NOISE\020\005"
  "\022\t\n\005SWEEP\020\006b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_LabNetClient_2eproto_deps[1] = {
  &::descriptor_table_LabNet_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_LabNetClient_2eproto_sccs[21] = {
  &scc_info_DigitalOutPulse_LabNetClient_2eproto.base,
  &scc_info_DigitalOutSet_LabNetClient_2eproto.base,
  &scc_info_GpioWiringPiInit_LabNetClient_2eproto.base,
  &scc_info_GpioWiringPiInitDigitalIn_LabNetClient_2eproto.base,
  &scc_info_GpioWiringPiInitDigitalOut_LabNetClient_2eproto.base,
  &scc_info_InitSound_LabNetClient_2eproto.base,
  &scc_info_InitSoundSignal_LabNetClient_2eproto.base,
  &scc_info_IoBoardInit_LabNetClient_2eproto.base,
  &scc_info_IoBoardInitDigitalIn_LabNetClient_2eproto.base,
  &scc_info_IoBoardInitDigitalOut_LabNetClient_2eproto.base,
  &scc_info_LabNetIdRequest_LabNetClient_2eproto.base,
  &scc_info_LabNetResetRequest_LabNetClient_2eproto.base,
  &scc_info_RfidBoardInit_LabNetClient_2eproto.base,
  &scc_info_RfidBoardSetPhaseMatrix_LabNetClient_2eproto.base,
  &scc_info_StartDigitalOutLoop_LabNetClient_2eproto.base,
  &scc_info_StartDigitalOutLoop_DigitalOutputParameter_LabNetClient_2eproto.base,
  &scc_info_StopDigitalOutLoop_LabNetClient_2eproto.base,
  &scc_info_UartInit_LabNetClient_2eproto.base,
  &scc_info_UartInitDigitalIn_LabNetClient_2eproto.base,
  &scc_info_UartInitDigitalOut_LabNetClient_2eproto.base,
  &scc_info_UartWriteData_LabNetClient_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_LabNetClient_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_LabNetClient_2eproto = {
  false, false, descriptor_table_protodef_LabNetClient_2eproto, "LabNetClient.proto", 2459,
  &descriptor_table_LabNetClient_2eproto_once, descriptor_table_LabNetClient_2eproto_sccs, descriptor_table_LabNetClient_2eproto_deps, 21, 1,
  schemas, file_default_instances, TableStruct_LabNetClient_2eproto::offsets,
  file_level_metadata_LabNetClient_2eproto, 21, file_level_enum_descriptors_LabNetClient_2eproto, file_level_service_descriptors_LabNetClient_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_LabNetClient_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_LabNetClient_2eproto)), true);
namespace LabNetProt {
namespace Client {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IoBoardInitDigitalIn_Resistor_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_LabNetClient_2eproto);
  return file_level_enum_descriptors_LabNetClient_2eproto[0];
}
bool IoBoardInitDigitalIn_Resistor_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr IoBoardInitDigitalIn_Resistor IoBoardInitDigitalIn::OFF;
constexpr IoBoardInitDigitalIn_Resistor IoBoardInitDigitalIn::PULL_DOWN;
constexpr IoBoardInitDigitalIn_Resistor IoBoardInitDigitalIn::PULL_UP;
constexpr IoBoardInitDigitalIn_Resistor IoBoardInitDigitalIn::Resistor_MIN;
constexpr IoBoardInitDigitalIn_Resistor IoBoardInitDigitalIn::Resistor_MAX;
constexpr int IoBoardInitDigitalIn::Resistor_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GpioWiringPiInitDigitalIn_Resistor_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_LabNetClient_2eproto);
  return file_level_enum_descriptors_LabNetClient_2eproto[1];
}
bool GpioWiringPiInitDigitalIn_Resistor_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr GpioWiringPiInitDigitalIn_Resistor GpioWiringPiInitDigitalIn::OFF;
constexpr GpioWiringPiInitDigitalIn_Resistor GpioWiringPiInitDigitalIn::PULL_DOWN;
constexpr GpioWiringPiInitDigitalIn_Resistor GpioWiringPiInitDigitalIn::PULL_UP;
constexpr GpioWiringPiInitDigitalIn_Resistor GpioWiringPiInitDigitalIn::Resistor_MIN;
constexpr GpioWiringPiInitDigitalIn_Resistor GpioWiringPiInitDigitalIn::Resistor_MAX;
constexpr int GpioWiringPiInitDigitalIn::Resistor_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClientMessageType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_LabNetClient_2eproto);
  return file_level_enum_descriptors_LabNetClient_2eproto[2];
}
bool ClientMessageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SoundSignalType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_LabNetClient_2eproto);
  return file_level_enum_descriptors_LabNetClient_2eproto[3];
}
bool SoundSignalType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class IoBoardInit::_Internal {
 public:
};

IoBoardInit::IoBoardInit(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LabNetProt.Client.IoBoardInit)
}
IoBoardInit::IoBoardInit(const IoBoardInit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:LabNetProt.Client.IoBoardInit)
}

void IoBoardInit::SharedCtor() {
}

IoBoardInit::~IoBoardInit() {
  // @@protoc_insertion_point(destructor:LabNetProt.Client.IoBoardInit)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IoBoardInit::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void IoBoardInit::ArenaDtor(void* object) {
  IoBoardInit* _this = reinterpret_cast< IoBoardInit* >(object);
  (void)_this;
}
void IoBoardInit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IoBoardInit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IoBoardInit& IoBoardInit::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IoBoardInit_LabNetClient_2eproto.base);
  return *internal_default_instance();
}


void IoBoardInit::Clear() {
// @@protoc_insertion_point(message_clear_start:LabNetProt.Client.IoBoardInit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IoBoardInit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IoBoardInit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LabNetProt.Client.IoBoardInit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LabNetProt.Client.IoBoardInit)
  return target;
}

size_t IoBoardInit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LabNetProt.Client.IoBoardInit)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IoBoardInit::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LabNetProt.Client.IoBoardInit)
  GOOGLE_DCHECK_NE(&from, this);
  const IoBoardInit* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IoBoardInit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LabNetProt.Client.IoBoardInit)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LabNetProt.Client.IoBoardInit)
    MergeFrom(*source);
  }
}

void IoBoardInit::MergeFrom(const IoBoardInit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LabNetProt.Client.IoBoardInit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void IoBoardInit::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LabNetProt.Client.IoBoardInit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IoBoardInit::CopyFrom(const IoBoardInit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LabNetProt.Client.IoBoardInit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IoBoardInit::IsInitialized() const {
  return true;
}

void IoBoardInit::InternalSwap(IoBoardInit* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IoBoardInit::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class IoBoardInitDigitalIn::_Internal {
 public:
};

IoBoardInitDigitalIn::IoBoardInitDigitalIn(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LabNetProt.Client.IoBoardInitDigitalIn)
}
IoBoardInitDigitalIn::IoBoardInitDigitalIn(const IoBoardInitDigitalIn& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&pin_, &from.pin_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_inverted_) -
    reinterpret_cast<char*>(&pin_)) + sizeof(is_inverted_));
  // @@protoc_insertion_point(copy_constructor:LabNetProt.Client.IoBoardInitDigitalIn)
}

void IoBoardInitDigitalIn::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&pin_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&is_inverted_) -
      reinterpret_cast<char*>(&pin_)) + sizeof(is_inverted_));
}

IoBoardInitDigitalIn::~IoBoardInitDigitalIn() {
  // @@protoc_insertion_point(destructor:LabNetProt.Client.IoBoardInitDigitalIn)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IoBoardInitDigitalIn::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void IoBoardInitDigitalIn::ArenaDtor(void* object) {
  IoBoardInitDigitalIn* _this = reinterpret_cast< IoBoardInitDigitalIn* >(object);
  (void)_this;
}
void IoBoardInitDigitalIn::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IoBoardInitDigitalIn::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IoBoardInitDigitalIn& IoBoardInitDigitalIn::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IoBoardInitDigitalIn_LabNetClient_2eproto.base);
  return *internal_default_instance();
}


void IoBoardInitDigitalIn::Clear() {
// @@protoc_insertion_point(message_clear_start:LabNetProt.Client.IoBoardInitDigitalIn)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&pin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_inverted_) -
      reinterpret_cast<char*>(&pin_)) + sizeof(is_inverted_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IoBoardInitDigitalIn::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 pin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          pin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .LabNetProt.Client.IoBoardInitDigitalIn.Resistor resistor_state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_resistor_state(static_cast<::LabNetProt::Client::IoBoardInitDigitalIn_Resistor>(val));
        } else goto handle_unusual;
        continue;
      // bool is_inverted = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          is_inverted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IoBoardInitDigitalIn::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LabNetProt.Client.IoBoardInitDigitalIn)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pin = 1;
  if (this->pin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pin(), target);
  }

  // .LabNetProt.Client.IoBoardInitDigitalIn.Resistor resistor_state = 2;
  if (this->resistor_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_resistor_state(), target);
  }

  // bool is_inverted = 3;
  if (this->is_inverted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_inverted(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LabNetProt.Client.IoBoardInitDigitalIn)
  return target;
}

size_t IoBoardInitDigitalIn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LabNetProt.Client.IoBoardInitDigitalIn)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 pin = 1;
  if (this->pin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pin());
  }

  // .LabNetProt.Client.IoBoardInitDigitalIn.Resistor resistor_state = 2;
  if (this->resistor_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_resistor_state());
  }

  // bool is_inverted = 3;
  if (this->is_inverted() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IoBoardInitDigitalIn::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LabNetProt.Client.IoBoardInitDigitalIn)
  GOOGLE_DCHECK_NE(&from, this);
  const IoBoardInitDigitalIn* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IoBoardInitDigitalIn>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LabNetProt.Client.IoBoardInitDigitalIn)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LabNetProt.Client.IoBoardInitDigitalIn)
    MergeFrom(*source);
  }
}

void IoBoardInitDigitalIn::MergeFrom(const IoBoardInitDigitalIn& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LabNetProt.Client.IoBoardInitDigitalIn)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pin() != 0) {
    _internal_set_pin(from._internal_pin());
  }
  if (from.resistor_state() != 0) {
    _internal_set_resistor_state(from._internal_resistor_state());
  }
  if (from.is_inverted() != 0) {
    _internal_set_is_inverted(from._internal_is_inverted());
  }
}

void IoBoardInitDigitalIn::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LabNetProt.Client.IoBoardInitDigitalIn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IoBoardInitDigitalIn::CopyFrom(const IoBoardInitDigitalIn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LabNetProt.Client.IoBoardInitDigitalIn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IoBoardInitDigitalIn::IsInitialized() const {
  return true;
}

void IoBoardInitDigitalIn::InternalSwap(IoBoardInitDigitalIn* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IoBoardInitDigitalIn, is_inverted_)
      + sizeof(IoBoardInitDigitalIn::is_inverted_)
      - PROTOBUF_FIELD_OFFSET(IoBoardInitDigitalIn, pin_)>(
          reinterpret_cast<char*>(&pin_),
          reinterpret_cast<char*>(&other->pin_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IoBoardInitDigitalIn::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class IoBoardInitDigitalOut::_Internal {
 public:
};

IoBoardInitDigitalOut::IoBoardInitDigitalOut(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LabNetProt.Client.IoBoardInitDigitalOut)
}
IoBoardInitDigitalOut::IoBoardInitDigitalOut(const IoBoardInitDigitalOut& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&pin_, &from.pin_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_inverted_) -
    reinterpret_cast<char*>(&pin_)) + sizeof(is_inverted_));
  // @@protoc_insertion_point(copy_constructor:LabNetProt.Client.IoBoardInitDigitalOut)
}

void IoBoardInitDigitalOut::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&pin_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&is_inverted_) -
      reinterpret_cast<char*>(&pin_)) + sizeof(is_inverted_));
}

IoBoardInitDigitalOut::~IoBoardInitDigitalOut() {
  // @@protoc_insertion_point(destructor:LabNetProt.Client.IoBoardInitDigitalOut)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IoBoardInitDigitalOut::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void IoBoardInitDigitalOut::ArenaDtor(void* object) {
  IoBoardInitDigitalOut* _this = reinterpret_cast< IoBoardInitDigitalOut* >(object);
  (void)_this;
}
void IoBoardInitDigitalOut::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IoBoardInitDigitalOut::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IoBoardInitDigitalOut& IoBoardInitDigitalOut::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IoBoardInitDigitalOut_LabNetClient_2eproto.base);
  return *internal_default_instance();
}


void IoBoardInitDigitalOut::Clear() {
// @@protoc_insertion_point(message_clear_start:LabNetProt.Client.IoBoardInitDigitalOut)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&pin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_inverted_) -
      reinterpret_cast<char*>(&pin_)) + sizeof(is_inverted_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IoBoardInitDigitalOut::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 pin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          pin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_inverted = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          is_inverted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IoBoardInitDigitalOut::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LabNetProt.Client.IoBoardInitDigitalOut)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pin = 1;
  if (this->pin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pin(), target);
  }

  // bool is_inverted = 2;
  if (this->is_inverted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_inverted(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LabNetProt.Client.IoBoardInitDigitalOut)
  return target;
}

size_t IoBoardInitDigitalOut::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LabNetProt.Client.IoBoardInitDigitalOut)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 pin = 1;
  if (this->pin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pin());
  }

  // bool is_inverted = 2;
  if (this->is_inverted() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IoBoardInitDigitalOut::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LabNetProt.Client.IoBoardInitDigitalOut)
  GOOGLE_DCHECK_NE(&from, this);
  const IoBoardInitDigitalOut* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IoBoardInitDigitalOut>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LabNetProt.Client.IoBoardInitDigitalOut)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LabNetProt.Client.IoBoardInitDigitalOut)
    MergeFrom(*source);
  }
}

void IoBoardInitDigitalOut::MergeFrom(const IoBoardInitDigitalOut& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LabNetProt.Client.IoBoardInitDigitalOut)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pin() != 0) {
    _internal_set_pin(from._internal_pin());
  }
  if (from.is_inverted() != 0) {
    _internal_set_is_inverted(from._internal_is_inverted());
  }
}

void IoBoardInitDigitalOut::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LabNetProt.Client.IoBoardInitDigitalOut)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IoBoardInitDigitalOut::CopyFrom(const IoBoardInitDigitalOut& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LabNetProt.Client.IoBoardInitDigitalOut)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IoBoardInitDigitalOut::IsInitialized() const {
  return true;
}

void IoBoardInitDigitalOut::InternalSwap(IoBoardInitDigitalOut* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IoBoardInitDigitalOut, is_inverted_)
      + sizeof(IoBoardInitDigitalOut::is_inverted_)
      - PROTOBUF_FIELD_OFFSET(IoBoardInitDigitalOut, pin_)>(
          reinterpret_cast<char*>(&pin_),
          reinterpret_cast<char*>(&other->pin_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IoBoardInitDigitalOut::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RfidBoardInit::_Internal {
 public:
};

RfidBoardInit::RfidBoardInit(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LabNetProt.Client.RfidBoardInit)
}
RfidBoardInit::RfidBoardInit(const RfidBoardInit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&antenna_phase1_, &from.antenna_phase1_,
    static_cast<size_t>(reinterpret_cast<char*>(&inverted_) -
    reinterpret_cast<char*>(&antenna_phase1_)) + sizeof(inverted_));
  // @@protoc_insertion_point(copy_constructor:LabNetProt.Client.RfidBoardInit)
}

void RfidBoardInit::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&antenna_phase1_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&inverted_) -
      reinterpret_cast<char*>(&antenna_phase1_)) + sizeof(inverted_));
}

RfidBoardInit::~RfidBoardInit() {
  // @@protoc_insertion_point(destructor:LabNetProt.Client.RfidBoardInit)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RfidBoardInit::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RfidBoardInit::ArenaDtor(void* object) {
  RfidBoardInit* _this = reinterpret_cast< RfidBoardInit* >(object);
  (void)_this;
}
void RfidBoardInit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RfidBoardInit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RfidBoardInit& RfidBoardInit::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RfidBoardInit_LabNetClient_2eproto.base);
  return *internal_default_instance();
}


void RfidBoardInit::Clear() {
// @@protoc_insertion_point(message_clear_start:LabNetProt.Client.RfidBoardInit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&antenna_phase1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&inverted_) -
      reinterpret_cast<char*>(&antenna_phase1_)) + sizeof(inverted_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RfidBoardInit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 antenna_phase1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          antenna_phase1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 antenna_phase2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          antenna_phase2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 phase_duration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          phase_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool inverted = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          inverted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RfidBoardInit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LabNetProt.Client.RfidBoardInit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 antenna_phase1 = 1;
  if (this->antenna_phase1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_antenna_phase1(), target);
  }

  // uint32 antenna_phase2 = 2;
  if (this->antenna_phase2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_antenna_phase2(), target);
  }

  // uint32 phase_duration = 3;
  if (this->phase_duration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_phase_duration(), target);
  }

  // bool inverted = 4;
  if (this->inverted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_inverted(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LabNetProt.Client.RfidBoardInit)
  return target;
}

size_t RfidBoardInit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LabNetProt.Client.RfidBoardInit)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 antenna_phase1 = 1;
  if (this->antenna_phase1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_antenna_phase1());
  }

  // uint32 antenna_phase2 = 2;
  if (this->antenna_phase2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_antenna_phase2());
  }

  // uint32 phase_duration = 3;
  if (this->phase_duration() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_phase_duration());
  }

  // bool inverted = 4;
  if (this->inverted() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RfidBoardInit::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LabNetProt.Client.RfidBoardInit)
  GOOGLE_DCHECK_NE(&from, this);
  const RfidBoardInit* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RfidBoardInit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LabNetProt.Client.RfidBoardInit)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LabNetProt.Client.RfidBoardInit)
    MergeFrom(*source);
  }
}

void RfidBoardInit::MergeFrom(const RfidBoardInit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LabNetProt.Client.RfidBoardInit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.antenna_phase1() != 0) {
    _internal_set_antenna_phase1(from._internal_antenna_phase1());
  }
  if (from.antenna_phase2() != 0) {
    _internal_set_antenna_phase2(from._internal_antenna_phase2());
  }
  if (from.phase_duration() != 0) {
    _internal_set_phase_duration(from._internal_phase_duration());
  }
  if (from.inverted() != 0) {
    _internal_set_inverted(from._internal_inverted());
  }
}

void RfidBoardInit::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LabNetProt.Client.RfidBoardInit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RfidBoardInit::CopyFrom(const RfidBoardInit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LabNetProt.Client.RfidBoardInit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RfidBoardInit::IsInitialized() const {
  return true;
}

void RfidBoardInit::InternalSwap(RfidBoardInit* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RfidBoardInit, inverted_)
      + sizeof(RfidBoardInit::inverted_)
      - PROTOBUF_FIELD_OFFSET(RfidBoardInit, antenna_phase1_)>(
          reinterpret_cast<char*>(&antenna_phase1_),
          reinterpret_cast<char*>(&other->antenna_phase1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RfidBoardInit::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RfidBoardSetPhaseMatrix::_Internal {
 public:
};

RfidBoardSetPhaseMatrix::RfidBoardSetPhaseMatrix(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LabNetProt.Client.RfidBoardSetPhaseMatrix)
}
RfidBoardSetPhaseMatrix::RfidBoardSetPhaseMatrix(const RfidBoardSetPhaseMatrix& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&antenna_phase1_, &from.antenna_phase1_,
    static_cast<size_t>(reinterpret_cast<char*>(&phase_duration_) -
    reinterpret_cast<char*>(&antenna_phase1_)) + sizeof(phase_duration_));
  // @@protoc_insertion_point(copy_constructor:LabNetProt.Client.RfidBoardSetPhaseMatrix)
}

void RfidBoardSetPhaseMatrix::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&antenna_phase1_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&phase_duration_) -
      reinterpret_cast<char*>(&antenna_phase1_)) + sizeof(phase_duration_));
}

RfidBoardSetPhaseMatrix::~RfidBoardSetPhaseMatrix() {
  // @@protoc_insertion_point(destructor:LabNetProt.Client.RfidBoardSetPhaseMatrix)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RfidBoardSetPhaseMatrix::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RfidBoardSetPhaseMatrix::ArenaDtor(void* object) {
  RfidBoardSetPhaseMatrix* _this = reinterpret_cast< RfidBoardSetPhaseMatrix* >(object);
  (void)_this;
}
void RfidBoardSetPhaseMatrix::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RfidBoardSetPhaseMatrix::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RfidBoardSetPhaseMatrix& RfidBoardSetPhaseMatrix::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RfidBoardSetPhaseMatrix_LabNetClient_2eproto.base);
  return *internal_default_instance();
}


void RfidBoardSetPhaseMatrix::Clear() {
// @@protoc_insertion_point(message_clear_start:LabNetProt.Client.RfidBoardSetPhaseMatrix)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&antenna_phase1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&phase_duration_) -
      reinterpret_cast<char*>(&antenna_phase1_)) + sizeof(phase_duration_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RfidBoardSetPhaseMatrix::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 antenna_phase1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          antenna_phase1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 antenna_phase2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          antenna_phase2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 phase_duration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          phase_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RfidBoardSetPhaseMatrix::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LabNetProt.Client.RfidBoardSetPhaseMatrix)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 antenna_phase1 = 1;
  if (this->antenna_phase1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_antenna_phase1(), target);
  }

  // uint32 antenna_phase2 = 2;
  if (this->antenna_phase2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_antenna_phase2(), target);
  }

  // uint32 phase_duration = 3;
  if (this->phase_duration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_phase_duration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LabNetProt.Client.RfidBoardSetPhaseMatrix)
  return target;
}

size_t RfidBoardSetPhaseMatrix::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LabNetProt.Client.RfidBoardSetPhaseMatrix)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 antenna_phase1 = 1;
  if (this->antenna_phase1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_antenna_phase1());
  }

  // uint32 antenna_phase2 = 2;
  if (this->antenna_phase2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_antenna_phase2());
  }

  // uint32 phase_duration = 3;
  if (this->phase_duration() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_phase_duration());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RfidBoardSetPhaseMatrix::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LabNetProt.Client.RfidBoardSetPhaseMatrix)
  GOOGLE_DCHECK_NE(&from, this);
  const RfidBoardSetPhaseMatrix* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RfidBoardSetPhaseMatrix>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LabNetProt.Client.RfidBoardSetPhaseMatrix)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LabNetProt.Client.RfidBoardSetPhaseMatrix)
    MergeFrom(*source);
  }
}

void RfidBoardSetPhaseMatrix::MergeFrom(const RfidBoardSetPhaseMatrix& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LabNetProt.Client.RfidBoardSetPhaseMatrix)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.antenna_phase1() != 0) {
    _internal_set_antenna_phase1(from._internal_antenna_phase1());
  }
  if (from.antenna_phase2() != 0) {
    _internal_set_antenna_phase2(from._internal_antenna_phase2());
  }
  if (from.phase_duration() != 0) {
    _internal_set_phase_duration(from._internal_phase_duration());
  }
}

void RfidBoardSetPhaseMatrix::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LabNetProt.Client.RfidBoardSetPhaseMatrix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RfidBoardSetPhaseMatrix::CopyFrom(const RfidBoardSetPhaseMatrix& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LabNetProt.Client.RfidBoardSetPhaseMatrix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RfidBoardSetPhaseMatrix::IsInitialized() const {
  return true;
}

void RfidBoardSetPhaseMatrix::InternalSwap(RfidBoardSetPhaseMatrix* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RfidBoardSetPhaseMatrix, phase_duration_)
      + sizeof(RfidBoardSetPhaseMatrix::phase_duration_)
      - PROTOBUF_FIELD_OFFSET(RfidBoardSetPhaseMatrix, antenna_phase1_)>(
          reinterpret_cast<char*>(&antenna_phase1_),
          reinterpret_cast<char*>(&other->antenna_phase1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RfidBoardSetPhaseMatrix::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class UartInit::_Internal {
 public:
};

UartInit::UartInit(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LabNetProt.Client.UartInit)
}
UartInit::UartInit(const UartInit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&port_, &from.port_,
    static_cast<size_t>(reinterpret_cast<char*>(&baud_) -
    reinterpret_cast<char*>(&port_)) + sizeof(baud_));
  // @@protoc_insertion_point(copy_constructor:LabNetProt.Client.UartInit)
}

void UartInit::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&port_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&baud_) -
      reinterpret_cast<char*>(&port_)) + sizeof(baud_));
}

UartInit::~UartInit() {
  // @@protoc_insertion_point(destructor:LabNetProt.Client.UartInit)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UartInit::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UartInit::ArenaDtor(void* object) {
  UartInit* _this = reinterpret_cast< UartInit* >(object);
  (void)_this;
}
void UartInit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UartInit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UartInit& UartInit::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UartInit_LabNetClient_2eproto.base);
  return *internal_default_instance();
}


void UartInit::Clear() {
// @@protoc_insertion_point(message_clear_start:LabNetProt.Client.UartInit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&baud_) -
      reinterpret_cast<char*>(&port_)) + sizeof(baud_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UartInit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .LabNetProt.Uarts port = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_port(static_cast<::LabNetProt::Uarts>(val));
        } else goto handle_unusual;
        continue;
      // uint32 baud = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          baud_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UartInit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LabNetProt.Client.UartInit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .LabNetProt.Uarts port = 1;
  if (this->port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_port(), target);
  }

  // uint32 baud = 2;
  if (this->baud() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_baud(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LabNetProt.Client.UartInit)
  return target;
}

size_t UartInit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LabNetProt.Client.UartInit)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .LabNetProt.Uarts port = 1;
  if (this->port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_port());
  }

  // uint32 baud = 2;
  if (this->baud() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_baud());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UartInit::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LabNetProt.Client.UartInit)
  GOOGLE_DCHECK_NE(&from, this);
  const UartInit* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UartInit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LabNetProt.Client.UartInit)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LabNetProt.Client.UartInit)
    MergeFrom(*source);
  }
}

void UartInit::MergeFrom(const UartInit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LabNetProt.Client.UartInit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.port() != 0) {
    _internal_set_port(from._internal_port());
  }
  if (from.baud() != 0) {
    _internal_set_baud(from._internal_baud());
  }
}

void UartInit::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LabNetProt.Client.UartInit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UartInit::CopyFrom(const UartInit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LabNetProt.Client.UartInit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UartInit::IsInitialized() const {
  return true;
}

void UartInit::InternalSwap(UartInit* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UartInit, baud_)
      + sizeof(UartInit::baud_)
      - PROTOBUF_FIELD_OFFSET(UartInit, port_)>(
          reinterpret_cast<char*>(&port_),
          reinterpret_cast<char*>(&other->port_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UartInit::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class UartWriteData::_Internal {
 public:
};

UartWriteData::UartWriteData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LabNetProt.Client.UartWriteData)
}
UartWriteData::UartWriteData(const UartWriteData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArena());
  }
  port_ = from.port_;
  // @@protoc_insertion_point(copy_constructor:LabNetProt.Client.UartWriteData)
}

void UartWriteData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UartWriteData_LabNetClient_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  port_ = 0;
}

UartWriteData::~UartWriteData() {
  // @@protoc_insertion_point(destructor:LabNetProt.Client.UartWriteData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UartWriteData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UartWriteData::ArenaDtor(void* object) {
  UartWriteData* _this = reinterpret_cast< UartWriteData* >(object);
  (void)_this;
}
void UartWriteData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UartWriteData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UartWriteData& UartWriteData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UartWriteData_LabNetClient_2eproto.base);
  return *internal_default_instance();
}


void UartWriteData::Clear() {
// @@protoc_insertion_point(message_clear_start:LabNetProt.Client.UartWriteData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmpty();
  port_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UartWriteData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .LabNetProt.Uarts port = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_port(static_cast<::LabNetProt::Uarts>(val));
        } else goto handle_unusual;
        continue;
      // bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UartWriteData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LabNetProt.Client.UartWriteData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .LabNetProt.Uarts port = 1;
  if (this->port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_port(), target);
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LabNetProt.Client.UartWriteData)
  return target;
}

size_t UartWriteData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LabNetProt.Client.UartWriteData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 2;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // .LabNetProt.Uarts port = 1;
  if (this->port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_port());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UartWriteData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LabNetProt.Client.UartWriteData)
  GOOGLE_DCHECK_NE(&from, this);
  const UartWriteData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UartWriteData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LabNetProt.Client.UartWriteData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LabNetProt.Client.UartWriteData)
    MergeFrom(*source);
  }
}

void UartWriteData::MergeFrom(const UartWriteData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LabNetProt.Client.UartWriteData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {
    _internal_set_data(from._internal_data());
  }
  if (from.port() != 0) {
    _internal_set_port(from._internal_port());
  }
}

void UartWriteData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LabNetProt.Client.UartWriteData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UartWriteData::CopyFrom(const UartWriteData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LabNetProt.Client.UartWriteData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UartWriteData::IsInitialized() const {
  return true;
}

void UartWriteData::InternalSwap(UartWriteData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(port_, other->port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UartWriteData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class UartInitDigitalIn::_Internal {
 public:
};

UartInitDigitalIn::UartInitDigitalIn(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LabNetProt.Client.UartInitDigitalIn)
}
UartInitDigitalIn::UartInitDigitalIn(const UartInitDigitalIn& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&port_, &from.port_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_inverted_) -
    reinterpret_cast<char*>(&port_)) + sizeof(is_inverted_));
  // @@protoc_insertion_point(copy_constructor:LabNetProt.Client.UartInitDigitalIn)
}

void UartInitDigitalIn::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&port_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&is_inverted_) -
      reinterpret_cast<char*>(&port_)) + sizeof(is_inverted_));
}

UartInitDigitalIn::~UartInitDigitalIn() {
  // @@protoc_insertion_point(destructor:LabNetProt.Client.UartInitDigitalIn)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UartInitDigitalIn::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UartInitDigitalIn::ArenaDtor(void* object) {
  UartInitDigitalIn* _this = reinterpret_cast< UartInitDigitalIn* >(object);
  (void)_this;
}
void UartInitDigitalIn::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UartInitDigitalIn::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UartInitDigitalIn& UartInitDigitalIn::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UartInitDigitalIn_LabNetClient_2eproto.base);
  return *internal_default_instance();
}


void UartInitDigitalIn::Clear() {
// @@protoc_insertion_point(message_clear_start:LabNetProt.Client.UartInitDigitalIn)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_inverted_) -
      reinterpret_cast<char*>(&port_)) + sizeof(is_inverted_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UartInitDigitalIn::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .LabNetProt.Uarts port = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_port(static_cast<::LabNetProt::Uarts>(val));
        } else goto handle_unusual;
        continue;
      // uint32 pin = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          pin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_inverted = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          is_inverted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UartInitDigitalIn::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LabNetProt.Client.UartInitDigitalIn)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .LabNetProt.Uarts port = 1;
  if (this->port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_port(), target);
  }

  // uint32 pin = 2;
  if (this->pin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_pin(), target);
  }

  // bool is_inverted = 3;
  if (this->is_inverted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_inverted(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LabNetProt.Client.UartInitDigitalIn)
  return target;
}

size_t UartInitDigitalIn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LabNetProt.Client.UartInitDigitalIn)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .LabNetProt.Uarts port = 1;
  if (this->port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_port());
  }

  // uint32 pin = 2;
  if (this->pin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pin());
  }

  // bool is_inverted = 3;
  if (this->is_inverted() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UartInitDigitalIn::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LabNetProt.Client.UartInitDigitalIn)
  GOOGLE_DCHECK_NE(&from, this);
  const UartInitDigitalIn* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UartInitDigitalIn>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LabNetProt.Client.UartInitDigitalIn)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LabNetProt.Client.UartInitDigitalIn)
    MergeFrom(*source);
  }
}

void UartInitDigitalIn::MergeFrom(const UartInitDigitalIn& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LabNetProt.Client.UartInitDigitalIn)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.port() != 0) {
    _internal_set_port(from._internal_port());
  }
  if (from.pin() != 0) {
    _internal_set_pin(from._internal_pin());
  }
  if (from.is_inverted() != 0) {
    _internal_set_is_inverted(from._internal_is_inverted());
  }
}

void UartInitDigitalIn::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LabNetProt.Client.UartInitDigitalIn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UartInitDigitalIn::CopyFrom(const UartInitDigitalIn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LabNetProt.Client.UartInitDigitalIn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UartInitDigitalIn::IsInitialized() const {
  return true;
}

void UartInitDigitalIn::InternalSwap(UartInitDigitalIn* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UartInitDigitalIn, is_inverted_)
      + sizeof(UartInitDigitalIn::is_inverted_)
      - PROTOBUF_FIELD_OFFSET(UartInitDigitalIn, port_)>(
          reinterpret_cast<char*>(&port_),
          reinterpret_cast<char*>(&other->port_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UartInitDigitalIn::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class UartInitDigitalOut::_Internal {
 public:
};

UartInitDigitalOut::UartInitDigitalOut(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LabNetProt.Client.UartInitDigitalOut)
}
UartInitDigitalOut::UartInitDigitalOut(const UartInitDigitalOut& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&port_, &from.port_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_inverted_) -
    reinterpret_cast<char*>(&port_)) + sizeof(is_inverted_));
  // @@protoc_insertion_point(copy_constructor:LabNetProt.Client.UartInitDigitalOut)
}

void UartInitDigitalOut::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&port_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&is_inverted_) -
      reinterpret_cast<char*>(&port_)) + sizeof(is_inverted_));
}

UartInitDigitalOut::~UartInitDigitalOut() {
  // @@protoc_insertion_point(destructor:LabNetProt.Client.UartInitDigitalOut)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UartInitDigitalOut::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UartInitDigitalOut::ArenaDtor(void* object) {
  UartInitDigitalOut* _this = reinterpret_cast< UartInitDigitalOut* >(object);
  (void)_this;
}
void UartInitDigitalOut::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UartInitDigitalOut::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UartInitDigitalOut& UartInitDigitalOut::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UartInitDigitalOut_LabNetClient_2eproto.base);
  return *internal_default_instance();
}


void UartInitDigitalOut::Clear() {
// @@protoc_insertion_point(message_clear_start:LabNetProt.Client.UartInitDigitalOut)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_inverted_) -
      reinterpret_cast<char*>(&port_)) + sizeof(is_inverted_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UartInitDigitalOut::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .LabNetProt.Uarts port = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_port(static_cast<::LabNetProt::Uarts>(val));
        } else goto handle_unusual;
        continue;
      // uint32 pin = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          pin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_inverted = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          is_inverted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UartInitDigitalOut::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LabNetProt.Client.UartInitDigitalOut)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .LabNetProt.Uarts port = 1;
  if (this->port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_port(), target);
  }

  // uint32 pin = 2;
  if (this->pin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_pin(), target);
  }

  // bool is_inverted = 3;
  if (this->is_inverted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_inverted(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LabNetProt.Client.UartInitDigitalOut)
  return target;
}

size_t UartInitDigitalOut::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LabNetProt.Client.UartInitDigitalOut)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .LabNetProt.Uarts port = 1;
  if (this->port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_port());
  }

  // uint32 pin = 2;
  if (this->pin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pin());
  }

  // bool is_inverted = 3;
  if (this->is_inverted() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UartInitDigitalOut::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LabNetProt.Client.UartInitDigitalOut)
  GOOGLE_DCHECK_NE(&from, this);
  const UartInitDigitalOut* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UartInitDigitalOut>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LabNetProt.Client.UartInitDigitalOut)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LabNetProt.Client.UartInitDigitalOut)
    MergeFrom(*source);
  }
}

void UartInitDigitalOut::MergeFrom(const UartInitDigitalOut& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LabNetProt.Client.UartInitDigitalOut)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.port() != 0) {
    _internal_set_port(from._internal_port());
  }
  if (from.pin() != 0) {
    _internal_set_pin(from._internal_pin());
  }
  if (from.is_inverted() != 0) {
    _internal_set_is_inverted(from._internal_is_inverted());
  }
}

void UartInitDigitalOut::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LabNetProt.Client.UartInitDigitalOut)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UartInitDigitalOut::CopyFrom(const UartInitDigitalOut& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LabNetProt.Client.UartInitDigitalOut)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UartInitDigitalOut::IsInitialized() const {
  return true;
}

void UartInitDigitalOut::InternalSwap(UartInitDigitalOut* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UartInitDigitalOut, is_inverted_)
      + sizeof(UartInitDigitalOut::is_inverted_)
      - PROTOBUF_FIELD_OFFSET(UartInitDigitalOut, port_)>(
          reinterpret_cast<char*>(&port_),
          reinterpret_cast<char*>(&other->port_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UartInitDigitalOut::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GpioWiringPiInit::_Internal {
 public:
};

GpioWiringPiInit::GpioWiringPiInit(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LabNetProt.Client.GpioWiringPiInit)
}
GpioWiringPiInit::GpioWiringPiInit(const GpioWiringPiInit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:LabNetProt.Client.GpioWiringPiInit)
}

void GpioWiringPiInit::SharedCtor() {
}

GpioWiringPiInit::~GpioWiringPiInit() {
  // @@protoc_insertion_point(destructor:LabNetProt.Client.GpioWiringPiInit)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GpioWiringPiInit::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GpioWiringPiInit::ArenaDtor(void* object) {
  GpioWiringPiInit* _this = reinterpret_cast< GpioWiringPiInit* >(object);
  (void)_this;
}
void GpioWiringPiInit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GpioWiringPiInit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GpioWiringPiInit& GpioWiringPiInit::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GpioWiringPiInit_LabNetClient_2eproto.base);
  return *internal_default_instance();
}


void GpioWiringPiInit::Clear() {
// @@protoc_insertion_point(message_clear_start:LabNetProt.Client.GpioWiringPiInit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GpioWiringPiInit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GpioWiringPiInit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LabNetProt.Client.GpioWiringPiInit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LabNetProt.Client.GpioWiringPiInit)
  return target;
}

size_t GpioWiringPiInit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LabNetProt.Client.GpioWiringPiInit)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GpioWiringPiInit::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LabNetProt.Client.GpioWiringPiInit)
  GOOGLE_DCHECK_NE(&from, this);
  const GpioWiringPiInit* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GpioWiringPiInit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LabNetProt.Client.GpioWiringPiInit)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LabNetProt.Client.GpioWiringPiInit)
    MergeFrom(*source);
  }
}

void GpioWiringPiInit::MergeFrom(const GpioWiringPiInit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LabNetProt.Client.GpioWiringPiInit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GpioWiringPiInit::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LabNetProt.Client.GpioWiringPiInit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GpioWiringPiInit::CopyFrom(const GpioWiringPiInit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LabNetProt.Client.GpioWiringPiInit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GpioWiringPiInit::IsInitialized() const {
  return true;
}

void GpioWiringPiInit::InternalSwap(GpioWiringPiInit* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GpioWiringPiInit::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GpioWiringPiInitDigitalIn::_Internal {
 public:
};

GpioWiringPiInitDigitalIn::GpioWiringPiInitDigitalIn(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LabNetProt.Client.GpioWiringPiInitDigitalIn)
}
GpioWiringPiInitDigitalIn::GpioWiringPiInitDigitalIn(const GpioWiringPiInitDigitalIn& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&pin_, &from.pin_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_inverted_) -
    reinterpret_cast<char*>(&pin_)) + sizeof(is_inverted_));
  // @@protoc_insertion_point(copy_constructor:LabNetProt.Client.GpioWiringPiInitDigitalIn)
}

void GpioWiringPiInitDigitalIn::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&pin_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&is_inverted_) -
      reinterpret_cast<char*>(&pin_)) + sizeof(is_inverted_));
}

GpioWiringPiInitDigitalIn::~GpioWiringPiInitDigitalIn() {
  // @@protoc_insertion_point(destructor:LabNetProt.Client.GpioWiringPiInitDigitalIn)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GpioWiringPiInitDigitalIn::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GpioWiringPiInitDigitalIn::ArenaDtor(void* object) {
  GpioWiringPiInitDigitalIn* _this = reinterpret_cast< GpioWiringPiInitDigitalIn* >(object);
  (void)_this;
}
void GpioWiringPiInitDigitalIn::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GpioWiringPiInitDigitalIn::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GpioWiringPiInitDigitalIn& GpioWiringPiInitDigitalIn::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GpioWiringPiInitDigitalIn_LabNetClient_2eproto.base);
  return *internal_default_instance();
}


void GpioWiringPiInitDigitalIn::Clear() {
// @@protoc_insertion_point(message_clear_start:LabNetProt.Client.GpioWiringPiInitDigitalIn)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&pin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_inverted_) -
      reinterpret_cast<char*>(&pin_)) + sizeof(is_inverted_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GpioWiringPiInitDigitalIn::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 pin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          pin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .LabNetProt.Client.GpioWiringPiInitDigitalIn.Resistor resistor_state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_resistor_state(static_cast<::LabNetProt::Client::GpioWiringPiInitDigitalIn_Resistor>(val));
        } else goto handle_unusual;
        continue;
      // bool is_inverted = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          is_inverted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GpioWiringPiInitDigitalIn::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LabNetProt.Client.GpioWiringPiInitDigitalIn)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pin = 1;
  if (this->pin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pin(), target);
  }

  // .LabNetProt.Client.GpioWiringPiInitDigitalIn.Resistor resistor_state = 2;
  if (this->resistor_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_resistor_state(), target);
  }

  // bool is_inverted = 3;
  if (this->is_inverted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_inverted(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LabNetProt.Client.GpioWiringPiInitDigitalIn)
  return target;
}

size_t GpioWiringPiInitDigitalIn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LabNetProt.Client.GpioWiringPiInitDigitalIn)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 pin = 1;
  if (this->pin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pin());
  }

  // .LabNetProt.Client.GpioWiringPiInitDigitalIn.Resistor resistor_state = 2;
  if (this->resistor_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_resistor_state());
  }

  // bool is_inverted = 3;
  if (this->is_inverted() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GpioWiringPiInitDigitalIn::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LabNetProt.Client.GpioWiringPiInitDigitalIn)
  GOOGLE_DCHECK_NE(&from, this);
  const GpioWiringPiInitDigitalIn* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GpioWiringPiInitDigitalIn>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LabNetProt.Client.GpioWiringPiInitDigitalIn)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LabNetProt.Client.GpioWiringPiInitDigitalIn)
    MergeFrom(*source);
  }
}

void GpioWiringPiInitDigitalIn::MergeFrom(const GpioWiringPiInitDigitalIn& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LabNetProt.Client.GpioWiringPiInitDigitalIn)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pin() != 0) {
    _internal_set_pin(from._internal_pin());
  }
  if (from.resistor_state() != 0) {
    _internal_set_resistor_state(from._internal_resistor_state());
  }
  if (from.is_inverted() != 0) {
    _internal_set_is_inverted(from._internal_is_inverted());
  }
}

void GpioWiringPiInitDigitalIn::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LabNetProt.Client.GpioWiringPiInitDigitalIn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GpioWiringPiInitDigitalIn::CopyFrom(const GpioWiringPiInitDigitalIn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LabNetProt.Client.GpioWiringPiInitDigitalIn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GpioWiringPiInitDigitalIn::IsInitialized() const {
  return true;
}

void GpioWiringPiInitDigitalIn::InternalSwap(GpioWiringPiInitDigitalIn* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GpioWiringPiInitDigitalIn, is_inverted_)
      + sizeof(GpioWiringPiInitDigitalIn::is_inverted_)
      - PROTOBUF_FIELD_OFFSET(GpioWiringPiInitDigitalIn, pin_)>(
          reinterpret_cast<char*>(&pin_),
          reinterpret_cast<char*>(&other->pin_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GpioWiringPiInitDigitalIn::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GpioWiringPiInitDigitalOut::_Internal {
 public:
};

GpioWiringPiInitDigitalOut::GpioWiringPiInitDigitalOut(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LabNetProt.Client.GpioWiringPiInitDigitalOut)
}
GpioWiringPiInitDigitalOut::GpioWiringPiInitDigitalOut(const GpioWiringPiInitDigitalOut& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&pin_, &from.pin_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_inverted_) -
    reinterpret_cast<char*>(&pin_)) + sizeof(is_inverted_));
  // @@protoc_insertion_point(copy_constructor:LabNetProt.Client.GpioWiringPiInitDigitalOut)
}

void GpioWiringPiInitDigitalOut::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&pin_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&is_inverted_) -
      reinterpret_cast<char*>(&pin_)) + sizeof(is_inverted_));
}

GpioWiringPiInitDigitalOut::~GpioWiringPiInitDigitalOut() {
  // @@protoc_insertion_point(destructor:LabNetProt.Client.GpioWiringPiInitDigitalOut)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GpioWiringPiInitDigitalOut::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GpioWiringPiInitDigitalOut::ArenaDtor(void* object) {
  GpioWiringPiInitDigitalOut* _this = reinterpret_cast< GpioWiringPiInitDigitalOut* >(object);
  (void)_this;
}
void GpioWiringPiInitDigitalOut::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GpioWiringPiInitDigitalOut::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GpioWiringPiInitDigitalOut& GpioWiringPiInitDigitalOut::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GpioWiringPiInitDigitalOut_LabNetClient_2eproto.base);
  return *internal_default_instance();
}


void GpioWiringPiInitDigitalOut::Clear() {
// @@protoc_insertion_point(message_clear_start:LabNetProt.Client.GpioWiringPiInitDigitalOut)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&pin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_inverted_) -
      reinterpret_cast<char*>(&pin_)) + sizeof(is_inverted_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GpioWiringPiInitDigitalOut::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 pin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          pin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_inverted = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          is_inverted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GpioWiringPiInitDigitalOut::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LabNetProt.Client.GpioWiringPiInitDigitalOut)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pin = 1;
  if (this->pin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pin(), target);
  }

  // bool is_inverted = 2;
  if (this->is_inverted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_inverted(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LabNetProt.Client.GpioWiringPiInitDigitalOut)
  return target;
}

size_t GpioWiringPiInitDigitalOut::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LabNetProt.Client.GpioWiringPiInitDigitalOut)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 pin = 1;
  if (this->pin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pin());
  }

  // bool is_inverted = 2;
  if (this->is_inverted() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GpioWiringPiInitDigitalOut::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LabNetProt.Client.GpioWiringPiInitDigitalOut)
  GOOGLE_DCHECK_NE(&from, this);
  const GpioWiringPiInitDigitalOut* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GpioWiringPiInitDigitalOut>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LabNetProt.Client.GpioWiringPiInitDigitalOut)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LabNetProt.Client.GpioWiringPiInitDigitalOut)
    MergeFrom(*source);
  }
}

void GpioWiringPiInitDigitalOut::MergeFrom(const GpioWiringPiInitDigitalOut& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LabNetProt.Client.GpioWiringPiInitDigitalOut)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pin() != 0) {
    _internal_set_pin(from._internal_pin());
  }
  if (from.is_inverted() != 0) {
    _internal_set_is_inverted(from._internal_is_inverted());
  }
}

void GpioWiringPiInitDigitalOut::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LabNetProt.Client.GpioWiringPiInitDigitalOut)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GpioWiringPiInitDigitalOut::CopyFrom(const GpioWiringPiInitDigitalOut& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LabNetProt.Client.GpioWiringPiInitDigitalOut)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GpioWiringPiInitDigitalOut::IsInitialized() const {
  return true;
}

void GpioWiringPiInitDigitalOut::InternalSwap(GpioWiringPiInitDigitalOut* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GpioWiringPiInitDigitalOut, is_inverted_)
      + sizeof(GpioWiringPiInitDigitalOut::is_inverted_)
      - PROTOBUF_FIELD_OFFSET(GpioWiringPiInitDigitalOut, pin_)>(
          reinterpret_cast<char*>(&pin_),
          reinterpret_cast<char*>(&other->pin_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GpioWiringPiInitDigitalOut::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DigitalOutSet::_Internal {
 public:
  static const ::LabNetProt::PinId& id(const DigitalOutSet* msg);
};

const ::LabNetProt::PinId&
DigitalOutSet::_Internal::id(const DigitalOutSet* msg) {
  return *msg->id_;
}
void DigitalOutSet::clear_id() {
  if (GetArena() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
DigitalOutSet::DigitalOutSet(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LabNetProt.Client.DigitalOutSet)
}
DigitalOutSet::DigitalOutSet(const DigitalOutSet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_id()) {
    id_ = new ::LabNetProt::PinId(*from.id_);
  } else {
    id_ = nullptr;
  }
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:LabNetProt.Client.DigitalOutSet)
}

void DigitalOutSet::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DigitalOutSet_LabNetClient_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&id_)) + sizeof(state_));
}

DigitalOutSet::~DigitalOutSet() {
  // @@protoc_insertion_point(destructor:LabNetProt.Client.DigitalOutSet)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DigitalOutSet::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete id_;
}

void DigitalOutSet::ArenaDtor(void* object) {
  DigitalOutSet* _this = reinterpret_cast< DigitalOutSet* >(object);
  (void)_this;
}
void DigitalOutSet::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DigitalOutSet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DigitalOutSet& DigitalOutSet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DigitalOutSet_LabNetClient_2eproto.base);
  return *internal_default_instance();
}


void DigitalOutSet::Clear() {
// @@protoc_insertion_point(message_clear_start:LabNetProt.Client.DigitalOutSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  state_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DigitalOutSet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .LabNetProt.PinId id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DigitalOutSet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LabNetProt.Client.DigitalOutSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .LabNetProt.PinId id = 1;
  if (this->has_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::id(this), target, stream);
  }

  // bool state = 2;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LabNetProt.Client.DigitalOutSet)
  return target;
}

size_t DigitalOutSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LabNetProt.Client.DigitalOutSet)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .LabNetProt.PinId id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // bool state = 2;
  if (this->state() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DigitalOutSet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LabNetProt.Client.DigitalOutSet)
  GOOGLE_DCHECK_NE(&from, this);
  const DigitalOutSet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DigitalOutSet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LabNetProt.Client.DigitalOutSet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LabNetProt.Client.DigitalOutSet)
    MergeFrom(*source);
  }
}

void DigitalOutSet::MergeFrom(const DigitalOutSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LabNetProt.Client.DigitalOutSet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_id()) {
    _internal_mutable_id()->::LabNetProt::PinId::MergeFrom(from._internal_id());
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
}

void DigitalOutSet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LabNetProt.Client.DigitalOutSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DigitalOutSet::CopyFrom(const DigitalOutSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LabNetProt.Client.DigitalOutSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DigitalOutSet::IsInitialized() const {
  return true;
}

void DigitalOutSet::InternalSwap(DigitalOutSet* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DigitalOutSet, state_)
      + sizeof(DigitalOutSet::state_)
      - PROTOBUF_FIELD_OFFSET(DigitalOutSet, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DigitalOutSet::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DigitalOutPulse::_Internal {
 public:
  static const ::LabNetProt::PinId& id(const DigitalOutPulse* msg);
};

const ::LabNetProt::PinId&
DigitalOutPulse::_Internal::id(const DigitalOutPulse* msg) {
  return *msg->id_;
}
void DigitalOutPulse::clear_id() {
  if (GetArena() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
DigitalOutPulse::DigitalOutPulse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LabNetProt.Client.DigitalOutPulse)
}
DigitalOutPulse::DigitalOutPulse(const DigitalOutPulse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_id()) {
    id_ = new ::LabNetProt::PinId(*from.id_);
  } else {
    id_ = nullptr;
  }
  ::memcpy(&high_duration_, &from.high_duration_,
    static_cast<size_t>(reinterpret_cast<char*>(&pulses_) -
    reinterpret_cast<char*>(&high_duration_)) + sizeof(pulses_));
  // @@protoc_insertion_point(copy_constructor:LabNetProt.Client.DigitalOutPulse)
}

void DigitalOutPulse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DigitalOutPulse_LabNetClient_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&pulses_) -
      reinterpret_cast<char*>(&id_)) + sizeof(pulses_));
}

DigitalOutPulse::~DigitalOutPulse() {
  // @@protoc_insertion_point(destructor:LabNetProt.Client.DigitalOutPulse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DigitalOutPulse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete id_;
}

void DigitalOutPulse::ArenaDtor(void* object) {
  DigitalOutPulse* _this = reinterpret_cast< DigitalOutPulse* >(object);
  (void)_this;
}
void DigitalOutPulse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DigitalOutPulse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DigitalOutPulse& DigitalOutPulse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DigitalOutPulse_LabNetClient_2eproto.base);
  return *internal_default_instance();
}


void DigitalOutPulse::Clear() {
// @@protoc_insertion_point(message_clear_start:LabNetProt.Client.DigitalOutPulse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  ::memset(&high_duration_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pulses_) -
      reinterpret_cast<char*>(&high_duration_)) + sizeof(pulses_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DigitalOutPulse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .LabNetProt.PinId id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 high_duration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          high_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 low_duration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          low_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 pulses = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          pulses_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DigitalOutPulse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LabNetProt.Client.DigitalOutPulse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .LabNetProt.PinId id = 1;
  if (this->has_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::id(this), target, stream);
  }

  // uint32 high_duration = 2;
  if (this->high_duration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_high_duration(), target);
  }

  // uint32 low_duration = 3;
  if (this->low_duration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_low_duration(), target);
  }

  // uint32 pulses = 4;
  if (this->pulses() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_pulses(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LabNetProt.Client.DigitalOutPulse)
  return target;
}

size_t DigitalOutPulse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LabNetProt.Client.DigitalOutPulse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .LabNetProt.PinId id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // uint32 high_duration = 2;
  if (this->high_duration() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_high_duration());
  }

  // uint32 low_duration = 3;
  if (this->low_duration() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_low_duration());
  }

  // uint32 pulses = 4;
  if (this->pulses() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pulses());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DigitalOutPulse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LabNetProt.Client.DigitalOutPulse)
  GOOGLE_DCHECK_NE(&from, this);
  const DigitalOutPulse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DigitalOutPulse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LabNetProt.Client.DigitalOutPulse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LabNetProt.Client.DigitalOutPulse)
    MergeFrom(*source);
  }
}

void DigitalOutPulse::MergeFrom(const DigitalOutPulse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LabNetProt.Client.DigitalOutPulse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_id()) {
    _internal_mutable_id()->::LabNetProt::PinId::MergeFrom(from._internal_id());
  }
  if (from.high_duration() != 0) {
    _internal_set_high_duration(from._internal_high_duration());
  }
  if (from.low_duration() != 0) {
    _internal_set_low_duration(from._internal_low_duration());
  }
  if (from.pulses() != 0) {
    _internal_set_pulses(from._internal_pulses());
  }
}

void DigitalOutPulse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LabNetProt.Client.DigitalOutPulse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DigitalOutPulse::CopyFrom(const DigitalOutPulse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LabNetProt.Client.DigitalOutPulse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DigitalOutPulse::IsInitialized() const {
  return true;
}

void DigitalOutPulse::InternalSwap(DigitalOutPulse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DigitalOutPulse, pulses_)
      + sizeof(DigitalOutPulse::pulses_)
      - PROTOBUF_FIELD_OFFSET(DigitalOutPulse, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DigitalOutPulse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class StartDigitalOutLoop_DigitalOutputParameter::_Internal {
 public:
  static const ::LabNetProt::PinId& id(const StartDigitalOutLoop_DigitalOutputParameter* msg);
};

const ::LabNetProt::PinId&
StartDigitalOutLoop_DigitalOutputParameter::_Internal::id(const StartDigitalOutLoop_DigitalOutputParameter* msg) {
  return *msg->id_;
}
void StartDigitalOutLoop_DigitalOutputParameter::clear_id() {
  if (GetArena() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
StartDigitalOutLoop_DigitalOutputParameter::StartDigitalOutLoop_DigitalOutputParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LabNetProt.Client.StartDigitalOutLoop.DigitalOutputParameter)
}
StartDigitalOutLoop_DigitalOutputParameter::StartDigitalOutLoop_DigitalOutputParameter(const StartDigitalOutLoop_DigitalOutputParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_id()) {
    id_ = new ::LabNetProt::PinId(*from.id_);
  } else {
    id_ = nullptr;
  }
  ::memcpy(&offset_, &from.offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&offset_)) + sizeof(duration_));
  // @@protoc_insertion_point(copy_constructor:LabNetProt.Client.StartDigitalOutLoop.DigitalOutputParameter)
}

void StartDigitalOutLoop_DigitalOutputParameter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StartDigitalOutLoop_DigitalOutputParameter_LabNetClient_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&duration_) -
      reinterpret_cast<char*>(&id_)) + sizeof(duration_));
}

StartDigitalOutLoop_DigitalOutputParameter::~StartDigitalOutLoop_DigitalOutputParameter() {
  // @@protoc_insertion_point(destructor:LabNetProt.Client.StartDigitalOutLoop.DigitalOutputParameter)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StartDigitalOutLoop_DigitalOutputParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete id_;
}

void StartDigitalOutLoop_DigitalOutputParameter::ArenaDtor(void* object) {
  StartDigitalOutLoop_DigitalOutputParameter* _this = reinterpret_cast< StartDigitalOutLoop_DigitalOutputParameter* >(object);
  (void)_this;
}
void StartDigitalOutLoop_DigitalOutputParameter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StartDigitalOutLoop_DigitalOutputParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StartDigitalOutLoop_DigitalOutputParameter& StartDigitalOutLoop_DigitalOutputParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StartDigitalOutLoop_DigitalOutputParameter_LabNetClient_2eproto.base);
  return *internal_default_instance();
}


void StartDigitalOutLoop_DigitalOutputParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:LabNetProt.Client.StartDigitalOutLoop.DigitalOutputParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  ::memset(&offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&duration_) -
      reinterpret_cast<char*>(&offset_)) + sizeof(duration_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StartDigitalOutLoop_DigitalOutputParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .LabNetProt.PinId id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 duration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StartDigitalOutLoop_DigitalOutputParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LabNetProt.Client.StartDigitalOutLoop.DigitalOutputParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .LabNetProt.PinId id = 1;
  if (this->has_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::id(this), target, stream);
  }

  // uint32 offset = 2;
  if (this->offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_offset(), target);
  }

  // uint32 duration = 3;
  if (this->duration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_duration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LabNetProt.Client.StartDigitalOutLoop.DigitalOutputParameter)
  return target;
}

size_t StartDigitalOutLoop_DigitalOutputParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LabNetProt.Client.StartDigitalOutLoop.DigitalOutputParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .LabNetProt.PinId id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // uint32 offset = 2;
  if (this->offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_offset());
  }

  // uint32 duration = 3;
  if (this->duration() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_duration());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StartDigitalOutLoop_DigitalOutputParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LabNetProt.Client.StartDigitalOutLoop.DigitalOutputParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const StartDigitalOutLoop_DigitalOutputParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StartDigitalOutLoop_DigitalOutputParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LabNetProt.Client.StartDigitalOutLoop.DigitalOutputParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LabNetProt.Client.StartDigitalOutLoop.DigitalOutputParameter)
    MergeFrom(*source);
  }
}

void StartDigitalOutLoop_DigitalOutputParameter::MergeFrom(const StartDigitalOutLoop_DigitalOutputParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LabNetProt.Client.StartDigitalOutLoop.DigitalOutputParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_id()) {
    _internal_mutable_id()->::LabNetProt::PinId::MergeFrom(from._internal_id());
  }
  if (from.offset() != 0) {
    _internal_set_offset(from._internal_offset());
  }
  if (from.duration() != 0) {
    _internal_set_duration(from._internal_duration());
  }
}

void StartDigitalOutLoop_DigitalOutputParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LabNetProt.Client.StartDigitalOutLoop.DigitalOutputParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartDigitalOutLoop_DigitalOutputParameter::CopyFrom(const StartDigitalOutLoop_DigitalOutputParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LabNetProt.Client.StartDigitalOutLoop.DigitalOutputParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartDigitalOutLoop_DigitalOutputParameter::IsInitialized() const {
  return true;
}

void StartDigitalOutLoop_DigitalOutputParameter::InternalSwap(StartDigitalOutLoop_DigitalOutputParameter* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StartDigitalOutLoop_DigitalOutputParameter, duration_)
      + sizeof(StartDigitalOutLoop_DigitalOutputParameter::duration_)
      - PROTOBUF_FIELD_OFFSET(StartDigitalOutLoop_DigitalOutputParameter, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StartDigitalOutLoop_DigitalOutputParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class StartDigitalOutLoop::_Internal {
 public:
};

StartDigitalOutLoop::StartDigitalOutLoop(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  digital_outputs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LabNetProt.Client.StartDigitalOutLoop)
}
StartDigitalOutLoop::StartDigitalOutLoop(const StartDigitalOutLoop& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      digital_outputs_(from.digital_outputs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  loop_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_loop_name().empty()) {
    loop_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_loop_name(), 
      GetArena());
  }
  loop_pause_ = from.loop_pause_;
  // @@protoc_insertion_point(copy_constructor:LabNetProt.Client.StartDigitalOutLoop)
}

void StartDigitalOutLoop::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StartDigitalOutLoop_LabNetClient_2eproto.base);
  loop_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  loop_pause_ = 0u;
}

StartDigitalOutLoop::~StartDigitalOutLoop() {
  // @@protoc_insertion_point(destructor:LabNetProt.Client.StartDigitalOutLoop)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StartDigitalOutLoop::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  loop_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StartDigitalOutLoop::ArenaDtor(void* object) {
  StartDigitalOutLoop* _this = reinterpret_cast< StartDigitalOutLoop* >(object);
  (void)_this;
}
void StartDigitalOutLoop::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StartDigitalOutLoop::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StartDigitalOutLoop& StartDigitalOutLoop::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StartDigitalOutLoop_LabNetClient_2eproto.base);
  return *internal_default_instance();
}


void StartDigitalOutLoop::Clear() {
// @@protoc_insertion_point(message_clear_start:LabNetProt.Client.StartDigitalOutLoop)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  digital_outputs_.Clear();
  loop_name_.ClearToEmpty();
  loop_pause_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StartDigitalOutLoop::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string loop_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_loop_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "LabNetProt.Client.StartDigitalOutLoop.loop_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 loop_pause = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          loop_pause_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .LabNetProt.Client.StartDigitalOutLoop.DigitalOutputParameter digital_outputs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_digital_outputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StartDigitalOutLoop::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LabNetProt.Client.StartDigitalOutLoop)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string loop_name = 1;
  if (this->loop_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_loop_name().data(), static_cast<int>(this->_internal_loop_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "LabNetProt.Client.StartDigitalOutLoop.loop_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_loop_name(), target);
  }

  // uint32 loop_pause = 2;
  if (this->loop_pause() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_loop_pause(), target);
  }

  // repeated .LabNetProt.Client.StartDigitalOutLoop.DigitalOutputParameter digital_outputs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_digital_outputs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_digital_outputs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LabNetProt.Client.StartDigitalOutLoop)
  return target;
}

size_t StartDigitalOutLoop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LabNetProt.Client.StartDigitalOutLoop)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .LabNetProt.Client.StartDigitalOutLoop.DigitalOutputParameter digital_outputs = 3;
  total_size += 1UL * this->_internal_digital_outputs_size();
  for (const auto& msg : this->digital_outputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string loop_name = 1;
  if (this->loop_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_loop_name());
  }

  // uint32 loop_pause = 2;
  if (this->loop_pause() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_loop_pause());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StartDigitalOutLoop::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LabNetProt.Client.StartDigitalOutLoop)
  GOOGLE_DCHECK_NE(&from, this);
  const StartDigitalOutLoop* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StartDigitalOutLoop>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LabNetProt.Client.StartDigitalOutLoop)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LabNetProt.Client.StartDigitalOutLoop)
    MergeFrom(*source);
  }
}

void StartDigitalOutLoop::MergeFrom(const StartDigitalOutLoop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LabNetProt.Client.StartDigitalOutLoop)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  digital_outputs_.MergeFrom(from.digital_outputs_);
  if (from.loop_name().size() > 0) {
    _internal_set_loop_name(from._internal_loop_name());
  }
  if (from.loop_pause() != 0) {
    _internal_set_loop_pause(from._internal_loop_pause());
  }
}

void StartDigitalOutLoop::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LabNetProt.Client.StartDigitalOutLoop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartDigitalOutLoop::CopyFrom(const StartDigitalOutLoop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LabNetProt.Client.StartDigitalOutLoop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartDigitalOutLoop::IsInitialized() const {
  return true;
}

void StartDigitalOutLoop::InternalSwap(StartDigitalOutLoop* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  digital_outputs_.InternalSwap(&other->digital_outputs_);
  loop_name_.Swap(&other->loop_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(loop_pause_, other->loop_pause_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StartDigitalOutLoop::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class StopDigitalOutLoop::_Internal {
 public:
};

StopDigitalOutLoop::StopDigitalOutLoop(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LabNetProt.Client.StopDigitalOutLoop)
}
StopDigitalOutLoop::StopDigitalOutLoop(const StopDigitalOutLoop& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  loop_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_loop_name().empty()) {
    loop_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_loop_name(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:LabNetProt.Client.StopDigitalOutLoop)
}

void StopDigitalOutLoop::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StopDigitalOutLoop_LabNetClient_2eproto.base);
  loop_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

StopDigitalOutLoop::~StopDigitalOutLoop() {
  // @@protoc_insertion_point(destructor:LabNetProt.Client.StopDigitalOutLoop)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StopDigitalOutLoop::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  loop_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StopDigitalOutLoop::ArenaDtor(void* object) {
  StopDigitalOutLoop* _this = reinterpret_cast< StopDigitalOutLoop* >(object);
  (void)_this;
}
void StopDigitalOutLoop::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StopDigitalOutLoop::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StopDigitalOutLoop& StopDigitalOutLoop::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StopDigitalOutLoop_LabNetClient_2eproto.base);
  return *internal_default_instance();
}


void StopDigitalOutLoop::Clear() {
// @@protoc_insertion_point(message_clear_start:LabNetProt.Client.StopDigitalOutLoop)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  loop_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StopDigitalOutLoop::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string loop_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_loop_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "LabNetProt.Client.StopDigitalOutLoop.loop_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StopDigitalOutLoop::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LabNetProt.Client.StopDigitalOutLoop)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string loop_name = 1;
  if (this->loop_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_loop_name().data(), static_cast<int>(this->_internal_loop_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "LabNetProt.Client.StopDigitalOutLoop.loop_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_loop_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LabNetProt.Client.StopDigitalOutLoop)
  return target;
}

size_t StopDigitalOutLoop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LabNetProt.Client.StopDigitalOutLoop)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string loop_name = 1;
  if (this->loop_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_loop_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StopDigitalOutLoop::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LabNetProt.Client.StopDigitalOutLoop)
  GOOGLE_DCHECK_NE(&from, this);
  const StopDigitalOutLoop* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StopDigitalOutLoop>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LabNetProt.Client.StopDigitalOutLoop)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LabNetProt.Client.StopDigitalOutLoop)
    MergeFrom(*source);
  }
}

void StopDigitalOutLoop::MergeFrom(const StopDigitalOutLoop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LabNetProt.Client.StopDigitalOutLoop)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.loop_name().size() > 0) {
    _internal_set_loop_name(from._internal_loop_name());
  }
}

void StopDigitalOutLoop::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LabNetProt.Client.StopDigitalOutLoop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopDigitalOutLoop::CopyFrom(const StopDigitalOutLoop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LabNetProt.Client.StopDigitalOutLoop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopDigitalOutLoop::IsInitialized() const {
  return true;
}

void StopDigitalOutLoop::InternalSwap(StopDigitalOutLoop* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  loop_name_.Swap(&other->loop_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata StopDigitalOutLoop::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LabNetResetRequest::_Internal {
 public:
};

LabNetResetRequest::LabNetResetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LabNetProt.Client.LabNetResetRequest)
}
LabNetResetRequest::LabNetResetRequest(const LabNetResetRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:LabNetProt.Client.LabNetResetRequest)
}

void LabNetResetRequest::SharedCtor() {
}

LabNetResetRequest::~LabNetResetRequest() {
  // @@protoc_insertion_point(destructor:LabNetProt.Client.LabNetResetRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LabNetResetRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LabNetResetRequest::ArenaDtor(void* object) {
  LabNetResetRequest* _this = reinterpret_cast< LabNetResetRequest* >(object);
  (void)_this;
}
void LabNetResetRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LabNetResetRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LabNetResetRequest& LabNetResetRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LabNetResetRequest_LabNetClient_2eproto.base);
  return *internal_default_instance();
}


void LabNetResetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:LabNetProt.Client.LabNetResetRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LabNetResetRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LabNetResetRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LabNetProt.Client.LabNetResetRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LabNetProt.Client.LabNetResetRequest)
  return target;
}

size_t LabNetResetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LabNetProt.Client.LabNetResetRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LabNetResetRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LabNetProt.Client.LabNetResetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LabNetResetRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LabNetResetRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LabNetProt.Client.LabNetResetRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LabNetProt.Client.LabNetResetRequest)
    MergeFrom(*source);
  }
}

void LabNetResetRequest::MergeFrom(const LabNetResetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LabNetProt.Client.LabNetResetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void LabNetResetRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LabNetProt.Client.LabNetResetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LabNetResetRequest::CopyFrom(const LabNetResetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LabNetProt.Client.LabNetResetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LabNetResetRequest::IsInitialized() const {
  return true;
}

void LabNetResetRequest::InternalSwap(LabNetResetRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LabNetResetRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LabNetIdRequest::_Internal {
 public:
};

LabNetIdRequest::LabNetIdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LabNetProt.Client.LabNetIdRequest)
}
LabNetIdRequest::LabNetIdRequest(const LabNetIdRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:LabNetProt.Client.LabNetIdRequest)
}

void LabNetIdRequest::SharedCtor() {
}

LabNetIdRequest::~LabNetIdRequest() {
  // @@protoc_insertion_point(destructor:LabNetProt.Client.LabNetIdRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LabNetIdRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LabNetIdRequest::ArenaDtor(void* object) {
  LabNetIdRequest* _this = reinterpret_cast< LabNetIdRequest* >(object);
  (void)_this;
}
void LabNetIdRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LabNetIdRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LabNetIdRequest& LabNetIdRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LabNetIdRequest_LabNetClient_2eproto.base);
  return *internal_default_instance();
}


void LabNetIdRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:LabNetProt.Client.LabNetIdRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LabNetIdRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LabNetIdRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LabNetProt.Client.LabNetIdRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LabNetProt.Client.LabNetIdRequest)
  return target;
}

size_t LabNetIdRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LabNetProt.Client.LabNetIdRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LabNetIdRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LabNetProt.Client.LabNetIdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LabNetIdRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LabNetIdRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LabNetProt.Client.LabNetIdRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LabNetProt.Client.LabNetIdRequest)
    MergeFrom(*source);
  }
}

void LabNetIdRequest::MergeFrom(const LabNetIdRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LabNetProt.Client.LabNetIdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void LabNetIdRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LabNetProt.Client.LabNetIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LabNetIdRequest::CopyFrom(const LabNetIdRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LabNetProt.Client.LabNetIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LabNetIdRequest::IsInitialized() const {
  return true;
}

void LabNetIdRequest::InternalSwap(LabNetIdRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LabNetIdRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class InitSound::_Internal {
 public:
};

InitSound::InitSound(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LabNetProt.Client.InitSound)
}
InitSound::InitSound(const InitSound& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:LabNetProt.Client.InitSound)
}

void InitSound::SharedCtor() {
}

InitSound::~InitSound() {
  // @@protoc_insertion_point(destructor:LabNetProt.Client.InitSound)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InitSound::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void InitSound::ArenaDtor(void* object) {
  InitSound* _this = reinterpret_cast< InitSound* >(object);
  (void)_this;
}
void InitSound::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InitSound::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InitSound& InitSound::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InitSound_LabNetClient_2eproto.base);
  return *internal_default_instance();
}


void InitSound::Clear() {
// @@protoc_insertion_point(message_clear_start:LabNetProt.Client.InitSound)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InitSound::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InitSound::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LabNetProt.Client.InitSound)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LabNetProt.Client.InitSound)
  return target;
}

size_t InitSound::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LabNetProt.Client.InitSound)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InitSound::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LabNetProt.Client.InitSound)
  GOOGLE_DCHECK_NE(&from, this);
  const InitSound* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InitSound>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LabNetProt.Client.InitSound)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LabNetProt.Client.InitSound)
    MergeFrom(*source);
  }
}

void InitSound::MergeFrom(const InitSound& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LabNetProt.Client.InitSound)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void InitSound::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LabNetProt.Client.InitSound)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InitSound::CopyFrom(const InitSound& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LabNetProt.Client.InitSound)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitSound::IsInitialized() const {
  return true;
}

void InitSound::InternalSwap(InitSound* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InitSound::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class InitSoundSignal::_Internal {
 public:
};

InitSoundSignal::InitSoundSignal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LabNetProt.Client.InitSoundSignal)
}
InitSoundSignal::InitSoundSignal(const InitSoundSignal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&signal_type_, &from.signal_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&volume_) -
    reinterpret_cast<char*>(&signal_type_)) + sizeof(volume_));
  // @@protoc_insertion_point(copy_constructor:LabNetProt.Client.InitSoundSignal)
}

void InitSoundSignal::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&signal_type_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&volume_) -
      reinterpret_cast<char*>(&signal_type_)) + sizeof(volume_));
}

InitSoundSignal::~InitSoundSignal() {
  // @@protoc_insertion_point(destructor:LabNetProt.Client.InitSoundSignal)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InitSoundSignal::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void InitSoundSignal::ArenaDtor(void* object) {
  InitSoundSignal* _this = reinterpret_cast< InitSoundSignal* >(object);
  (void)_this;
}
void InitSoundSignal::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InitSoundSignal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InitSoundSignal& InitSoundSignal::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InitSoundSignal_LabNetClient_2eproto.base);
  return *internal_default_instance();
}


void InitSoundSignal::Clear() {
// @@protoc_insertion_point(message_clear_start:LabNetProt.Client.InitSoundSignal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&signal_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&volume_) -
      reinterpret_cast<char*>(&signal_type_)) + sizeof(volume_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InitSoundSignal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .LabNetProt.Client.SoundSignalType signal_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_signal_type(static_cast<::LabNetProt::Client::SoundSignalType>(val));
        } else goto handle_unusual;
        continue;
      // uint32 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 frequency = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          frequency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 frequency_end = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          frequency_end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float sweep_length_seconds = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          sweep_length_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float volume = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          volume_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InitSoundSignal::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LabNetProt.Client.InitSoundSignal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .LabNetProt.Client.SoundSignalType signal_type = 1;
  if (this->signal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_signal_type(), target);
  }

  // uint32 id = 2;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_id(), target);
  }

  // uint32 frequency = 3;
  if (this->frequency() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_frequency(), target);
  }

  // uint32 frequency_end = 4;
  if (this->frequency_end() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_frequency_end(), target);
  }

  // float sweep_length_seconds = 5;
  if (!(this->sweep_length_seconds() <= 0 && this->sweep_length_seconds() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_sweep_length_seconds(), target);
  }

  // float volume = 6;
  if (!(this->volume() <= 0 && this->volume() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_volume(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LabNetProt.Client.InitSoundSignal)
  return target;
}

size_t InitSoundSignal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LabNetProt.Client.InitSoundSignal)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .LabNetProt.Client.SoundSignalType signal_type = 1;
  if (this->signal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_signal_type());
  }

  // uint32 id = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // uint32 frequency = 3;
  if (this->frequency() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_frequency());
  }

  // uint32 frequency_end = 4;
  if (this->frequency_end() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_frequency_end());
  }

  // float sweep_length_seconds = 5;
  if (!(this->sweep_length_seconds() <= 0 && this->sweep_length_seconds() >= 0)) {
    total_size += 1 + 4;
  }

  // float volume = 6;
  if (!(this->volume() <= 0 && this->volume() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InitSoundSignal::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LabNetProt.Client.InitSoundSignal)
  GOOGLE_DCHECK_NE(&from, this);
  const InitSoundSignal* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InitSoundSignal>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LabNetProt.Client.InitSoundSignal)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LabNetProt.Client.InitSoundSignal)
    MergeFrom(*source);
  }
}

void InitSoundSignal::MergeFrom(const InitSoundSignal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LabNetProt.Client.InitSoundSignal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.signal_type() != 0) {
    _internal_set_signal_type(from._internal_signal_type());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.frequency() != 0) {
    _internal_set_frequency(from._internal_frequency());
  }
  if (from.frequency_end() != 0) {
    _internal_set_frequency_end(from._internal_frequency_end());
  }
  if (!(from.sweep_length_seconds() <= 0 && from.sweep_length_seconds() >= 0)) {
    _internal_set_sweep_length_seconds(from._internal_sweep_length_seconds());
  }
  if (!(from.volume() <= 0 && from.volume() >= 0)) {
    _internal_set_volume(from._internal_volume());
  }
}

void InitSoundSignal::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LabNetProt.Client.InitSoundSignal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InitSoundSignal::CopyFrom(const InitSoundSignal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LabNetProt.Client.InitSoundSignal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitSoundSignal::IsInitialized() const {
  return true;
}

void InitSoundSignal::InternalSwap(InitSoundSignal* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InitSoundSignal, volume_)
      + sizeof(InitSoundSignal::volume_)
      - PROTOBUF_FIELD_OFFSET(InitSoundSignal, signal_type_)>(
          reinterpret_cast<char*>(&signal_type_),
          reinterpret_cast<char*>(&other->signal_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InitSoundSignal::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Client
}  // namespace LabNetProt
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::LabNetProt::Client::IoBoardInit* Arena::CreateMaybeMessage< ::LabNetProt::Client::IoBoardInit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LabNetProt::Client::IoBoardInit >(arena);
}
template<> PROTOBUF_NOINLINE ::LabNetProt::Client::IoBoardInitDigitalIn* Arena::CreateMaybeMessage< ::LabNetProt::Client::IoBoardInitDigitalIn >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LabNetProt::Client::IoBoardInitDigitalIn >(arena);
}
template<> PROTOBUF_NOINLINE ::LabNetProt::Client::IoBoardInitDigitalOut* Arena::CreateMaybeMessage< ::LabNetProt::Client::IoBoardInitDigitalOut >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LabNetProt::Client::IoBoardInitDigitalOut >(arena);
}
template<> PROTOBUF_NOINLINE ::LabNetProt::Client::RfidBoardInit* Arena::CreateMaybeMessage< ::LabNetProt::Client::RfidBoardInit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LabNetProt::Client::RfidBoardInit >(arena);
}
template<> PROTOBUF_NOINLINE ::LabNetProt::Client::RfidBoardSetPhaseMatrix* Arena::CreateMaybeMessage< ::LabNetProt::Client::RfidBoardSetPhaseMatrix >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LabNetProt::Client::RfidBoardSetPhaseMatrix >(arena);
}
template<> PROTOBUF_NOINLINE ::LabNetProt::Client::UartInit* Arena::CreateMaybeMessage< ::LabNetProt::Client::UartInit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LabNetProt::Client::UartInit >(arena);
}
template<> PROTOBUF_NOINLINE ::LabNetProt::Client::UartWriteData* Arena::CreateMaybeMessage< ::LabNetProt::Client::UartWriteData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LabNetProt::Client::UartWriteData >(arena);
}
template<> PROTOBUF_NOINLINE ::LabNetProt::Client::UartInitDigitalIn* Arena::CreateMaybeMessage< ::LabNetProt::Client::UartInitDigitalIn >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LabNetProt::Client::UartInitDigitalIn >(arena);
}
template<> PROTOBUF_NOINLINE ::LabNetProt::Client::UartInitDigitalOut* Arena::CreateMaybeMessage< ::LabNetProt::Client::UartInitDigitalOut >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LabNetProt::Client::UartInitDigitalOut >(arena);
}
template<> PROTOBUF_NOINLINE ::LabNetProt::Client::GpioWiringPiInit* Arena::CreateMaybeMessage< ::LabNetProt::Client::GpioWiringPiInit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LabNetProt::Client::GpioWiringPiInit >(arena);
}
template<> PROTOBUF_NOINLINE ::LabNetProt::Client::GpioWiringPiInitDigitalIn* Arena::CreateMaybeMessage< ::LabNetProt::Client::GpioWiringPiInitDigitalIn >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LabNetProt::Client::GpioWiringPiInitDigitalIn >(arena);
}
template<> PROTOBUF_NOINLINE ::LabNetProt::Client::GpioWiringPiInitDigitalOut* Arena::CreateMaybeMessage< ::LabNetProt::Client::GpioWiringPiInitDigitalOut >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LabNetProt::Client::GpioWiringPiInitDigitalOut >(arena);
}
template<> PROTOBUF_NOINLINE ::LabNetProt::Client::DigitalOutSet* Arena::CreateMaybeMessage< ::LabNetProt::Client::DigitalOutSet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LabNetProt::Client::DigitalOutSet >(arena);
}
template<> PROTOBUF_NOINLINE ::LabNetProt::Client::DigitalOutPulse* Arena::CreateMaybeMessage< ::LabNetProt::Client::DigitalOutPulse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LabNetProt::Client::DigitalOutPulse >(arena);
}
template<> PROTOBUF_NOINLINE ::LabNetProt::Client::StartDigitalOutLoop_DigitalOutputParameter* Arena::CreateMaybeMessage< ::LabNetProt::Client::StartDigitalOutLoop_DigitalOutputParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LabNetProt::Client::StartDigitalOutLoop_DigitalOutputParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::LabNetProt::Client::StartDigitalOutLoop* Arena::CreateMaybeMessage< ::LabNetProt::Client::StartDigitalOutLoop >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LabNetProt::Client::StartDigitalOutLoop >(arena);
}
template<> PROTOBUF_NOINLINE ::LabNetProt::Client::StopDigitalOutLoop* Arena::CreateMaybeMessage< ::LabNetProt::Client::StopDigitalOutLoop >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LabNetProt::Client::StopDigitalOutLoop >(arena);
}
template<> PROTOBUF_NOINLINE ::LabNetProt::Client::LabNetResetRequest* Arena::CreateMaybeMessage< ::LabNetProt::Client::LabNetResetRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LabNetProt::Client::LabNetResetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::LabNetProt::Client::LabNetIdRequest* Arena::CreateMaybeMessage< ::LabNetProt::Client::LabNetIdRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LabNetProt::Client::LabNetIdRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::LabNetProt::Client::InitSound* Arena::CreateMaybeMessage< ::LabNetProt::Client::InitSound >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LabNetProt::Client::InitSound >(arena);
}
template<> PROTOBUF_NOINLINE ::LabNetProt::Client::InitSoundSignal* Arena::CreateMaybeMessage< ::LabNetProt::Client::InitSoundSignal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LabNetProt::Client::InitSoundSignal >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
