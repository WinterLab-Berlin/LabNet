// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LabNetServer.proto

#ifndef PROTOBUF_INCLUDED_LabNetServer_2eproto
#define PROTOBUF_INCLUDED_LabNetServer_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "LabNet.pb.h"
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_LabNetServer_2eproto 

namespace protobuf_LabNetServer_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[15];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_LabNetServer_2eproto
namespace LabNetProt {
namespace Server {
class ChiBioPumpMoveResult;
class ChiBioPumpMoveResultDefaultTypeInternal;
extern ChiBioPumpMoveResultDefaultTypeInternal _ChiBioPumpMoveResult_default_instance_;
class DataWriteComplete;
class DataWriteCompleteDefaultTypeInternal;
extern DataWriteCompleteDefaultTypeInternal _DataWriteComplete_default_instance_;
class DigitalInInitResult;
class DigitalInInitResultDefaultTypeInternal;
extern DigitalInInitResultDefaultTypeInternal _DigitalInInitResult_default_instance_;
class DigitalInState;
class DigitalInStateDefaultTypeInternal;
extern DigitalInStateDefaultTypeInternal _DigitalInState_default_instance_;
class DigitalOutInitResult;
class DigitalOutInitResultDefaultTypeInternal;
extern DigitalOutInitResultDefaultTypeInternal _DigitalOutInitResult_default_instance_;
class DigitalOutLoopStartResult;
class DigitalOutLoopStartResultDefaultTypeInternal;
extern DigitalOutLoopStartResultDefaultTypeInternal _DigitalOutLoopStartResult_default_instance_;
class DigitalOutLoopStopped;
class DigitalOutLoopStoppedDefaultTypeInternal;
extern DigitalOutLoopStoppedDefaultTypeInternal _DigitalOutLoopStopped_default_instance_;
class DigitalOutState;
class DigitalOutStateDefaultTypeInternal;
extern DigitalOutStateDefaultTypeInternal _DigitalOutState_default_instance_;
class InterfaceInitResult;
class InterfaceInitResultDefaultTypeInternal;
extern InterfaceInitResultDefaultTypeInternal _InterfaceInitResult_default_instance_;
class InterfaceLost;
class InterfaceLostDefaultTypeInternal;
extern InterfaceLostDefaultTypeInternal _InterfaceLost_default_instance_;
class InterfaceReconnected;
class InterfaceReconnectedDefaultTypeInternal;
extern InterfaceReconnectedDefaultTypeInternal _InterfaceReconnected_default_instance_;
class LabNetIdReply;
class LabNetIdReplyDefaultTypeInternal;
extern LabNetIdReplyDefaultTypeInternal _LabNetIdReply_default_instance_;
class LabNetResetReply;
class LabNetResetReplyDefaultTypeInternal;
extern LabNetResetReplyDefaultTypeInternal _LabNetResetReply_default_instance_;
class NewByteData;
class NewByteDataDefaultTypeInternal;
extern NewByteDataDefaultTypeInternal _NewByteData_default_instance_;
class OnlyOneConnectionAllowed;
class OnlyOneConnectionAllowedDefaultTypeInternal;
extern OnlyOneConnectionAllowedDefaultTypeInternal _OnlyOneConnectionAllowed_default_instance_;
}  // namespace Server
}  // namespace LabNetProt
namespace google {
namespace protobuf {
template<> ::LabNetProt::Server::ChiBioPumpMoveResult* Arena::CreateMaybeMessage<::LabNetProt::Server::ChiBioPumpMoveResult>(Arena*);
template<> ::LabNetProt::Server::DataWriteComplete* Arena::CreateMaybeMessage<::LabNetProt::Server::DataWriteComplete>(Arena*);
template<> ::LabNetProt::Server::DigitalInInitResult* Arena::CreateMaybeMessage<::LabNetProt::Server::DigitalInInitResult>(Arena*);
template<> ::LabNetProt::Server::DigitalInState* Arena::CreateMaybeMessage<::LabNetProt::Server::DigitalInState>(Arena*);
template<> ::LabNetProt::Server::DigitalOutInitResult* Arena::CreateMaybeMessage<::LabNetProt::Server::DigitalOutInitResult>(Arena*);
template<> ::LabNetProt::Server::DigitalOutLoopStartResult* Arena::CreateMaybeMessage<::LabNetProt::Server::DigitalOutLoopStartResult>(Arena*);
template<> ::LabNetProt::Server::DigitalOutLoopStopped* Arena::CreateMaybeMessage<::LabNetProt::Server::DigitalOutLoopStopped>(Arena*);
template<> ::LabNetProt::Server::DigitalOutState* Arena::CreateMaybeMessage<::LabNetProt::Server::DigitalOutState>(Arena*);
template<> ::LabNetProt::Server::InterfaceInitResult* Arena::CreateMaybeMessage<::LabNetProt::Server::InterfaceInitResult>(Arena*);
template<> ::LabNetProt::Server::InterfaceLost* Arena::CreateMaybeMessage<::LabNetProt::Server::InterfaceLost>(Arena*);
template<> ::LabNetProt::Server::InterfaceReconnected* Arena::CreateMaybeMessage<::LabNetProt::Server::InterfaceReconnected>(Arena*);
template<> ::LabNetProt::Server::LabNetIdReply* Arena::CreateMaybeMessage<::LabNetProt::Server::LabNetIdReply>(Arena*);
template<> ::LabNetProt::Server::LabNetResetReply* Arena::CreateMaybeMessage<::LabNetProt::Server::LabNetResetReply>(Arena*);
template<> ::LabNetProt::Server::NewByteData* Arena::CreateMaybeMessage<::LabNetProt::Server::NewByteData>(Arena*);
template<> ::LabNetProt::Server::OnlyOneConnectionAllowed* Arena::CreateMaybeMessage<::LabNetProt::Server::OnlyOneConnectionAllowed>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace LabNetProt {
namespace Server {

enum ChiBioPumpMoveResult_MoveResult {
  ChiBioPumpMoveResult_MoveResult_STOPPED = 0,
  ChiBioPumpMoveResult_MoveResult_MOVE_DOWN = 1,
  ChiBioPumpMoveResult_MoveResult_MOVE_UP = 2,
  ChiBioPumpMoveResult_MoveResult_ChiBioPumpMoveResult_MoveResult_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ChiBioPumpMoveResult_MoveResult_ChiBioPumpMoveResult_MoveResult_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ChiBioPumpMoveResult_MoveResult_IsValid(int value);
const ChiBioPumpMoveResult_MoveResult ChiBioPumpMoveResult_MoveResult_MoveResult_MIN = ChiBioPumpMoveResult_MoveResult_STOPPED;
const ChiBioPumpMoveResult_MoveResult ChiBioPumpMoveResult_MoveResult_MoveResult_MAX = ChiBioPumpMoveResult_MoveResult_MOVE_UP;
const int ChiBioPumpMoveResult_MoveResult_MoveResult_ARRAYSIZE = ChiBioPumpMoveResult_MoveResult_MoveResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* ChiBioPumpMoveResult_MoveResult_descriptor();
inline const ::std::string& ChiBioPumpMoveResult_MoveResult_Name(ChiBioPumpMoveResult_MoveResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    ChiBioPumpMoveResult_MoveResult_descriptor(), value);
}
inline bool ChiBioPumpMoveResult_MoveResult_Parse(
    const ::std::string& name, ChiBioPumpMoveResult_MoveResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ChiBioPumpMoveResult_MoveResult>(
    ChiBioPumpMoveResult_MoveResult_descriptor(), name, value);
}
enum ServerMessageType {
  NONE = 0,
  LABNET_ID_REPLY = 1,
  LABNET_RESET_REPLY = 2,
  DIGITAL_OUT_STATE = 3,
  DIGITAL_IN_STATE = 4,
  NEW_BYTE_DATA = 5,
  DATA_WRITE_COMPLETE = 6,
  INTERFACE_INIT_RESULT = 7,
  DIGITAL_IN_INIT_RESULT = 8,
  DIGITAL_OUT_INIT_RESULT = 9,
  ONLY_ONE_CONNECTION_ALLOWED = 10,
  INTERFACE_LOST = 11,
  INTERFACE_RECONNECTED = 12,
  DIGITAL_OUT_LOOP_START_RESULT = 13,
  DIGITAL_OUT_LOOP_STOPPED = 14,
  CHI_BIO_PUMP_MOVE_RESULT = 25,
  ServerMessageType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ServerMessageType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ServerMessageType_IsValid(int value);
const ServerMessageType ServerMessageType_MIN = NONE;
const ServerMessageType ServerMessageType_MAX = CHI_BIO_PUMP_MOVE_RESULT;
const int ServerMessageType_ARRAYSIZE = ServerMessageType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ServerMessageType_descriptor();
inline const ::std::string& ServerMessageType_Name(ServerMessageType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ServerMessageType_descriptor(), value);
}
inline bool ServerMessageType_Parse(
    const ::std::string& name, ServerMessageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ServerMessageType>(
    ServerMessageType_descriptor(), name, value);
}
// ===================================================================

class DigitalOutState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LabNetProt.Server.DigitalOutState) */ {
 public:
  DigitalOutState();
  virtual ~DigitalOutState();

  DigitalOutState(const DigitalOutState& from);

  inline DigitalOutState& operator=(const DigitalOutState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DigitalOutState(DigitalOutState&& from) noexcept
    : DigitalOutState() {
    *this = ::std::move(from);
  }

  inline DigitalOutState& operator=(DigitalOutState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DigitalOutState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DigitalOutState* internal_default_instance() {
    return reinterpret_cast<const DigitalOutState*>(
               &_DigitalOutState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(DigitalOutState* other);
  friend void swap(DigitalOutState& a, DigitalOutState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DigitalOutState* New() const final {
    return CreateMaybeMessage<DigitalOutState>(NULL);
  }

  DigitalOutState* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DigitalOutState>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DigitalOutState& from);
  void MergeFrom(const DigitalOutState& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DigitalOutState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .LabNetProt.PinId pin = 1;
  bool has_pin() const;
  void clear_pin();
  static const int kPinFieldNumber = 1;
  private:
  const ::LabNetProt::PinId& _internal_pin() const;
  public:
  const ::LabNetProt::PinId& pin() const;
  ::LabNetProt::PinId* release_pin();
  ::LabNetProt::PinId* mutable_pin();
  void set_allocated_pin(::LabNetProt::PinId* pin);

  // .google.protobuf.Timestamp time = 3;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 3;
  private:
  const ::google::protobuf::Timestamp& _internal_time() const;
  public:
  const ::google::protobuf::Timestamp& time() const;
  ::google::protobuf::Timestamp* release_time();
  ::google::protobuf::Timestamp* mutable_time();
  void set_allocated_time(::google::protobuf::Timestamp* time);

  // bool state = 2;
  void clear_state();
  static const int kStateFieldNumber = 2;
  bool state() const;
  void set_state(bool value);

  // @@protoc_insertion_point(class_scope:LabNetProt.Server.DigitalOutState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::LabNetProt::PinId* pin_;
  ::google::protobuf::Timestamp* time_;
  bool state_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_LabNetServer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DigitalInState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LabNetProt.Server.DigitalInState) */ {
 public:
  DigitalInState();
  virtual ~DigitalInState();

  DigitalInState(const DigitalInState& from);

  inline DigitalInState& operator=(const DigitalInState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DigitalInState(DigitalInState&& from) noexcept
    : DigitalInState() {
    *this = ::std::move(from);
  }

  inline DigitalInState& operator=(DigitalInState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DigitalInState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DigitalInState* internal_default_instance() {
    return reinterpret_cast<const DigitalInState*>(
               &_DigitalInState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(DigitalInState* other);
  friend void swap(DigitalInState& a, DigitalInState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DigitalInState* New() const final {
    return CreateMaybeMessage<DigitalInState>(NULL);
  }

  DigitalInState* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DigitalInState>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DigitalInState& from);
  void MergeFrom(const DigitalInState& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DigitalInState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .LabNetProt.PinId pin = 1;
  bool has_pin() const;
  void clear_pin();
  static const int kPinFieldNumber = 1;
  private:
  const ::LabNetProt::PinId& _internal_pin() const;
  public:
  const ::LabNetProt::PinId& pin() const;
  ::LabNetProt::PinId* release_pin();
  ::LabNetProt::PinId* mutable_pin();
  void set_allocated_pin(::LabNetProt::PinId* pin);

  // .google.protobuf.Timestamp time = 3;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 3;
  private:
  const ::google::protobuf::Timestamp& _internal_time() const;
  public:
  const ::google::protobuf::Timestamp& time() const;
  ::google::protobuf::Timestamp* release_time();
  ::google::protobuf::Timestamp* mutable_time();
  void set_allocated_time(::google::protobuf::Timestamp* time);

  // bool state = 2;
  void clear_state();
  static const int kStateFieldNumber = 2;
  bool state() const;
  void set_state(bool value);

  // @@protoc_insertion_point(class_scope:LabNetProt.Server.DigitalInState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::LabNetProt::PinId* pin_;
  ::google::protobuf::Timestamp* time_;
  bool state_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_LabNetServer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NewByteData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LabNetProt.Server.NewByteData) */ {
 public:
  NewByteData();
  virtual ~NewByteData();

  NewByteData(const NewByteData& from);

  inline NewByteData& operator=(const NewByteData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NewByteData(NewByteData&& from) noexcept
    : NewByteData() {
    *this = ::std::move(from);
  }

  inline NewByteData& operator=(NewByteData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const NewByteData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NewByteData* internal_default_instance() {
    return reinterpret_cast<const NewByteData*>(
               &_NewByteData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(NewByteData* other);
  friend void swap(NewByteData& a, NewByteData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NewByteData* New() const final {
    return CreateMaybeMessage<NewByteData>(NULL);
  }

  NewByteData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NewByteData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NewByteData& from);
  void MergeFrom(const NewByteData& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NewByteData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes data = 2;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // .LabNetProt.PinId pin = 1;
  bool has_pin() const;
  void clear_pin();
  static const int kPinFieldNumber = 1;
  private:
  const ::LabNetProt::PinId& _internal_pin() const;
  public:
  const ::LabNetProt::PinId& pin() const;
  ::LabNetProt::PinId* release_pin();
  ::LabNetProt::PinId* mutable_pin();
  void set_allocated_pin(::LabNetProt::PinId* pin);

  // .google.protobuf.Timestamp time = 3;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 3;
  private:
  const ::google::protobuf::Timestamp& _internal_time() const;
  public:
  const ::google::protobuf::Timestamp& time() const;
  ::google::protobuf::Timestamp* release_time();
  ::google::protobuf::Timestamp* mutable_time();
  void set_allocated_time(::google::protobuf::Timestamp* time);

  // @@protoc_insertion_point(class_scope:LabNetProt.Server.NewByteData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::LabNetProt::PinId* pin_;
  ::google::protobuf::Timestamp* time_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_LabNetServer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DataWriteComplete : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LabNetProt.Server.DataWriteComplete) */ {
 public:
  DataWriteComplete();
  virtual ~DataWriteComplete();

  DataWriteComplete(const DataWriteComplete& from);

  inline DataWriteComplete& operator=(const DataWriteComplete& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DataWriteComplete(DataWriteComplete&& from) noexcept
    : DataWriteComplete() {
    *this = ::std::move(from);
  }

  inline DataWriteComplete& operator=(DataWriteComplete&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DataWriteComplete& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataWriteComplete* internal_default_instance() {
    return reinterpret_cast<const DataWriteComplete*>(
               &_DataWriteComplete_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(DataWriteComplete* other);
  friend void swap(DataWriteComplete& a, DataWriteComplete& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DataWriteComplete* New() const final {
    return CreateMaybeMessage<DataWriteComplete>(NULL);
  }

  DataWriteComplete* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DataWriteComplete>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DataWriteComplete& from);
  void MergeFrom(const DataWriteComplete& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataWriteComplete* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .LabNetProt.PinId pin = 1;
  bool has_pin() const;
  void clear_pin();
  static const int kPinFieldNumber = 1;
  private:
  const ::LabNetProt::PinId& _internal_pin() const;
  public:
  const ::LabNetProt::PinId& pin() const;
  ::LabNetProt::PinId* release_pin();
  ::LabNetProt::PinId* mutable_pin();
  void set_allocated_pin(::LabNetProt::PinId* pin);

  // @@protoc_insertion_point(class_scope:LabNetProt.Server.DataWriteComplete)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::LabNetProt::PinId* pin_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_LabNetServer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class InterfaceInitResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LabNetProt.Server.InterfaceInitResult) */ {
 public:
  InterfaceInitResult();
  virtual ~InterfaceInitResult();

  InterfaceInitResult(const InterfaceInitResult& from);

  inline InterfaceInitResult& operator=(const InterfaceInitResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InterfaceInitResult(InterfaceInitResult&& from) noexcept
    : InterfaceInitResult() {
    *this = ::std::move(from);
  }

  inline InterfaceInitResult& operator=(InterfaceInitResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const InterfaceInitResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InterfaceInitResult* internal_default_instance() {
    return reinterpret_cast<const InterfaceInitResult*>(
               &_InterfaceInitResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(InterfaceInitResult* other);
  friend void swap(InterfaceInitResult& a, InterfaceInitResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InterfaceInitResult* New() const final {
    return CreateMaybeMessage<InterfaceInitResult>(NULL);
  }

  InterfaceInitResult* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<InterfaceInitResult>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const InterfaceInitResult& from);
  void MergeFrom(const InterfaceInitResult& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InterfaceInitResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .LabNetProt.Interfaces interface = 1;
  void clear_interface();
  static const int kInterfaceFieldNumber = 1;
  ::LabNetProt::Interfaces interface() const;
  void set_interface(::LabNetProt::Interfaces value);

  // bool is_succeed = 2;
  void clear_is_succeed();
  static const int kIsSucceedFieldNumber = 2;
  bool is_succeed() const;
  void set_is_succeed(bool value);

  // @@protoc_insertion_point(class_scope:LabNetProt.Server.InterfaceInitResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int interface_;
  bool is_succeed_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_LabNetServer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class InterfaceLost : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LabNetProt.Server.InterfaceLost) */ {
 public:
  InterfaceLost();
  virtual ~InterfaceLost();

  InterfaceLost(const InterfaceLost& from);

  inline InterfaceLost& operator=(const InterfaceLost& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InterfaceLost(InterfaceLost&& from) noexcept
    : InterfaceLost() {
    *this = ::std::move(from);
  }

  inline InterfaceLost& operator=(InterfaceLost&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const InterfaceLost& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InterfaceLost* internal_default_instance() {
    return reinterpret_cast<const InterfaceLost*>(
               &_InterfaceLost_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(InterfaceLost* other);
  friend void swap(InterfaceLost& a, InterfaceLost& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InterfaceLost* New() const final {
    return CreateMaybeMessage<InterfaceLost>(NULL);
  }

  InterfaceLost* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<InterfaceLost>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const InterfaceLost& from);
  void MergeFrom(const InterfaceLost& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InterfaceLost* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .LabNetProt.Interfaces interface = 1;
  void clear_interface();
  static const int kInterfaceFieldNumber = 1;
  ::LabNetProt::Interfaces interface() const;
  void set_interface(::LabNetProt::Interfaces value);

  // @@protoc_insertion_point(class_scope:LabNetProt.Server.InterfaceLost)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int interface_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_LabNetServer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class InterfaceReconnected : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LabNetProt.Server.InterfaceReconnected) */ {
 public:
  InterfaceReconnected();
  virtual ~InterfaceReconnected();

  InterfaceReconnected(const InterfaceReconnected& from);

  inline InterfaceReconnected& operator=(const InterfaceReconnected& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InterfaceReconnected(InterfaceReconnected&& from) noexcept
    : InterfaceReconnected() {
    *this = ::std::move(from);
  }

  inline InterfaceReconnected& operator=(InterfaceReconnected&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const InterfaceReconnected& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InterfaceReconnected* internal_default_instance() {
    return reinterpret_cast<const InterfaceReconnected*>(
               &_InterfaceReconnected_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(InterfaceReconnected* other);
  friend void swap(InterfaceReconnected& a, InterfaceReconnected& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InterfaceReconnected* New() const final {
    return CreateMaybeMessage<InterfaceReconnected>(NULL);
  }

  InterfaceReconnected* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<InterfaceReconnected>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const InterfaceReconnected& from);
  void MergeFrom(const InterfaceReconnected& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InterfaceReconnected* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .LabNetProt.Interfaces interface = 1;
  void clear_interface();
  static const int kInterfaceFieldNumber = 1;
  ::LabNetProt::Interfaces interface() const;
  void set_interface(::LabNetProt::Interfaces value);

  // @@protoc_insertion_point(class_scope:LabNetProt.Server.InterfaceReconnected)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int interface_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_LabNetServer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DigitalInInitResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LabNetProt.Server.DigitalInInitResult) */ {
 public:
  DigitalInInitResult();
  virtual ~DigitalInInitResult();

  DigitalInInitResult(const DigitalInInitResult& from);

  inline DigitalInInitResult& operator=(const DigitalInInitResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DigitalInInitResult(DigitalInInitResult&& from) noexcept
    : DigitalInInitResult() {
    *this = ::std::move(from);
  }

  inline DigitalInInitResult& operator=(DigitalInInitResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DigitalInInitResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DigitalInInitResult* internal_default_instance() {
    return reinterpret_cast<const DigitalInInitResult*>(
               &_DigitalInInitResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(DigitalInInitResult* other);
  friend void swap(DigitalInInitResult& a, DigitalInInitResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DigitalInInitResult* New() const final {
    return CreateMaybeMessage<DigitalInInitResult>(NULL);
  }

  DigitalInInitResult* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DigitalInInitResult>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DigitalInInitResult& from);
  void MergeFrom(const DigitalInInitResult& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DigitalInInitResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .LabNetProt.Interfaces interface = 1;
  void clear_interface();
  static const int kInterfaceFieldNumber = 1;
  ::LabNetProt::Interfaces interface() const;
  void set_interface(::LabNetProt::Interfaces value);

  // uint32 pin = 2;
  void clear_pin();
  static const int kPinFieldNumber = 2;
  ::google::protobuf::uint32 pin() const;
  void set_pin(::google::protobuf::uint32 value);

  // bool is_succeed = 3;
  void clear_is_succeed();
  static const int kIsSucceedFieldNumber = 3;
  bool is_succeed() const;
  void set_is_succeed(bool value);

  // @@protoc_insertion_point(class_scope:LabNetProt.Server.DigitalInInitResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int interface_;
  ::google::protobuf::uint32 pin_;
  bool is_succeed_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_LabNetServer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DigitalOutInitResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LabNetProt.Server.DigitalOutInitResult) */ {
 public:
  DigitalOutInitResult();
  virtual ~DigitalOutInitResult();

  DigitalOutInitResult(const DigitalOutInitResult& from);

  inline DigitalOutInitResult& operator=(const DigitalOutInitResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DigitalOutInitResult(DigitalOutInitResult&& from) noexcept
    : DigitalOutInitResult() {
    *this = ::std::move(from);
  }

  inline DigitalOutInitResult& operator=(DigitalOutInitResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DigitalOutInitResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DigitalOutInitResult* internal_default_instance() {
    return reinterpret_cast<const DigitalOutInitResult*>(
               &_DigitalOutInitResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(DigitalOutInitResult* other);
  friend void swap(DigitalOutInitResult& a, DigitalOutInitResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DigitalOutInitResult* New() const final {
    return CreateMaybeMessage<DigitalOutInitResult>(NULL);
  }

  DigitalOutInitResult* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DigitalOutInitResult>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DigitalOutInitResult& from);
  void MergeFrom(const DigitalOutInitResult& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DigitalOutInitResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .LabNetProt.Interfaces interface = 1;
  void clear_interface();
  static const int kInterfaceFieldNumber = 1;
  ::LabNetProt::Interfaces interface() const;
  void set_interface(::LabNetProt::Interfaces value);

  // uint32 pin = 2;
  void clear_pin();
  static const int kPinFieldNumber = 2;
  ::google::protobuf::uint32 pin() const;
  void set_pin(::google::protobuf::uint32 value);

  // bool is_succeed = 3;
  void clear_is_succeed();
  static const int kIsSucceedFieldNumber = 3;
  bool is_succeed() const;
  void set_is_succeed(bool value);

  // @@protoc_insertion_point(class_scope:LabNetProt.Server.DigitalOutInitResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int interface_;
  ::google::protobuf::uint32 pin_;
  bool is_succeed_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_LabNetServer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OnlyOneConnectionAllowed : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LabNetProt.Server.OnlyOneConnectionAllowed) */ {
 public:
  OnlyOneConnectionAllowed();
  virtual ~OnlyOneConnectionAllowed();

  OnlyOneConnectionAllowed(const OnlyOneConnectionAllowed& from);

  inline OnlyOneConnectionAllowed& operator=(const OnlyOneConnectionAllowed& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OnlyOneConnectionAllowed(OnlyOneConnectionAllowed&& from) noexcept
    : OnlyOneConnectionAllowed() {
    *this = ::std::move(from);
  }

  inline OnlyOneConnectionAllowed& operator=(OnlyOneConnectionAllowed&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const OnlyOneConnectionAllowed& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OnlyOneConnectionAllowed* internal_default_instance() {
    return reinterpret_cast<const OnlyOneConnectionAllowed*>(
               &_OnlyOneConnectionAllowed_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(OnlyOneConnectionAllowed* other);
  friend void swap(OnlyOneConnectionAllowed& a, OnlyOneConnectionAllowed& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OnlyOneConnectionAllowed* New() const final {
    return CreateMaybeMessage<OnlyOneConnectionAllowed>(NULL);
  }

  OnlyOneConnectionAllowed* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OnlyOneConnectionAllowed>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OnlyOneConnectionAllowed& from);
  void MergeFrom(const OnlyOneConnectionAllowed& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OnlyOneConnectionAllowed* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:LabNetProt.Server.OnlyOneConnectionAllowed)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_LabNetServer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LabNetResetReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LabNetProt.Server.LabNetResetReply) */ {
 public:
  LabNetResetReply();
  virtual ~LabNetResetReply();

  LabNetResetReply(const LabNetResetReply& from);

  inline LabNetResetReply& operator=(const LabNetResetReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LabNetResetReply(LabNetResetReply&& from) noexcept
    : LabNetResetReply() {
    *this = ::std::move(from);
  }

  inline LabNetResetReply& operator=(LabNetResetReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LabNetResetReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LabNetResetReply* internal_default_instance() {
    return reinterpret_cast<const LabNetResetReply*>(
               &_LabNetResetReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(LabNetResetReply* other);
  friend void swap(LabNetResetReply& a, LabNetResetReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LabNetResetReply* New() const final {
    return CreateMaybeMessage<LabNetResetReply>(NULL);
  }

  LabNetResetReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LabNetResetReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LabNetResetReply& from);
  void MergeFrom(const LabNetResetReply& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LabNetResetReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool is_reset = 1;
  void clear_is_reset();
  static const int kIsResetFieldNumber = 1;
  bool is_reset() const;
  void set_is_reset(bool value);

  // @@protoc_insertion_point(class_scope:LabNetProt.Server.LabNetResetReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool is_reset_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_LabNetServer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LabNetIdReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LabNetProt.Server.LabNetIdReply) */ {
 public:
  LabNetIdReply();
  virtual ~LabNetIdReply();

  LabNetIdReply(const LabNetIdReply& from);

  inline LabNetIdReply& operator=(const LabNetIdReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LabNetIdReply(LabNetIdReply&& from) noexcept
    : LabNetIdReply() {
    *this = ::std::move(from);
  }

  inline LabNetIdReply& operator=(LabNetIdReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LabNetIdReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LabNetIdReply* internal_default_instance() {
    return reinterpret_cast<const LabNetIdReply*>(
               &_LabNetIdReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(LabNetIdReply* other);
  friend void swap(LabNetIdReply& a, LabNetIdReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LabNetIdReply* New() const final {
    return CreateMaybeMessage<LabNetIdReply>(NULL);
  }

  LabNetIdReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LabNetIdReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LabNetIdReply& from);
  void MergeFrom(const LabNetIdReply& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LabNetIdReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // uint32 major_version = 2;
  void clear_major_version();
  static const int kMajorVersionFieldNumber = 2;
  ::google::protobuf::uint32 major_version() const;
  void set_major_version(::google::protobuf::uint32 value);

  // uint32 minor_version = 3;
  void clear_minor_version();
  static const int kMinorVersionFieldNumber = 3;
  ::google::protobuf::uint32 minor_version() const;
  void set_minor_version(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:LabNetProt.Server.LabNetIdReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::uint32 major_version_;
  ::google::protobuf::uint32 minor_version_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_LabNetServer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DigitalOutLoopStartResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LabNetProt.Server.DigitalOutLoopStartResult) */ {
 public:
  DigitalOutLoopStartResult();
  virtual ~DigitalOutLoopStartResult();

  DigitalOutLoopStartResult(const DigitalOutLoopStartResult& from);

  inline DigitalOutLoopStartResult& operator=(const DigitalOutLoopStartResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DigitalOutLoopStartResult(DigitalOutLoopStartResult&& from) noexcept
    : DigitalOutLoopStartResult() {
    *this = ::std::move(from);
  }

  inline DigitalOutLoopStartResult& operator=(DigitalOutLoopStartResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DigitalOutLoopStartResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DigitalOutLoopStartResult* internal_default_instance() {
    return reinterpret_cast<const DigitalOutLoopStartResult*>(
               &_DigitalOutLoopStartResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(DigitalOutLoopStartResult* other);
  friend void swap(DigitalOutLoopStartResult& a, DigitalOutLoopStartResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DigitalOutLoopStartResult* New() const final {
    return CreateMaybeMessage<DigitalOutLoopStartResult>(NULL);
  }

  DigitalOutLoopStartResult* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DigitalOutLoopStartResult>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DigitalOutLoopStartResult& from);
  void MergeFrom(const DigitalOutLoopStartResult& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DigitalOutLoopStartResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string loop_name = 1;
  void clear_loop_name();
  static const int kLoopNameFieldNumber = 1;
  const ::std::string& loop_name() const;
  void set_loop_name(const ::std::string& value);
  #if LANG_CXX11
  void set_loop_name(::std::string&& value);
  #endif
  void set_loop_name(const char* value);
  void set_loop_name(const char* value, size_t size);
  ::std::string* mutable_loop_name();
  ::std::string* release_loop_name();
  void set_allocated_loop_name(::std::string* loop_name);

  // bool is_succeed = 2;
  void clear_is_succeed();
  static const int kIsSucceedFieldNumber = 2;
  bool is_succeed() const;
  void set_is_succeed(bool value);

  // @@protoc_insertion_point(class_scope:LabNetProt.Server.DigitalOutLoopStartResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr loop_name_;
  bool is_succeed_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_LabNetServer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DigitalOutLoopStopped : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LabNetProt.Server.DigitalOutLoopStopped) */ {
 public:
  DigitalOutLoopStopped();
  virtual ~DigitalOutLoopStopped();

  DigitalOutLoopStopped(const DigitalOutLoopStopped& from);

  inline DigitalOutLoopStopped& operator=(const DigitalOutLoopStopped& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DigitalOutLoopStopped(DigitalOutLoopStopped&& from) noexcept
    : DigitalOutLoopStopped() {
    *this = ::std::move(from);
  }

  inline DigitalOutLoopStopped& operator=(DigitalOutLoopStopped&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DigitalOutLoopStopped& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DigitalOutLoopStopped* internal_default_instance() {
    return reinterpret_cast<const DigitalOutLoopStopped*>(
               &_DigitalOutLoopStopped_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(DigitalOutLoopStopped* other);
  friend void swap(DigitalOutLoopStopped& a, DigitalOutLoopStopped& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DigitalOutLoopStopped* New() const final {
    return CreateMaybeMessage<DigitalOutLoopStopped>(NULL);
  }

  DigitalOutLoopStopped* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DigitalOutLoopStopped>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DigitalOutLoopStopped& from);
  void MergeFrom(const DigitalOutLoopStopped& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DigitalOutLoopStopped* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string loop_name = 1;
  void clear_loop_name();
  static const int kLoopNameFieldNumber = 1;
  const ::std::string& loop_name() const;
  void set_loop_name(const ::std::string& value);
  #if LANG_CXX11
  void set_loop_name(::std::string&& value);
  #endif
  void set_loop_name(const char* value);
  void set_loop_name(const char* value, size_t size);
  ::std::string* mutable_loop_name();
  ::std::string* release_loop_name();
  void set_allocated_loop_name(::std::string* loop_name);

  // @@protoc_insertion_point(class_scope:LabNetProt.Server.DigitalOutLoopStopped)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr loop_name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_LabNetServer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ChiBioPumpMoveResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LabNetProt.Server.ChiBioPumpMoveResult) */ {
 public:
  ChiBioPumpMoveResult();
  virtual ~ChiBioPumpMoveResult();

  ChiBioPumpMoveResult(const ChiBioPumpMoveResult& from);

  inline ChiBioPumpMoveResult& operator=(const ChiBioPumpMoveResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChiBioPumpMoveResult(ChiBioPumpMoveResult&& from) noexcept
    : ChiBioPumpMoveResult() {
    *this = ::std::move(from);
  }

  inline ChiBioPumpMoveResult& operator=(ChiBioPumpMoveResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChiBioPumpMoveResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChiBioPumpMoveResult* internal_default_instance() {
    return reinterpret_cast<const ChiBioPumpMoveResult*>(
               &_ChiBioPumpMoveResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(ChiBioPumpMoveResult* other);
  friend void swap(ChiBioPumpMoveResult& a, ChiBioPumpMoveResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChiBioPumpMoveResult* New() const final {
    return CreateMaybeMessage<ChiBioPumpMoveResult>(NULL);
  }

  ChiBioPumpMoveResult* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ChiBioPumpMoveResult>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ChiBioPumpMoveResult& from);
  void MergeFrom(const ChiBioPumpMoveResult& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChiBioPumpMoveResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ChiBioPumpMoveResult_MoveResult MoveResult;
  static const MoveResult STOPPED =
    ChiBioPumpMoveResult_MoveResult_STOPPED;
  static const MoveResult MOVE_DOWN =
    ChiBioPumpMoveResult_MoveResult_MOVE_DOWN;
  static const MoveResult MOVE_UP =
    ChiBioPumpMoveResult_MoveResult_MOVE_UP;
  static inline bool MoveResult_IsValid(int value) {
    return ChiBioPumpMoveResult_MoveResult_IsValid(value);
  }
  static const MoveResult MoveResult_MIN =
    ChiBioPumpMoveResult_MoveResult_MoveResult_MIN;
  static const MoveResult MoveResult_MAX =
    ChiBioPumpMoveResult_MoveResult_MoveResult_MAX;
  static const int MoveResult_ARRAYSIZE =
    ChiBioPumpMoveResult_MoveResult_MoveResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MoveResult_descriptor() {
    return ChiBioPumpMoveResult_MoveResult_descriptor();
  }
  static inline const ::std::string& MoveResult_Name(MoveResult value) {
    return ChiBioPumpMoveResult_MoveResult_Name(value);
  }
  static inline bool MoveResult_Parse(const ::std::string& name,
      MoveResult* value) {
    return ChiBioPumpMoveResult_MoveResult_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // uint32 pump_id = 1;
  void clear_pump_id();
  static const int kPumpIdFieldNumber = 1;
  ::google::protobuf::uint32 pump_id() const;
  void set_pump_id(::google::protobuf::uint32 value);

  // .LabNetProt.Server.ChiBioPumpMoveResult.MoveResult result = 2;
  void clear_result();
  static const int kResultFieldNumber = 2;
  ::LabNetProt::Server::ChiBioPumpMoveResult_MoveResult result() const;
  void set_result(::LabNetProt::Server::ChiBioPumpMoveResult_MoveResult value);

  // @@protoc_insertion_point(class_scope:LabNetProt.Server.ChiBioPumpMoveResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 pump_id_;
  int result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_LabNetServer_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DigitalOutState

// .LabNetProt.PinId pin = 1;
inline bool DigitalOutState::has_pin() const {
  return this != internal_default_instance() && pin_ != NULL;
}
inline const ::LabNetProt::PinId& DigitalOutState::_internal_pin() const {
  return *pin_;
}
inline const ::LabNetProt::PinId& DigitalOutState::pin() const {
  const ::LabNetProt::PinId* p = pin_;
  // @@protoc_insertion_point(field_get:LabNetProt.Server.DigitalOutState.pin)
  return p != NULL ? *p : *reinterpret_cast<const ::LabNetProt::PinId*>(
      &::LabNetProt::_PinId_default_instance_);
}
inline ::LabNetProt::PinId* DigitalOutState::release_pin() {
  // @@protoc_insertion_point(field_release:LabNetProt.Server.DigitalOutState.pin)
  
  ::LabNetProt::PinId* temp = pin_;
  pin_ = NULL;
  return temp;
}
inline ::LabNetProt::PinId* DigitalOutState::mutable_pin() {
  
  if (pin_ == NULL) {
    auto* p = CreateMaybeMessage<::LabNetProt::PinId>(GetArenaNoVirtual());
    pin_ = p;
  }
  // @@protoc_insertion_point(field_mutable:LabNetProt.Server.DigitalOutState.pin)
  return pin_;
}
inline void DigitalOutState::set_allocated_pin(::LabNetProt::PinId* pin) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(pin_);
  }
  if (pin) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pin = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pin, submessage_arena);
    }
    
  } else {
    
  }
  pin_ = pin;
  // @@protoc_insertion_point(field_set_allocated:LabNetProt.Server.DigitalOutState.pin)
}

// bool state = 2;
inline void DigitalOutState::clear_state() {
  state_ = false;
}
inline bool DigitalOutState::state() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Server.DigitalOutState.state)
  return state_;
}
inline void DigitalOutState::set_state(bool value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:LabNetProt.Server.DigitalOutState.state)
}

// .google.protobuf.Timestamp time = 3;
inline bool DigitalOutState::has_time() const {
  return this != internal_default_instance() && time_ != NULL;
}
inline const ::google::protobuf::Timestamp& DigitalOutState::_internal_time() const {
  return *time_;
}
inline const ::google::protobuf::Timestamp& DigitalOutState::time() const {
  const ::google::protobuf::Timestamp* p = time_;
  // @@protoc_insertion_point(field_get:LabNetProt.Server.DigitalOutState.time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* DigitalOutState::release_time() {
  // @@protoc_insertion_point(field_release:LabNetProt.Server.DigitalOutState.time)
  
  ::google::protobuf::Timestamp* temp = time_;
  time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* DigitalOutState::mutable_time() {
  
  if (time_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:LabNetProt.Server.DigitalOutState.time)
  return time_;
}
inline void DigitalOutState::set_allocated_time(::google::protobuf::Timestamp* time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(time_);
  }
  if (time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(time)->GetArena();
    if (message_arena != submessage_arena) {
      time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, time, submessage_arena);
    }
    
  } else {
    
  }
  time_ = time;
  // @@protoc_insertion_point(field_set_allocated:LabNetProt.Server.DigitalOutState.time)
}

// -------------------------------------------------------------------

// DigitalInState

// .LabNetProt.PinId pin = 1;
inline bool DigitalInState::has_pin() const {
  return this != internal_default_instance() && pin_ != NULL;
}
inline const ::LabNetProt::PinId& DigitalInState::_internal_pin() const {
  return *pin_;
}
inline const ::LabNetProt::PinId& DigitalInState::pin() const {
  const ::LabNetProt::PinId* p = pin_;
  // @@protoc_insertion_point(field_get:LabNetProt.Server.DigitalInState.pin)
  return p != NULL ? *p : *reinterpret_cast<const ::LabNetProt::PinId*>(
      &::LabNetProt::_PinId_default_instance_);
}
inline ::LabNetProt::PinId* DigitalInState::release_pin() {
  // @@protoc_insertion_point(field_release:LabNetProt.Server.DigitalInState.pin)
  
  ::LabNetProt::PinId* temp = pin_;
  pin_ = NULL;
  return temp;
}
inline ::LabNetProt::PinId* DigitalInState::mutable_pin() {
  
  if (pin_ == NULL) {
    auto* p = CreateMaybeMessage<::LabNetProt::PinId>(GetArenaNoVirtual());
    pin_ = p;
  }
  // @@protoc_insertion_point(field_mutable:LabNetProt.Server.DigitalInState.pin)
  return pin_;
}
inline void DigitalInState::set_allocated_pin(::LabNetProt::PinId* pin) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(pin_);
  }
  if (pin) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pin = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pin, submessage_arena);
    }
    
  } else {
    
  }
  pin_ = pin;
  // @@protoc_insertion_point(field_set_allocated:LabNetProt.Server.DigitalInState.pin)
}

// bool state = 2;
inline void DigitalInState::clear_state() {
  state_ = false;
}
inline bool DigitalInState::state() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Server.DigitalInState.state)
  return state_;
}
inline void DigitalInState::set_state(bool value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:LabNetProt.Server.DigitalInState.state)
}

// .google.protobuf.Timestamp time = 3;
inline bool DigitalInState::has_time() const {
  return this != internal_default_instance() && time_ != NULL;
}
inline const ::google::protobuf::Timestamp& DigitalInState::_internal_time() const {
  return *time_;
}
inline const ::google::protobuf::Timestamp& DigitalInState::time() const {
  const ::google::protobuf::Timestamp* p = time_;
  // @@protoc_insertion_point(field_get:LabNetProt.Server.DigitalInState.time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* DigitalInState::release_time() {
  // @@protoc_insertion_point(field_release:LabNetProt.Server.DigitalInState.time)
  
  ::google::protobuf::Timestamp* temp = time_;
  time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* DigitalInState::mutable_time() {
  
  if (time_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:LabNetProt.Server.DigitalInState.time)
  return time_;
}
inline void DigitalInState::set_allocated_time(::google::protobuf::Timestamp* time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(time_);
  }
  if (time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(time)->GetArena();
    if (message_arena != submessage_arena) {
      time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, time, submessage_arena);
    }
    
  } else {
    
  }
  time_ = time;
  // @@protoc_insertion_point(field_set_allocated:LabNetProt.Server.DigitalInState.time)
}

// -------------------------------------------------------------------

// NewByteData

// .LabNetProt.PinId pin = 1;
inline bool NewByteData::has_pin() const {
  return this != internal_default_instance() && pin_ != NULL;
}
inline const ::LabNetProt::PinId& NewByteData::_internal_pin() const {
  return *pin_;
}
inline const ::LabNetProt::PinId& NewByteData::pin() const {
  const ::LabNetProt::PinId* p = pin_;
  // @@protoc_insertion_point(field_get:LabNetProt.Server.NewByteData.pin)
  return p != NULL ? *p : *reinterpret_cast<const ::LabNetProt::PinId*>(
      &::LabNetProt::_PinId_default_instance_);
}
inline ::LabNetProt::PinId* NewByteData::release_pin() {
  // @@protoc_insertion_point(field_release:LabNetProt.Server.NewByteData.pin)
  
  ::LabNetProt::PinId* temp = pin_;
  pin_ = NULL;
  return temp;
}
inline ::LabNetProt::PinId* NewByteData::mutable_pin() {
  
  if (pin_ == NULL) {
    auto* p = CreateMaybeMessage<::LabNetProt::PinId>(GetArenaNoVirtual());
    pin_ = p;
  }
  // @@protoc_insertion_point(field_mutable:LabNetProt.Server.NewByteData.pin)
  return pin_;
}
inline void NewByteData::set_allocated_pin(::LabNetProt::PinId* pin) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(pin_);
  }
  if (pin) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pin = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pin, submessage_arena);
    }
    
  } else {
    
  }
  pin_ = pin;
  // @@protoc_insertion_point(field_set_allocated:LabNetProt.Server.NewByteData.pin)
}

// bytes data = 2;
inline void NewByteData::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NewByteData::data() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Server.NewByteData.data)
  return data_.GetNoArena();
}
inline void NewByteData::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LabNetProt.Server.NewByteData.data)
}
#if LANG_CXX11
inline void NewByteData::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LabNetProt.Server.NewByteData.data)
}
#endif
inline void NewByteData::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LabNetProt.Server.NewByteData.data)
}
inline void NewByteData::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LabNetProt.Server.NewByteData.data)
}
inline ::std::string* NewByteData::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:LabNetProt.Server.NewByteData.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NewByteData::release_data() {
  // @@protoc_insertion_point(field_release:LabNetProt.Server.NewByteData.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewByteData::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:LabNetProt.Server.NewByteData.data)
}

// .google.protobuf.Timestamp time = 3;
inline bool NewByteData::has_time() const {
  return this != internal_default_instance() && time_ != NULL;
}
inline const ::google::protobuf::Timestamp& NewByteData::_internal_time() const {
  return *time_;
}
inline const ::google::protobuf::Timestamp& NewByteData::time() const {
  const ::google::protobuf::Timestamp* p = time_;
  // @@protoc_insertion_point(field_get:LabNetProt.Server.NewByteData.time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* NewByteData::release_time() {
  // @@protoc_insertion_point(field_release:LabNetProt.Server.NewByteData.time)
  
  ::google::protobuf::Timestamp* temp = time_;
  time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* NewByteData::mutable_time() {
  
  if (time_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:LabNetProt.Server.NewByteData.time)
  return time_;
}
inline void NewByteData::set_allocated_time(::google::protobuf::Timestamp* time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(time_);
  }
  if (time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(time)->GetArena();
    if (message_arena != submessage_arena) {
      time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, time, submessage_arena);
    }
    
  } else {
    
  }
  time_ = time;
  // @@protoc_insertion_point(field_set_allocated:LabNetProt.Server.NewByteData.time)
}

// -------------------------------------------------------------------

// DataWriteComplete

// .LabNetProt.PinId pin = 1;
inline bool DataWriteComplete::has_pin() const {
  return this != internal_default_instance() && pin_ != NULL;
}
inline const ::LabNetProt::PinId& DataWriteComplete::_internal_pin() const {
  return *pin_;
}
inline const ::LabNetProt::PinId& DataWriteComplete::pin() const {
  const ::LabNetProt::PinId* p = pin_;
  // @@protoc_insertion_point(field_get:LabNetProt.Server.DataWriteComplete.pin)
  return p != NULL ? *p : *reinterpret_cast<const ::LabNetProt::PinId*>(
      &::LabNetProt::_PinId_default_instance_);
}
inline ::LabNetProt::PinId* DataWriteComplete::release_pin() {
  // @@protoc_insertion_point(field_release:LabNetProt.Server.DataWriteComplete.pin)
  
  ::LabNetProt::PinId* temp = pin_;
  pin_ = NULL;
  return temp;
}
inline ::LabNetProt::PinId* DataWriteComplete::mutable_pin() {
  
  if (pin_ == NULL) {
    auto* p = CreateMaybeMessage<::LabNetProt::PinId>(GetArenaNoVirtual());
    pin_ = p;
  }
  // @@protoc_insertion_point(field_mutable:LabNetProt.Server.DataWriteComplete.pin)
  return pin_;
}
inline void DataWriteComplete::set_allocated_pin(::LabNetProt::PinId* pin) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(pin_);
  }
  if (pin) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pin = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pin, submessage_arena);
    }
    
  } else {
    
  }
  pin_ = pin;
  // @@protoc_insertion_point(field_set_allocated:LabNetProt.Server.DataWriteComplete.pin)
}

// -------------------------------------------------------------------

// InterfaceInitResult

// .LabNetProt.Interfaces interface = 1;
inline void InterfaceInitResult::clear_interface() {
  interface_ = 0;
}
inline ::LabNetProt::Interfaces InterfaceInitResult::interface() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Server.InterfaceInitResult.interface)
  return static_cast< ::LabNetProt::Interfaces >(interface_);
}
inline void InterfaceInitResult::set_interface(::LabNetProt::Interfaces value) {
  
  interface_ = value;
  // @@protoc_insertion_point(field_set:LabNetProt.Server.InterfaceInitResult.interface)
}

// bool is_succeed = 2;
inline void InterfaceInitResult::clear_is_succeed() {
  is_succeed_ = false;
}
inline bool InterfaceInitResult::is_succeed() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Server.InterfaceInitResult.is_succeed)
  return is_succeed_;
}
inline void InterfaceInitResult::set_is_succeed(bool value) {
  
  is_succeed_ = value;
  // @@protoc_insertion_point(field_set:LabNetProt.Server.InterfaceInitResult.is_succeed)
}

// -------------------------------------------------------------------

// InterfaceLost

// .LabNetProt.Interfaces interface = 1;
inline void InterfaceLost::clear_interface() {
  interface_ = 0;
}
inline ::LabNetProt::Interfaces InterfaceLost::interface() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Server.InterfaceLost.interface)
  return static_cast< ::LabNetProt::Interfaces >(interface_);
}
inline void InterfaceLost::set_interface(::LabNetProt::Interfaces value) {
  
  interface_ = value;
  // @@protoc_insertion_point(field_set:LabNetProt.Server.InterfaceLost.interface)
}

// -------------------------------------------------------------------

// InterfaceReconnected

// .LabNetProt.Interfaces interface = 1;
inline void InterfaceReconnected::clear_interface() {
  interface_ = 0;
}
inline ::LabNetProt::Interfaces InterfaceReconnected::interface() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Server.InterfaceReconnected.interface)
  return static_cast< ::LabNetProt::Interfaces >(interface_);
}
inline void InterfaceReconnected::set_interface(::LabNetProt::Interfaces value) {
  
  interface_ = value;
  // @@protoc_insertion_point(field_set:LabNetProt.Server.InterfaceReconnected.interface)
}

// -------------------------------------------------------------------

// DigitalInInitResult

// .LabNetProt.Interfaces interface = 1;
inline void DigitalInInitResult::clear_interface() {
  interface_ = 0;
}
inline ::LabNetProt::Interfaces DigitalInInitResult::interface() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Server.DigitalInInitResult.interface)
  return static_cast< ::LabNetProt::Interfaces >(interface_);
}
inline void DigitalInInitResult::set_interface(::LabNetProt::Interfaces value) {
  
  interface_ = value;
  // @@protoc_insertion_point(field_set:LabNetProt.Server.DigitalInInitResult.interface)
}

// uint32 pin = 2;
inline void DigitalInInitResult::clear_pin() {
  pin_ = 0u;
}
inline ::google::protobuf::uint32 DigitalInInitResult::pin() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Server.DigitalInInitResult.pin)
  return pin_;
}
inline void DigitalInInitResult::set_pin(::google::protobuf::uint32 value) {
  
  pin_ = value;
  // @@protoc_insertion_point(field_set:LabNetProt.Server.DigitalInInitResult.pin)
}

// bool is_succeed = 3;
inline void DigitalInInitResult::clear_is_succeed() {
  is_succeed_ = false;
}
inline bool DigitalInInitResult::is_succeed() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Server.DigitalInInitResult.is_succeed)
  return is_succeed_;
}
inline void DigitalInInitResult::set_is_succeed(bool value) {
  
  is_succeed_ = value;
  // @@protoc_insertion_point(field_set:LabNetProt.Server.DigitalInInitResult.is_succeed)
}

// -------------------------------------------------------------------

// DigitalOutInitResult

// .LabNetProt.Interfaces interface = 1;
inline void DigitalOutInitResult::clear_interface() {
  interface_ = 0;
}
inline ::LabNetProt::Interfaces DigitalOutInitResult::interface() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Server.DigitalOutInitResult.interface)
  return static_cast< ::LabNetProt::Interfaces >(interface_);
}
inline void DigitalOutInitResult::set_interface(::LabNetProt::Interfaces value) {
  
  interface_ = value;
  // @@protoc_insertion_point(field_set:LabNetProt.Server.DigitalOutInitResult.interface)
}

// uint32 pin = 2;
inline void DigitalOutInitResult::clear_pin() {
  pin_ = 0u;
}
inline ::google::protobuf::uint32 DigitalOutInitResult::pin() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Server.DigitalOutInitResult.pin)
  return pin_;
}
inline void DigitalOutInitResult::set_pin(::google::protobuf::uint32 value) {
  
  pin_ = value;
  // @@protoc_insertion_point(field_set:LabNetProt.Server.DigitalOutInitResult.pin)
}

// bool is_succeed = 3;
inline void DigitalOutInitResult::clear_is_succeed() {
  is_succeed_ = false;
}
inline bool DigitalOutInitResult::is_succeed() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Server.DigitalOutInitResult.is_succeed)
  return is_succeed_;
}
inline void DigitalOutInitResult::set_is_succeed(bool value) {
  
  is_succeed_ = value;
  // @@protoc_insertion_point(field_set:LabNetProt.Server.DigitalOutInitResult.is_succeed)
}

// -------------------------------------------------------------------

// OnlyOneConnectionAllowed

// -------------------------------------------------------------------

// LabNetResetReply

// bool is_reset = 1;
inline void LabNetResetReply::clear_is_reset() {
  is_reset_ = false;
}
inline bool LabNetResetReply::is_reset() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Server.LabNetResetReply.is_reset)
  return is_reset_;
}
inline void LabNetResetReply::set_is_reset(bool value) {
  
  is_reset_ = value;
  // @@protoc_insertion_point(field_set:LabNetProt.Server.LabNetResetReply.is_reset)
}

// -------------------------------------------------------------------

// LabNetIdReply

// string id = 1;
inline void LabNetIdReply::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LabNetIdReply::id() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Server.LabNetIdReply.id)
  return id_.GetNoArena();
}
inline void LabNetIdReply::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LabNetProt.Server.LabNetIdReply.id)
}
#if LANG_CXX11
inline void LabNetIdReply::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LabNetProt.Server.LabNetIdReply.id)
}
#endif
inline void LabNetIdReply::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LabNetProt.Server.LabNetIdReply.id)
}
inline void LabNetIdReply::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LabNetProt.Server.LabNetIdReply.id)
}
inline ::std::string* LabNetIdReply::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:LabNetProt.Server.LabNetIdReply.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LabNetIdReply::release_id() {
  // @@protoc_insertion_point(field_release:LabNetProt.Server.LabNetIdReply.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LabNetIdReply::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:LabNetProt.Server.LabNetIdReply.id)
}

// uint32 major_version = 2;
inline void LabNetIdReply::clear_major_version() {
  major_version_ = 0u;
}
inline ::google::protobuf::uint32 LabNetIdReply::major_version() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Server.LabNetIdReply.major_version)
  return major_version_;
}
inline void LabNetIdReply::set_major_version(::google::protobuf::uint32 value) {
  
  major_version_ = value;
  // @@protoc_insertion_point(field_set:LabNetProt.Server.LabNetIdReply.major_version)
}

// uint32 minor_version = 3;
inline void LabNetIdReply::clear_minor_version() {
  minor_version_ = 0u;
}
inline ::google::protobuf::uint32 LabNetIdReply::minor_version() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Server.LabNetIdReply.minor_version)
  return minor_version_;
}
inline void LabNetIdReply::set_minor_version(::google::protobuf::uint32 value) {
  
  minor_version_ = value;
  // @@protoc_insertion_point(field_set:LabNetProt.Server.LabNetIdReply.minor_version)
}

// -------------------------------------------------------------------

// DigitalOutLoopStartResult

// string loop_name = 1;
inline void DigitalOutLoopStartResult::clear_loop_name() {
  loop_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DigitalOutLoopStartResult::loop_name() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Server.DigitalOutLoopStartResult.loop_name)
  return loop_name_.GetNoArena();
}
inline void DigitalOutLoopStartResult::set_loop_name(const ::std::string& value) {
  
  loop_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LabNetProt.Server.DigitalOutLoopStartResult.loop_name)
}
#if LANG_CXX11
inline void DigitalOutLoopStartResult::set_loop_name(::std::string&& value) {
  
  loop_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LabNetProt.Server.DigitalOutLoopStartResult.loop_name)
}
#endif
inline void DigitalOutLoopStartResult::set_loop_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  loop_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LabNetProt.Server.DigitalOutLoopStartResult.loop_name)
}
inline void DigitalOutLoopStartResult::set_loop_name(const char* value, size_t size) {
  
  loop_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LabNetProt.Server.DigitalOutLoopStartResult.loop_name)
}
inline ::std::string* DigitalOutLoopStartResult::mutable_loop_name() {
  
  // @@protoc_insertion_point(field_mutable:LabNetProt.Server.DigitalOutLoopStartResult.loop_name)
  return loop_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DigitalOutLoopStartResult::release_loop_name() {
  // @@protoc_insertion_point(field_release:LabNetProt.Server.DigitalOutLoopStartResult.loop_name)
  
  return loop_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DigitalOutLoopStartResult::set_allocated_loop_name(::std::string* loop_name) {
  if (loop_name != NULL) {
    
  } else {
    
  }
  loop_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), loop_name);
  // @@protoc_insertion_point(field_set_allocated:LabNetProt.Server.DigitalOutLoopStartResult.loop_name)
}

// bool is_succeed = 2;
inline void DigitalOutLoopStartResult::clear_is_succeed() {
  is_succeed_ = false;
}
inline bool DigitalOutLoopStartResult::is_succeed() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Server.DigitalOutLoopStartResult.is_succeed)
  return is_succeed_;
}
inline void DigitalOutLoopStartResult::set_is_succeed(bool value) {
  
  is_succeed_ = value;
  // @@protoc_insertion_point(field_set:LabNetProt.Server.DigitalOutLoopStartResult.is_succeed)
}

// -------------------------------------------------------------------

// DigitalOutLoopStopped

// string loop_name = 1;
inline void DigitalOutLoopStopped::clear_loop_name() {
  loop_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DigitalOutLoopStopped::loop_name() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Server.DigitalOutLoopStopped.loop_name)
  return loop_name_.GetNoArena();
}
inline void DigitalOutLoopStopped::set_loop_name(const ::std::string& value) {
  
  loop_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LabNetProt.Server.DigitalOutLoopStopped.loop_name)
}
#if LANG_CXX11
inline void DigitalOutLoopStopped::set_loop_name(::std::string&& value) {
  
  loop_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LabNetProt.Server.DigitalOutLoopStopped.loop_name)
}
#endif
inline void DigitalOutLoopStopped::set_loop_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  loop_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LabNetProt.Server.DigitalOutLoopStopped.loop_name)
}
inline void DigitalOutLoopStopped::set_loop_name(const char* value, size_t size) {
  
  loop_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LabNetProt.Server.DigitalOutLoopStopped.loop_name)
}
inline ::std::string* DigitalOutLoopStopped::mutable_loop_name() {
  
  // @@protoc_insertion_point(field_mutable:LabNetProt.Server.DigitalOutLoopStopped.loop_name)
  return loop_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DigitalOutLoopStopped::release_loop_name() {
  // @@protoc_insertion_point(field_release:LabNetProt.Server.DigitalOutLoopStopped.loop_name)
  
  return loop_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DigitalOutLoopStopped::set_allocated_loop_name(::std::string* loop_name) {
  if (loop_name != NULL) {
    
  } else {
    
  }
  loop_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), loop_name);
  // @@protoc_insertion_point(field_set_allocated:LabNetProt.Server.DigitalOutLoopStopped.loop_name)
}

// -------------------------------------------------------------------

// ChiBioPumpMoveResult

// uint32 pump_id = 1;
inline void ChiBioPumpMoveResult::clear_pump_id() {
  pump_id_ = 0u;
}
inline ::google::protobuf::uint32 ChiBioPumpMoveResult::pump_id() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Server.ChiBioPumpMoveResult.pump_id)
  return pump_id_;
}
inline void ChiBioPumpMoveResult::set_pump_id(::google::protobuf::uint32 value) {
  
  pump_id_ = value;
  // @@protoc_insertion_point(field_set:LabNetProt.Server.ChiBioPumpMoveResult.pump_id)
}

// .LabNetProt.Server.ChiBioPumpMoveResult.MoveResult result = 2;
inline void ChiBioPumpMoveResult::clear_result() {
  result_ = 0;
}
inline ::LabNetProt::Server::ChiBioPumpMoveResult_MoveResult ChiBioPumpMoveResult::result() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Server.ChiBioPumpMoveResult.result)
  return static_cast< ::LabNetProt::Server::ChiBioPumpMoveResult_MoveResult >(result_);
}
inline void ChiBioPumpMoveResult::set_result(::LabNetProt::Server::ChiBioPumpMoveResult_MoveResult value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:LabNetProt.Server.ChiBioPumpMoveResult.result)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Server
}  // namespace LabNetProt

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::LabNetProt::Server::ChiBioPumpMoveResult_MoveResult> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::LabNetProt::Server::ChiBioPumpMoveResult_MoveResult>() {
  return ::LabNetProt::Server::ChiBioPumpMoveResult_MoveResult_descriptor();
}
template <> struct is_proto_enum< ::LabNetProt::Server::ServerMessageType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::LabNetProt::Server::ServerMessageType>() {
  return ::LabNetProt::Server::ServerMessageType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_LabNetServer_2eproto
