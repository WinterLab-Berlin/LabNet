// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: LabNetClient.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace LabNetProt.Client {

  /// <summary>Holder for reflection information generated from LabNetClient.proto</summary>
  public static partial class LabNetClientReflection {

    #region Descriptor
    /// <summary>File descriptor for LabNetClient.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static LabNetClientReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChJMYWJOZXRDbGllbnQucHJvdG8SEUxhYk5ldFByb3QuQ2xpZW50GgxMYWJO",
            "ZXQucHJvdG8iDQoLSW9Cb2FyZEluaXQiswEKFElvQm9hcmRJbml0RGlnaXRh",
            "bEluEgsKA3BpbhgBIAEoDRJICg5yZXNpc3Rvcl9zdGF0ZRgCIAEoDjIwLkxh",
            "Yk5ldFByb3QuQ2xpZW50LklvQm9hcmRJbml0RGlnaXRhbEluLlJlc2lzdG9y",
            "EhMKC2lzX2ludmVydGVkGAMgASgIIi8KCFJlc2lzdG9yEgcKA09GRhAAEg0K",
            "CVBVTExfRE9XThABEgsKB1BVTExfVVAQAiI5ChVJb0JvYXJkSW5pdERpZ2l0",
            "YWxPdXQSCwoDcGluGAEgASgNEhMKC2lzX2ludmVydGVkGAIgASgIImkKDVJm",
            "aWRCb2FyZEluaXQSFgoOYW50ZW5uYV9waGFzZTEYASABKA0SFgoOYW50ZW5u",
            "YV9waGFzZTIYAiABKA0SFgoOcGhhc2VfZHVyYXRpb24YAyABKA0SEAoIaW52",
            "ZXJ0ZWQYBCABKAgiYQoXUmZpZEJvYXJkU2V0UGhhc2VNYXRyaXgSFgoOYW50",
            "ZW5uYV9waGFzZTEYASABKA0SFgoOYW50ZW5uYV9waGFzZTIYAiABKA0SFgoO",
            "cGhhc2VfZHVyYXRpb24YAyABKA0iOQoIVWFydEluaXQSHwoEcG9ydBgBIAEo",
            "DjIRLkxhYk5ldFByb3QuVWFydHMSDAoEYmF1ZBgCIAEoDSI+Cg1VYXJ0V3Jp",
            "dGVEYXRhEh8KBHBvcnQYASABKA4yES5MYWJOZXRQcm90LlVhcnRzEgwKBGRh",
            "dGEYAiABKAwiVgoRVWFydEluaXREaWdpdGFsSW4SHwoEcG9ydBgBIAEoDjIR",
            "LkxhYk5ldFByb3QuVWFydHMSCwoDcGluGAIgASgNEhMKC2lzX2ludmVydGVk",
            "GAMgASgIIlcKElVhcnRJbml0RGlnaXRhbE91dBIfCgRwb3J0GAEgASgOMhEu",
            "TGFiTmV0UHJvdC5VYXJ0cxILCgNwaW4YAiABKA0SEwoLaXNfaW52ZXJ0ZWQY",
            "AyABKAgiEgoQR3Bpb1dpcmluZ1BpSW5pdCK9AQoZR3Bpb1dpcmluZ1BpSW5p",
            "dERpZ2l0YWxJbhILCgNwaW4YASABKA0STQoOcmVzaXN0b3Jfc3RhdGUYAiAB",
            "KA4yNS5MYWJOZXRQcm90LkNsaWVudC5HcGlvV2lyaW5nUGlJbml0RGlnaXRh",
            "bEluLlJlc2lzdG9yEhMKC2lzX2ludmVydGVkGAMgASgIIi8KCFJlc2lzdG9y",
            "EgcKA09GRhAAEg0KCVBVTExfRE9XThABEgsKB1BVTExfVVAQAiI+ChpHcGlv",
            "V2lyaW5nUGlJbml0RGlnaXRhbE91dBILCgNwaW4YASABKA0SEwoLaXNfaW52",
            "ZXJ0ZWQYAiABKAgiPQoNRGlnaXRhbE91dFNldBIdCgJpZBgBIAEoCzIRLkxh",
            "Yk5ldFByb3QuUGluSWQSDQoFc3RhdGUYAiABKAgibQoPRGlnaXRhbE91dFB1",
            "bHNlEh0KAmlkGAEgASgLMhEuTGFiTmV0UHJvdC5QaW5JZBIVCg1oaWdoX2R1",
            "cmF0aW9uGAIgASgNEhQKDGxvd19kdXJhdGlvbhgDIAEoDRIOCgZwdWxzZXMY",
            "BCABKA0i7wEKE1N0YXJ0RGlnaXRhbE91dExvb3ASEQoJbG9vcF9uYW1lGAEg",
            "ASgJEhIKCmxvb3BfcGF1c2UYAiABKA0SVgoPZGlnaXRhbF9vdXRwdXRzGAMg",
            "AygLMj0uTGFiTmV0UHJvdC5DbGllbnQuU3RhcnREaWdpdGFsT3V0TG9vcC5E",
            "aWdpdGFsT3V0cHV0UGFyYW1ldGVyGlkKFkRpZ2l0YWxPdXRwdXRQYXJhbWV0",
            "ZXISHQoCaWQYASABKAsyES5MYWJOZXRQcm90LlBpbklkEg4KBm9mZnNldBgC",
            "IAEoDRIQCghkdXJhdGlvbhgDIAEoDSInChJTdG9wRGlnaXRhbE91dExvb3AS",
            "EQoJbG9vcF9uYW1lGAEgASgJIhQKEkxhYk5ldFJlc2V0UmVxdWVzdCIRCg9M",
            "YWJOZXRJZFJlcXVlc3QiCwoJSW5pdFNvdW5kIq4BCg9Jbml0U291bmRTaWdu",
            "YWwSNwoLc2lnbmFsX3R5cGUYASABKA4yIi5MYWJOZXRQcm90LkNsaWVudC5T",
            "b3VuZFNpZ25hbFR5cGUSCgoCaWQYAiABKA0SEQoJZnJlcXVlbmN5GAMgASgN",
            "EhUKDWZyZXF1ZW5jeV9lbmQYBCABKA0SHAoUc3dlZXBfbGVuZ3RoX3NlY29u",
            "ZHMYBSABKAISDgoGdm9sdW1lGAYgASgCKpYEChFDbGllbnRNZXNzYWdlVHlw",
            "ZRIICgROT05FEAASFQoRTEFCTkVUX0lEX1JFUVVFU1QQARIYChRMQUJORVRf",
            "UkVTRVRfUkVRVUVTVBACEhEKDUlPX0JPQVJEX0lOSVQQAxIcChhJT19CT0FS",
            "RF9JTklUX0RJR0lUQUxfSU4QBBIdChlJT19CT0FSRF9JTklUX0RJR0lUQUxf",
            "T1VUEAUSEwoPUkZJRF9CT0FSRF9JTklUEAYSHwobUkZJRF9CT0FSRF9TRVRf",
            "UEhBU0VfTUFUUklYEAcSDQoJVUFSVF9JTklUEAgSEwoPVUFSVF9XUklURV9E",
            "QVRBEAkSEwoPRElHSVRBTF9PVVRfU0VUEAoSFQoRRElHSVRBTF9PVVRfUFVM",
            "U0UQCxIaChZTVEFSVF9ESUdJVEFMX09VVF9MT09QEAwSGQoVU1RPUF9ESUdJ",
            "VEFMX09VVF9MT09QEA0SFgoSR1BJT19XSVJJTkdQSV9JTklUEA4SIQodR1BJ",
            "T19XSVJJTkdQSV9JTklUX0RJR0lUQUxfSU4QDxIiCh5HUElPX1dJUklOR1BJ",
            "X0lOSVRfRElHSVRBTF9PVVQQEBIOCgpJTklUX1NPVU5EEBESFQoRSU5JVF9T",
            "T1VORF9TSUdOQUwQEhIYChRVQVJUX0lOSVRfRElHSVRBTF9JThATEhkKFVVB",
            "UlRfSU5JVF9ESUdJVEFMX09VVBAUKoQBCg9Tb3VuZFNpZ25hbFR5cGUSDQoJ",
            "U0lORV9XQVZFEAASDwoLU1FVQVJFX1dBVkUQARIRCg1UUklBTkdMRV9XQVZF",
            "EAISEgoOU0FXX1RPT1RIX1dBVkUQAxIPCgtXSElURV9OT0lTRRAEEg4KClBJ",
            "TktfTk9JU0UQBRIJCgVTV0VFUBAGYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::LabNetProt.LabNetReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::LabNetProt.Client.ClientMessageType), typeof(global::LabNetProt.Client.SoundSignalType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::LabNetProt.Client.IoBoardInit), global::LabNetProt.Client.IoBoardInit.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LabNetProt.Client.IoBoardInitDigitalIn), global::LabNetProt.Client.IoBoardInitDigitalIn.Parser, new[]{ "Pin", "ResistorState", "IsInverted" }, null, new[]{ typeof(global::LabNetProt.Client.IoBoardInitDigitalIn.Types.Resistor) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LabNetProt.Client.IoBoardInitDigitalOut), global::LabNetProt.Client.IoBoardInitDigitalOut.Parser, new[]{ "Pin", "IsInverted" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LabNetProt.Client.RfidBoardInit), global::LabNetProt.Client.RfidBoardInit.Parser, new[]{ "AntennaPhase1", "AntennaPhase2", "PhaseDuration", "Inverted" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LabNetProt.Client.RfidBoardSetPhaseMatrix), global::LabNetProt.Client.RfidBoardSetPhaseMatrix.Parser, new[]{ "AntennaPhase1", "AntennaPhase2", "PhaseDuration" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LabNetProt.Client.UartInit), global::LabNetProt.Client.UartInit.Parser, new[]{ "Port", "Baud" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LabNetProt.Client.UartWriteData), global::LabNetProt.Client.UartWriteData.Parser, new[]{ "Port", "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LabNetProt.Client.UartInitDigitalIn), global::LabNetProt.Client.UartInitDigitalIn.Parser, new[]{ "Port", "Pin", "IsInverted" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LabNetProt.Client.UartInitDigitalOut), global::LabNetProt.Client.UartInitDigitalOut.Parser, new[]{ "Port", "Pin", "IsInverted" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LabNetProt.Client.GpioWiringPiInit), global::LabNetProt.Client.GpioWiringPiInit.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LabNetProt.Client.GpioWiringPiInitDigitalIn), global::LabNetProt.Client.GpioWiringPiInitDigitalIn.Parser, new[]{ "Pin", "ResistorState", "IsInverted" }, null, new[]{ typeof(global::LabNetProt.Client.GpioWiringPiInitDigitalIn.Types.Resistor) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LabNetProt.Client.GpioWiringPiInitDigitalOut), global::LabNetProt.Client.GpioWiringPiInitDigitalOut.Parser, new[]{ "Pin", "IsInverted" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LabNetProt.Client.DigitalOutSet), global::LabNetProt.Client.DigitalOutSet.Parser, new[]{ "Id", "State" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LabNetProt.Client.DigitalOutPulse), global::LabNetProt.Client.DigitalOutPulse.Parser, new[]{ "Id", "HighDuration", "LowDuration", "Pulses" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LabNetProt.Client.StartDigitalOutLoop), global::LabNetProt.Client.StartDigitalOutLoop.Parser, new[]{ "LoopName", "LoopPause", "DigitalOutputs" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::LabNetProt.Client.StartDigitalOutLoop.Types.DigitalOutputParameter), global::LabNetProt.Client.StartDigitalOutLoop.Types.DigitalOutputParameter.Parser, new[]{ "Id", "Offset", "Duration" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::LabNetProt.Client.StopDigitalOutLoop), global::LabNetProt.Client.StopDigitalOutLoop.Parser, new[]{ "LoopName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LabNetProt.Client.LabNetResetRequest), global::LabNetProt.Client.LabNetResetRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LabNetProt.Client.LabNetIdRequest), global::LabNetProt.Client.LabNetIdRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LabNetProt.Client.InitSound), global::LabNetProt.Client.InitSound.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LabNetProt.Client.InitSoundSignal), global::LabNetProt.Client.InitSoundSignal.Parser, new[]{ "SignalType", "Id", "Frequency", "FrequencyEnd", "SweepLengthSeconds", "Volume" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum ClientMessageType {
    [pbr::OriginalName("NONE")] None = 0,
    [pbr::OriginalName("LABNET_ID_REQUEST")] LabnetIdRequest = 1,
    [pbr::OriginalName("LABNET_RESET_REQUEST")] LabnetResetRequest = 2,
    [pbr::OriginalName("IO_BOARD_INIT")] IoBoardInit = 3,
    [pbr::OriginalName("IO_BOARD_INIT_DIGITAL_IN")] IoBoardInitDigitalIn = 4,
    [pbr::OriginalName("IO_BOARD_INIT_DIGITAL_OUT")] IoBoardInitDigitalOut = 5,
    [pbr::OriginalName("RFID_BOARD_INIT")] RfidBoardInit = 6,
    [pbr::OriginalName("RFID_BOARD_SET_PHASE_MATRIX")] RfidBoardSetPhaseMatrix = 7,
    [pbr::OriginalName("UART_INIT")] UartInit = 8,
    [pbr::OriginalName("UART_WRITE_DATA")] UartWriteData = 9,
    [pbr::OriginalName("DIGITAL_OUT_SET")] DigitalOutSet = 10,
    [pbr::OriginalName("DIGITAL_OUT_PULSE")] DigitalOutPulse = 11,
    [pbr::OriginalName("START_DIGITAL_OUT_LOOP")] StartDigitalOutLoop = 12,
    [pbr::OriginalName("STOP_DIGITAL_OUT_LOOP")] StopDigitalOutLoop = 13,
    [pbr::OriginalName("GPIO_WIRINGPI_INIT")] GpioWiringpiInit = 14,
    [pbr::OriginalName("GPIO_WIRINGPI_INIT_DIGITAL_IN")] GpioWiringpiInitDigitalIn = 15,
    [pbr::OriginalName("GPIO_WIRINGPI_INIT_DIGITAL_OUT")] GpioWiringpiInitDigitalOut = 16,
    [pbr::OriginalName("INIT_SOUND")] InitSound = 17,
    [pbr::OriginalName("INIT_SOUND_SIGNAL")] InitSoundSignal = 18,
    [pbr::OriginalName("UART_INIT_DIGITAL_IN")] UartInitDigitalIn = 19,
    [pbr::OriginalName("UART_INIT_DIGITAL_OUT")] UartInitDigitalOut = 20,
  }

  public enum SoundSignalType {
    [pbr::OriginalName("SINE_WAVE")] SineWave = 0,
    [pbr::OriginalName("SQUARE_WAVE")] SquareWave = 1,
    [pbr::OriginalName("TRIANGLE_WAVE")] TriangleWave = 2,
    [pbr::OriginalName("SAW_TOOTH_WAVE")] SawToothWave = 3,
    [pbr::OriginalName("WHITE_NOISE")] WhiteNoise = 4,
    [pbr::OriginalName("PINK_NOISE")] PinkNoise = 5,
    [pbr::OriginalName("SWEEP")] Sweep = 6,
  }

  #endregion

  #region Messages
  /// <summary>
  /// IO board messages
  /// </summary>
  public sealed partial class IoBoardInit : pb::IMessage<IoBoardInit> {
    private static readonly pb::MessageParser<IoBoardInit> _parser = new pb::MessageParser<IoBoardInit>(() => new IoBoardInit());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IoBoardInit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LabNetProt.Client.LabNetClientReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IoBoardInit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IoBoardInit(IoBoardInit other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IoBoardInit Clone() {
      return new IoBoardInit(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IoBoardInit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IoBoardInit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IoBoardInit other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class IoBoardInitDigitalIn : pb::IMessage<IoBoardInitDigitalIn> {
    private static readonly pb::MessageParser<IoBoardInitDigitalIn> _parser = new pb::MessageParser<IoBoardInitDigitalIn>(() => new IoBoardInitDigitalIn());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IoBoardInitDigitalIn> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LabNetProt.Client.LabNetClientReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IoBoardInitDigitalIn() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IoBoardInitDigitalIn(IoBoardInitDigitalIn other) : this() {
      pin_ = other.pin_;
      resistorState_ = other.resistorState_;
      isInverted_ = other.isInverted_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IoBoardInitDigitalIn Clone() {
      return new IoBoardInitDigitalIn(this);
    }

    /// <summary>Field number for the "pin" field.</summary>
    public const int PinFieldNumber = 1;
    private uint pin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Pin {
      get { return pin_; }
      set {
        pin_ = value;
      }
    }

    /// <summary>Field number for the "resistor_state" field.</summary>
    public const int ResistorStateFieldNumber = 2;
    private global::LabNetProt.Client.IoBoardInitDigitalIn.Types.Resistor resistorState_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LabNetProt.Client.IoBoardInitDigitalIn.Types.Resistor ResistorState {
      get { return resistorState_; }
      set {
        resistorState_ = value;
      }
    }

    /// <summary>Field number for the "is_inverted" field.</summary>
    public const int IsInvertedFieldNumber = 3;
    private bool isInverted_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsInverted {
      get { return isInverted_; }
      set {
        isInverted_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IoBoardInitDigitalIn);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IoBoardInitDigitalIn other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Pin != other.Pin) return false;
      if (ResistorState != other.ResistorState) return false;
      if (IsInverted != other.IsInverted) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Pin != 0) hash ^= Pin.GetHashCode();
      if (ResistorState != 0) hash ^= ResistorState.GetHashCode();
      if (IsInverted != false) hash ^= IsInverted.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Pin != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Pin);
      }
      if (ResistorState != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) ResistorState);
      }
      if (IsInverted != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsInverted);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Pin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Pin);
      }
      if (ResistorState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ResistorState);
      }
      if (IsInverted != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IoBoardInitDigitalIn other) {
      if (other == null) {
        return;
      }
      if (other.Pin != 0) {
        Pin = other.Pin;
      }
      if (other.ResistorState != 0) {
        ResistorState = other.ResistorState;
      }
      if (other.IsInverted != false) {
        IsInverted = other.IsInverted;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Pin = input.ReadUInt32();
            break;
          }
          case 16: {
            resistorState_ = (global::LabNetProt.Client.IoBoardInitDigitalIn.Types.Resistor) input.ReadEnum();
            break;
          }
          case 24: {
            IsInverted = input.ReadBool();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the IoBoardInitDigitalIn message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Resistor {
        [pbr::OriginalName("OFF")] Off = 0,
        [pbr::OriginalName("PULL_DOWN")] PullDown = 1,
        [pbr::OriginalName("PULL_UP")] PullUp = 2,
      }

    }
    #endregion

  }

  public sealed partial class IoBoardInitDigitalOut : pb::IMessage<IoBoardInitDigitalOut> {
    private static readonly pb::MessageParser<IoBoardInitDigitalOut> _parser = new pb::MessageParser<IoBoardInitDigitalOut>(() => new IoBoardInitDigitalOut());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IoBoardInitDigitalOut> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LabNetProt.Client.LabNetClientReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IoBoardInitDigitalOut() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IoBoardInitDigitalOut(IoBoardInitDigitalOut other) : this() {
      pin_ = other.pin_;
      isInverted_ = other.isInverted_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IoBoardInitDigitalOut Clone() {
      return new IoBoardInitDigitalOut(this);
    }

    /// <summary>Field number for the "pin" field.</summary>
    public const int PinFieldNumber = 1;
    private uint pin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Pin {
      get { return pin_; }
      set {
        pin_ = value;
      }
    }

    /// <summary>Field number for the "is_inverted" field.</summary>
    public const int IsInvertedFieldNumber = 2;
    private bool isInverted_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsInverted {
      get { return isInverted_; }
      set {
        isInverted_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IoBoardInitDigitalOut);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IoBoardInitDigitalOut other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Pin != other.Pin) return false;
      if (IsInverted != other.IsInverted) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Pin != 0) hash ^= Pin.GetHashCode();
      if (IsInverted != false) hash ^= IsInverted.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Pin != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Pin);
      }
      if (IsInverted != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsInverted);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Pin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Pin);
      }
      if (IsInverted != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IoBoardInitDigitalOut other) {
      if (other == null) {
        return;
      }
      if (other.Pin != 0) {
        Pin = other.Pin;
      }
      if (other.IsInverted != false) {
        IsInverted = other.IsInverted;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Pin = input.ReadUInt32();
            break;
          }
          case 16: {
            IsInverted = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// RFID board messages
  /// </summary>
  public sealed partial class RfidBoardInit : pb::IMessage<RfidBoardInit> {
    private static readonly pb::MessageParser<RfidBoardInit> _parser = new pb::MessageParser<RfidBoardInit>(() => new RfidBoardInit());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RfidBoardInit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LabNetProt.Client.LabNetClientReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RfidBoardInit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RfidBoardInit(RfidBoardInit other) : this() {
      antennaPhase1_ = other.antennaPhase1_;
      antennaPhase2_ = other.antennaPhase2_;
      phaseDuration_ = other.phaseDuration_;
      inverted_ = other.inverted_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RfidBoardInit Clone() {
      return new RfidBoardInit(this);
    }

    /// <summary>Field number for the "antenna_phase1" field.</summary>
    public const int AntennaPhase1FieldNumber = 1;
    private uint antennaPhase1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AntennaPhase1 {
      get { return antennaPhase1_; }
      set {
        antennaPhase1_ = value;
      }
    }

    /// <summary>Field number for the "antenna_phase2" field.</summary>
    public const int AntennaPhase2FieldNumber = 2;
    private uint antennaPhase2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AntennaPhase2 {
      get { return antennaPhase2_; }
      set {
        antennaPhase2_ = value;
      }
    }

    /// <summary>Field number for the "phase_duration" field.</summary>
    public const int PhaseDurationFieldNumber = 3;
    private uint phaseDuration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PhaseDuration {
      get { return phaseDuration_; }
      set {
        phaseDuration_ = value;
      }
    }

    /// <summary>Field number for the "inverted" field.</summary>
    public const int InvertedFieldNumber = 4;
    private bool inverted_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Inverted {
      get { return inverted_; }
      set {
        inverted_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RfidBoardInit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RfidBoardInit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AntennaPhase1 != other.AntennaPhase1) return false;
      if (AntennaPhase2 != other.AntennaPhase2) return false;
      if (PhaseDuration != other.PhaseDuration) return false;
      if (Inverted != other.Inverted) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AntennaPhase1 != 0) hash ^= AntennaPhase1.GetHashCode();
      if (AntennaPhase2 != 0) hash ^= AntennaPhase2.GetHashCode();
      if (PhaseDuration != 0) hash ^= PhaseDuration.GetHashCode();
      if (Inverted != false) hash ^= Inverted.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AntennaPhase1 != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(AntennaPhase1);
      }
      if (AntennaPhase2 != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(AntennaPhase2);
      }
      if (PhaseDuration != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(PhaseDuration);
      }
      if (Inverted != false) {
        output.WriteRawTag(32);
        output.WriteBool(Inverted);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AntennaPhase1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AntennaPhase1);
      }
      if (AntennaPhase2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AntennaPhase2);
      }
      if (PhaseDuration != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PhaseDuration);
      }
      if (Inverted != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RfidBoardInit other) {
      if (other == null) {
        return;
      }
      if (other.AntennaPhase1 != 0) {
        AntennaPhase1 = other.AntennaPhase1;
      }
      if (other.AntennaPhase2 != 0) {
        AntennaPhase2 = other.AntennaPhase2;
      }
      if (other.PhaseDuration != 0) {
        PhaseDuration = other.PhaseDuration;
      }
      if (other.Inverted != false) {
        Inverted = other.Inverted;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AntennaPhase1 = input.ReadUInt32();
            break;
          }
          case 16: {
            AntennaPhase2 = input.ReadUInt32();
            break;
          }
          case 24: {
            PhaseDuration = input.ReadUInt32();
            break;
          }
          case 32: {
            Inverted = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RfidBoardSetPhaseMatrix : pb::IMessage<RfidBoardSetPhaseMatrix> {
    private static readonly pb::MessageParser<RfidBoardSetPhaseMatrix> _parser = new pb::MessageParser<RfidBoardSetPhaseMatrix>(() => new RfidBoardSetPhaseMatrix());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RfidBoardSetPhaseMatrix> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LabNetProt.Client.LabNetClientReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RfidBoardSetPhaseMatrix() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RfidBoardSetPhaseMatrix(RfidBoardSetPhaseMatrix other) : this() {
      antennaPhase1_ = other.antennaPhase1_;
      antennaPhase2_ = other.antennaPhase2_;
      phaseDuration_ = other.phaseDuration_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RfidBoardSetPhaseMatrix Clone() {
      return new RfidBoardSetPhaseMatrix(this);
    }

    /// <summary>Field number for the "antenna_phase1" field.</summary>
    public const int AntennaPhase1FieldNumber = 1;
    private uint antennaPhase1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AntennaPhase1 {
      get { return antennaPhase1_; }
      set {
        antennaPhase1_ = value;
      }
    }

    /// <summary>Field number for the "antenna_phase2" field.</summary>
    public const int AntennaPhase2FieldNumber = 2;
    private uint antennaPhase2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AntennaPhase2 {
      get { return antennaPhase2_; }
      set {
        antennaPhase2_ = value;
      }
    }

    /// <summary>Field number for the "phase_duration" field.</summary>
    public const int PhaseDurationFieldNumber = 3;
    private uint phaseDuration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PhaseDuration {
      get { return phaseDuration_; }
      set {
        phaseDuration_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RfidBoardSetPhaseMatrix);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RfidBoardSetPhaseMatrix other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AntennaPhase1 != other.AntennaPhase1) return false;
      if (AntennaPhase2 != other.AntennaPhase2) return false;
      if (PhaseDuration != other.PhaseDuration) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AntennaPhase1 != 0) hash ^= AntennaPhase1.GetHashCode();
      if (AntennaPhase2 != 0) hash ^= AntennaPhase2.GetHashCode();
      if (PhaseDuration != 0) hash ^= PhaseDuration.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AntennaPhase1 != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(AntennaPhase1);
      }
      if (AntennaPhase2 != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(AntennaPhase2);
      }
      if (PhaseDuration != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(PhaseDuration);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AntennaPhase1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AntennaPhase1);
      }
      if (AntennaPhase2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AntennaPhase2);
      }
      if (PhaseDuration != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PhaseDuration);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RfidBoardSetPhaseMatrix other) {
      if (other == null) {
        return;
      }
      if (other.AntennaPhase1 != 0) {
        AntennaPhase1 = other.AntennaPhase1;
      }
      if (other.AntennaPhase2 != 0) {
        AntennaPhase2 = other.AntennaPhase2;
      }
      if (other.PhaseDuration != 0) {
        PhaseDuration = other.PhaseDuration;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AntennaPhase1 = input.ReadUInt32();
            break;
          }
          case 16: {
            AntennaPhase2 = input.ReadUInt32();
            break;
          }
          case 24: {
            PhaseDuration = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// UART messages
  /// </summary>
  public sealed partial class UartInit : pb::IMessage<UartInit> {
    private static readonly pb::MessageParser<UartInit> _parser = new pb::MessageParser<UartInit>(() => new UartInit());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UartInit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LabNetProt.Client.LabNetClientReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UartInit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UartInit(UartInit other) : this() {
      port_ = other.port_;
      baud_ = other.baud_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UartInit Clone() {
      return new UartInit(this);
    }

    /// <summary>Field number for the "port" field.</summary>
    public const int PortFieldNumber = 1;
    private global::LabNetProt.Uarts port_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LabNetProt.Uarts Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    /// <summary>Field number for the "baud" field.</summary>
    public const int BaudFieldNumber = 2;
    private uint baud_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Baud {
      get { return baud_; }
      set {
        baud_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UartInit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UartInit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Port != other.Port) return false;
      if (Baud != other.Baud) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Port != 0) hash ^= Port.GetHashCode();
      if (Baud != 0) hash ^= Baud.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Port != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Port);
      }
      if (Baud != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Baud);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Port != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Port);
      }
      if (Baud != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Baud);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UartInit other) {
      if (other == null) {
        return;
      }
      if (other.Port != 0) {
        Port = other.Port;
      }
      if (other.Baud != 0) {
        Baud = other.Baud;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            port_ = (global::LabNetProt.Uarts) input.ReadEnum();
            break;
          }
          case 16: {
            Baud = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UartWriteData : pb::IMessage<UartWriteData> {
    private static readonly pb::MessageParser<UartWriteData> _parser = new pb::MessageParser<UartWriteData>(() => new UartWriteData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UartWriteData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LabNetProt.Client.LabNetClientReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UartWriteData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UartWriteData(UartWriteData other) : this() {
      port_ = other.port_;
      data_ = other.data_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UartWriteData Clone() {
      return new UartWriteData(this);
    }

    /// <summary>Field number for the "port" field.</summary>
    public const int PortFieldNumber = 1;
    private global::LabNetProt.Uarts port_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LabNetProt.Uarts Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 2;
    private pb::ByteString data_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UartWriteData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UartWriteData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Port != other.Port) return false;
      if (Data != other.Data) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Port != 0) hash ^= Port.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Port != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Port);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Data);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Port != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Port);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UartWriteData other) {
      if (other == null) {
        return;
      }
      if (other.Port != 0) {
        Port = other.Port;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            port_ = (global::LabNetProt.Uarts) input.ReadEnum();
            break;
          }
          case 18: {
            Data = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UartInitDigitalIn : pb::IMessage<UartInitDigitalIn> {
    private static readonly pb::MessageParser<UartInitDigitalIn> _parser = new pb::MessageParser<UartInitDigitalIn>(() => new UartInitDigitalIn());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UartInitDigitalIn> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LabNetProt.Client.LabNetClientReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UartInitDigitalIn() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UartInitDigitalIn(UartInitDigitalIn other) : this() {
      port_ = other.port_;
      pin_ = other.pin_;
      isInverted_ = other.isInverted_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UartInitDigitalIn Clone() {
      return new UartInitDigitalIn(this);
    }

    /// <summary>Field number for the "port" field.</summary>
    public const int PortFieldNumber = 1;
    private global::LabNetProt.Uarts port_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LabNetProt.Uarts Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    /// <summary>Field number for the "pin" field.</summary>
    public const int PinFieldNumber = 2;
    private uint pin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Pin {
      get { return pin_; }
      set {
        pin_ = value;
      }
    }

    /// <summary>Field number for the "is_inverted" field.</summary>
    public const int IsInvertedFieldNumber = 3;
    private bool isInverted_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsInverted {
      get { return isInverted_; }
      set {
        isInverted_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UartInitDigitalIn);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UartInitDigitalIn other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Port != other.Port) return false;
      if (Pin != other.Pin) return false;
      if (IsInverted != other.IsInverted) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Port != 0) hash ^= Port.GetHashCode();
      if (Pin != 0) hash ^= Pin.GetHashCode();
      if (IsInverted != false) hash ^= IsInverted.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Port != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Port);
      }
      if (Pin != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Pin);
      }
      if (IsInverted != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsInverted);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Port != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Port);
      }
      if (Pin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Pin);
      }
      if (IsInverted != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UartInitDigitalIn other) {
      if (other == null) {
        return;
      }
      if (other.Port != 0) {
        Port = other.Port;
      }
      if (other.Pin != 0) {
        Pin = other.Pin;
      }
      if (other.IsInverted != false) {
        IsInverted = other.IsInverted;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            port_ = (global::LabNetProt.Uarts) input.ReadEnum();
            break;
          }
          case 16: {
            Pin = input.ReadUInt32();
            break;
          }
          case 24: {
            IsInverted = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UartInitDigitalOut : pb::IMessage<UartInitDigitalOut> {
    private static readonly pb::MessageParser<UartInitDigitalOut> _parser = new pb::MessageParser<UartInitDigitalOut>(() => new UartInitDigitalOut());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UartInitDigitalOut> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LabNetProt.Client.LabNetClientReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UartInitDigitalOut() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UartInitDigitalOut(UartInitDigitalOut other) : this() {
      port_ = other.port_;
      pin_ = other.pin_;
      isInverted_ = other.isInverted_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UartInitDigitalOut Clone() {
      return new UartInitDigitalOut(this);
    }

    /// <summary>Field number for the "port" field.</summary>
    public const int PortFieldNumber = 1;
    private global::LabNetProt.Uarts port_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LabNetProt.Uarts Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    /// <summary>Field number for the "pin" field.</summary>
    public const int PinFieldNumber = 2;
    private uint pin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Pin {
      get { return pin_; }
      set {
        pin_ = value;
      }
    }

    /// <summary>Field number for the "is_inverted" field.</summary>
    public const int IsInvertedFieldNumber = 3;
    private bool isInverted_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsInverted {
      get { return isInverted_; }
      set {
        isInverted_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UartInitDigitalOut);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UartInitDigitalOut other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Port != other.Port) return false;
      if (Pin != other.Pin) return false;
      if (IsInverted != other.IsInverted) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Port != 0) hash ^= Port.GetHashCode();
      if (Pin != 0) hash ^= Pin.GetHashCode();
      if (IsInverted != false) hash ^= IsInverted.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Port != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Port);
      }
      if (Pin != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Pin);
      }
      if (IsInverted != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsInverted);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Port != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Port);
      }
      if (Pin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Pin);
      }
      if (IsInverted != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UartInitDigitalOut other) {
      if (other == null) {
        return;
      }
      if (other.Port != 0) {
        Port = other.Port;
      }
      if (other.Pin != 0) {
        Pin = other.Pin;
      }
      if (other.IsInverted != false) {
        IsInverted = other.IsInverted;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            port_ = (global::LabNetProt.Uarts) input.ReadEnum();
            break;
          }
          case 16: {
            Pin = input.ReadUInt32();
            break;
          }
          case 24: {
            IsInverted = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Gpio with WiringPi
  /// </summary>
  public sealed partial class GpioWiringPiInit : pb::IMessage<GpioWiringPiInit> {
    private static readonly pb::MessageParser<GpioWiringPiInit> _parser = new pb::MessageParser<GpioWiringPiInit>(() => new GpioWiringPiInit());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GpioWiringPiInit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LabNetProt.Client.LabNetClientReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GpioWiringPiInit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GpioWiringPiInit(GpioWiringPiInit other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GpioWiringPiInit Clone() {
      return new GpioWiringPiInit(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GpioWiringPiInit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GpioWiringPiInit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GpioWiringPiInit other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class GpioWiringPiInitDigitalIn : pb::IMessage<GpioWiringPiInitDigitalIn> {
    private static readonly pb::MessageParser<GpioWiringPiInitDigitalIn> _parser = new pb::MessageParser<GpioWiringPiInitDigitalIn>(() => new GpioWiringPiInitDigitalIn());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GpioWiringPiInitDigitalIn> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LabNetProt.Client.LabNetClientReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GpioWiringPiInitDigitalIn() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GpioWiringPiInitDigitalIn(GpioWiringPiInitDigitalIn other) : this() {
      pin_ = other.pin_;
      resistorState_ = other.resistorState_;
      isInverted_ = other.isInverted_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GpioWiringPiInitDigitalIn Clone() {
      return new GpioWiringPiInitDigitalIn(this);
    }

    /// <summary>Field number for the "pin" field.</summary>
    public const int PinFieldNumber = 1;
    private uint pin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Pin {
      get { return pin_; }
      set {
        pin_ = value;
      }
    }

    /// <summary>Field number for the "resistor_state" field.</summary>
    public const int ResistorStateFieldNumber = 2;
    private global::LabNetProt.Client.GpioWiringPiInitDigitalIn.Types.Resistor resistorState_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LabNetProt.Client.GpioWiringPiInitDigitalIn.Types.Resistor ResistorState {
      get { return resistorState_; }
      set {
        resistorState_ = value;
      }
    }

    /// <summary>Field number for the "is_inverted" field.</summary>
    public const int IsInvertedFieldNumber = 3;
    private bool isInverted_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsInverted {
      get { return isInverted_; }
      set {
        isInverted_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GpioWiringPiInitDigitalIn);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GpioWiringPiInitDigitalIn other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Pin != other.Pin) return false;
      if (ResistorState != other.ResistorState) return false;
      if (IsInverted != other.IsInverted) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Pin != 0) hash ^= Pin.GetHashCode();
      if (ResistorState != 0) hash ^= ResistorState.GetHashCode();
      if (IsInverted != false) hash ^= IsInverted.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Pin != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Pin);
      }
      if (ResistorState != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) ResistorState);
      }
      if (IsInverted != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsInverted);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Pin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Pin);
      }
      if (ResistorState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ResistorState);
      }
      if (IsInverted != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GpioWiringPiInitDigitalIn other) {
      if (other == null) {
        return;
      }
      if (other.Pin != 0) {
        Pin = other.Pin;
      }
      if (other.ResistorState != 0) {
        ResistorState = other.ResistorState;
      }
      if (other.IsInverted != false) {
        IsInverted = other.IsInverted;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Pin = input.ReadUInt32();
            break;
          }
          case 16: {
            resistorState_ = (global::LabNetProt.Client.GpioWiringPiInitDigitalIn.Types.Resistor) input.ReadEnum();
            break;
          }
          case 24: {
            IsInverted = input.ReadBool();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the GpioWiringPiInitDigitalIn message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Resistor {
        [pbr::OriginalName("OFF")] Off = 0,
        [pbr::OriginalName("PULL_DOWN")] PullDown = 1,
        [pbr::OriginalName("PULL_UP")] PullUp = 2,
      }

    }
    #endregion

  }

  public sealed partial class GpioWiringPiInitDigitalOut : pb::IMessage<GpioWiringPiInitDigitalOut> {
    private static readonly pb::MessageParser<GpioWiringPiInitDigitalOut> _parser = new pb::MessageParser<GpioWiringPiInitDigitalOut>(() => new GpioWiringPiInitDigitalOut());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GpioWiringPiInitDigitalOut> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LabNetProt.Client.LabNetClientReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GpioWiringPiInitDigitalOut() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GpioWiringPiInitDigitalOut(GpioWiringPiInitDigitalOut other) : this() {
      pin_ = other.pin_;
      isInverted_ = other.isInverted_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GpioWiringPiInitDigitalOut Clone() {
      return new GpioWiringPiInitDigitalOut(this);
    }

    /// <summary>Field number for the "pin" field.</summary>
    public const int PinFieldNumber = 1;
    private uint pin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Pin {
      get { return pin_; }
      set {
        pin_ = value;
      }
    }

    /// <summary>Field number for the "is_inverted" field.</summary>
    public const int IsInvertedFieldNumber = 2;
    private bool isInverted_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsInverted {
      get { return isInverted_; }
      set {
        isInverted_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GpioWiringPiInitDigitalOut);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GpioWiringPiInitDigitalOut other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Pin != other.Pin) return false;
      if (IsInverted != other.IsInverted) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Pin != 0) hash ^= Pin.GetHashCode();
      if (IsInverted != false) hash ^= IsInverted.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Pin != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Pin);
      }
      if (IsInverted != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsInverted);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Pin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Pin);
      }
      if (IsInverted != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GpioWiringPiInitDigitalOut other) {
      if (other == null) {
        return;
      }
      if (other.Pin != 0) {
        Pin = other.Pin;
      }
      if (other.IsInverted != false) {
        IsInverted = other.IsInverted;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Pin = input.ReadUInt32();
            break;
          }
          case 16: {
            IsInverted = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// digital out messages
  /// </summary>
  public sealed partial class DigitalOutSet : pb::IMessage<DigitalOutSet> {
    private static readonly pb::MessageParser<DigitalOutSet> _parser = new pb::MessageParser<DigitalOutSet>(() => new DigitalOutSet());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DigitalOutSet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LabNetProt.Client.LabNetClientReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DigitalOutSet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DigitalOutSet(DigitalOutSet other) : this() {
      id_ = other.id_ != null ? other.id_.Clone() : null;
      state_ = other.state_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DigitalOutSet Clone() {
      return new DigitalOutSet(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private global::LabNetProt.PinId id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LabNetProt.PinId Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 2;
    private bool state_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DigitalOutSet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DigitalOutSet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Id, other.Id)) return false;
      if (State != other.State) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (id_ != null) hash ^= Id.GetHashCode();
      if (State != false) hash ^= State.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (id_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Id);
      }
      if (State != false) {
        output.WriteRawTag(16);
        output.WriteBool(State);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (id_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Id);
      }
      if (State != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DigitalOutSet other) {
      if (other == null) {
        return;
      }
      if (other.id_ != null) {
        if (id_ == null) {
          id_ = new global::LabNetProt.PinId();
        }
        Id.MergeFrom(other.Id);
      }
      if (other.State != false) {
        State = other.State;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (id_ == null) {
              id_ = new global::LabNetProt.PinId();
            }
            input.ReadMessage(id_);
            break;
          }
          case 16: {
            State = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DigitalOutPulse : pb::IMessage<DigitalOutPulse> {
    private static readonly pb::MessageParser<DigitalOutPulse> _parser = new pb::MessageParser<DigitalOutPulse>(() => new DigitalOutPulse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DigitalOutPulse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LabNetProt.Client.LabNetClientReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DigitalOutPulse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DigitalOutPulse(DigitalOutPulse other) : this() {
      id_ = other.id_ != null ? other.id_.Clone() : null;
      highDuration_ = other.highDuration_;
      lowDuration_ = other.lowDuration_;
      pulses_ = other.pulses_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DigitalOutPulse Clone() {
      return new DigitalOutPulse(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private global::LabNetProt.PinId id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LabNetProt.PinId Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "high_duration" field.</summary>
    public const int HighDurationFieldNumber = 2;
    private uint highDuration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HighDuration {
      get { return highDuration_; }
      set {
        highDuration_ = value;
      }
    }

    /// <summary>Field number for the "low_duration" field.</summary>
    public const int LowDurationFieldNumber = 3;
    private uint lowDuration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LowDuration {
      get { return lowDuration_; }
      set {
        lowDuration_ = value;
      }
    }

    /// <summary>Field number for the "pulses" field.</summary>
    public const int PulsesFieldNumber = 4;
    private uint pulses_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Pulses {
      get { return pulses_; }
      set {
        pulses_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DigitalOutPulse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DigitalOutPulse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Id, other.Id)) return false;
      if (HighDuration != other.HighDuration) return false;
      if (LowDuration != other.LowDuration) return false;
      if (Pulses != other.Pulses) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (id_ != null) hash ^= Id.GetHashCode();
      if (HighDuration != 0) hash ^= HighDuration.GetHashCode();
      if (LowDuration != 0) hash ^= LowDuration.GetHashCode();
      if (Pulses != 0) hash ^= Pulses.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (id_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Id);
      }
      if (HighDuration != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(HighDuration);
      }
      if (LowDuration != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(LowDuration);
      }
      if (Pulses != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Pulses);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (id_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Id);
      }
      if (HighDuration != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HighDuration);
      }
      if (LowDuration != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LowDuration);
      }
      if (Pulses != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Pulses);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DigitalOutPulse other) {
      if (other == null) {
        return;
      }
      if (other.id_ != null) {
        if (id_ == null) {
          id_ = new global::LabNetProt.PinId();
        }
        Id.MergeFrom(other.Id);
      }
      if (other.HighDuration != 0) {
        HighDuration = other.HighDuration;
      }
      if (other.LowDuration != 0) {
        LowDuration = other.LowDuration;
      }
      if (other.Pulses != 0) {
        Pulses = other.Pulses;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (id_ == null) {
              id_ = new global::LabNetProt.PinId();
            }
            input.ReadMessage(id_);
            break;
          }
          case 16: {
            HighDuration = input.ReadUInt32();
            break;
          }
          case 24: {
            LowDuration = input.ReadUInt32();
            break;
          }
          case 32: {
            Pulses = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// digital out loop
  /// </summary>
  public sealed partial class StartDigitalOutLoop : pb::IMessage<StartDigitalOutLoop> {
    private static readonly pb::MessageParser<StartDigitalOutLoop> _parser = new pb::MessageParser<StartDigitalOutLoop>(() => new StartDigitalOutLoop());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StartDigitalOutLoop> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LabNetProt.Client.LabNetClientReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartDigitalOutLoop() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartDigitalOutLoop(StartDigitalOutLoop other) : this() {
      loopName_ = other.loopName_;
      loopPause_ = other.loopPause_;
      digitalOutputs_ = other.digitalOutputs_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartDigitalOutLoop Clone() {
      return new StartDigitalOutLoop(this);
    }

    /// <summary>Field number for the "loop_name" field.</summary>
    public const int LoopNameFieldNumber = 1;
    private string loopName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LoopName {
      get { return loopName_; }
      set {
        loopName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "loop_pause" field.</summary>
    public const int LoopPauseFieldNumber = 2;
    private uint loopPause_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LoopPause {
      get { return loopPause_; }
      set {
        loopPause_ = value;
      }
    }

    /// <summary>Field number for the "digital_outputs" field.</summary>
    public const int DigitalOutputsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::LabNetProt.Client.StartDigitalOutLoop.Types.DigitalOutputParameter> _repeated_digitalOutputs_codec
        = pb::FieldCodec.ForMessage(26, global::LabNetProt.Client.StartDigitalOutLoop.Types.DigitalOutputParameter.Parser);
    private readonly pbc::RepeatedField<global::LabNetProt.Client.StartDigitalOutLoop.Types.DigitalOutputParameter> digitalOutputs_ = new pbc::RepeatedField<global::LabNetProt.Client.StartDigitalOutLoop.Types.DigitalOutputParameter>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::LabNetProt.Client.StartDigitalOutLoop.Types.DigitalOutputParameter> DigitalOutputs {
      get { return digitalOutputs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StartDigitalOutLoop);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StartDigitalOutLoop other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LoopName != other.LoopName) return false;
      if (LoopPause != other.LoopPause) return false;
      if(!digitalOutputs_.Equals(other.digitalOutputs_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LoopName.Length != 0) hash ^= LoopName.GetHashCode();
      if (LoopPause != 0) hash ^= LoopPause.GetHashCode();
      hash ^= digitalOutputs_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LoopName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(LoopName);
      }
      if (LoopPause != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(LoopPause);
      }
      digitalOutputs_.WriteTo(output, _repeated_digitalOutputs_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LoopName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LoopName);
      }
      if (LoopPause != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LoopPause);
      }
      size += digitalOutputs_.CalculateSize(_repeated_digitalOutputs_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StartDigitalOutLoop other) {
      if (other == null) {
        return;
      }
      if (other.LoopName.Length != 0) {
        LoopName = other.LoopName;
      }
      if (other.LoopPause != 0) {
        LoopPause = other.LoopPause;
      }
      digitalOutputs_.Add(other.digitalOutputs_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            LoopName = input.ReadString();
            break;
          }
          case 16: {
            LoopPause = input.ReadUInt32();
            break;
          }
          case 26: {
            digitalOutputs_.AddEntriesFrom(input, _repeated_digitalOutputs_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the StartDigitalOutLoop message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class DigitalOutputParameter : pb::IMessage<DigitalOutputParameter> {
        private static readonly pb::MessageParser<DigitalOutputParameter> _parser = new pb::MessageParser<DigitalOutputParameter>(() => new DigitalOutputParameter());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<DigitalOutputParameter> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::LabNetProt.Client.StartDigitalOutLoop.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DigitalOutputParameter() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DigitalOutputParameter(DigitalOutputParameter other) : this() {
          id_ = other.id_ != null ? other.id_.Clone() : null;
          offset_ = other.offset_;
          duration_ = other.duration_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DigitalOutputParameter Clone() {
          return new DigitalOutputParameter(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private global::LabNetProt.PinId id_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::LabNetProt.PinId Id {
          get { return id_; }
          set {
            id_ = value;
          }
        }

        /// <summary>Field number for the "offset" field.</summary>
        public const int OffsetFieldNumber = 2;
        private uint offset_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Offset {
          get { return offset_; }
          set {
            offset_ = value;
          }
        }

        /// <summary>Field number for the "duration" field.</summary>
        public const int DurationFieldNumber = 3;
        private uint duration_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Duration {
          get { return duration_; }
          set {
            duration_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as DigitalOutputParameter);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(DigitalOutputParameter other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Id, other.Id)) return false;
          if (Offset != other.Offset) return false;
          if (Duration != other.Duration) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (id_ != null) hash ^= Id.GetHashCode();
          if (Offset != 0) hash ^= Offset.GetHashCode();
          if (Duration != 0) hash ^= Duration.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (id_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Id);
          }
          if (Offset != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(Offset);
          }
          if (Duration != 0) {
            output.WriteRawTag(24);
            output.WriteUInt32(Duration);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (id_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Id);
          }
          if (Offset != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Offset);
          }
          if (Duration != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Duration);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(DigitalOutputParameter other) {
          if (other == null) {
            return;
          }
          if (other.id_ != null) {
            if (id_ == null) {
              id_ = new global::LabNetProt.PinId();
            }
            Id.MergeFrom(other.Id);
          }
          if (other.Offset != 0) {
            Offset = other.Offset;
          }
          if (other.Duration != 0) {
            Duration = other.Duration;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (id_ == null) {
                  id_ = new global::LabNetProt.PinId();
                }
                input.ReadMessage(id_);
                break;
              }
              case 16: {
                Offset = input.ReadUInt32();
                break;
              }
              case 24: {
                Duration = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class StopDigitalOutLoop : pb::IMessage<StopDigitalOutLoop> {
    private static readonly pb::MessageParser<StopDigitalOutLoop> _parser = new pb::MessageParser<StopDigitalOutLoop>(() => new StopDigitalOutLoop());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StopDigitalOutLoop> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LabNetProt.Client.LabNetClientReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopDigitalOutLoop() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopDigitalOutLoop(StopDigitalOutLoop other) : this() {
      loopName_ = other.loopName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopDigitalOutLoop Clone() {
      return new StopDigitalOutLoop(this);
    }

    /// <summary>Field number for the "loop_name" field.</summary>
    public const int LoopNameFieldNumber = 1;
    private string loopName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LoopName {
      get { return loopName_; }
      set {
        loopName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StopDigitalOutLoop);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StopDigitalOutLoop other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LoopName != other.LoopName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LoopName.Length != 0) hash ^= LoopName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LoopName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(LoopName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LoopName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LoopName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StopDigitalOutLoop other) {
      if (other == null) {
        return;
      }
      if (other.LoopName.Length != 0) {
        LoopName = other.LoopName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            LoopName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// general messages
  /// </summary>
  public sealed partial class LabNetResetRequest : pb::IMessage<LabNetResetRequest> {
    private static readonly pb::MessageParser<LabNetResetRequest> _parser = new pb::MessageParser<LabNetResetRequest>(() => new LabNetResetRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LabNetResetRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LabNetProt.Client.LabNetClientReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LabNetResetRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LabNetResetRequest(LabNetResetRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LabNetResetRequest Clone() {
      return new LabNetResetRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LabNetResetRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LabNetResetRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LabNetResetRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class LabNetIdRequest : pb::IMessage<LabNetIdRequest> {
    private static readonly pb::MessageParser<LabNetIdRequest> _parser = new pb::MessageParser<LabNetIdRequest>(() => new LabNetIdRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LabNetIdRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LabNetProt.Client.LabNetClientReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LabNetIdRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LabNetIdRequest(LabNetIdRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LabNetIdRequest Clone() {
      return new LabNetIdRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LabNetIdRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LabNetIdRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LabNetIdRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  /// sound
  /// </summary>
  public sealed partial class InitSound : pb::IMessage<InitSound> {
    private static readonly pb::MessageParser<InitSound> _parser = new pb::MessageParser<InitSound>(() => new InitSound());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InitSound> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LabNetProt.Client.LabNetClientReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitSound() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitSound(InitSound other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitSound Clone() {
      return new InitSound(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InitSound);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InitSound other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InitSound other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class InitSoundSignal : pb::IMessage<InitSoundSignal> {
    private static readonly pb::MessageParser<InitSoundSignal> _parser = new pb::MessageParser<InitSoundSignal>(() => new InitSoundSignal());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InitSoundSignal> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LabNetProt.Client.LabNetClientReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitSoundSignal() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitSoundSignal(InitSoundSignal other) : this() {
      signalType_ = other.signalType_;
      id_ = other.id_;
      frequency_ = other.frequency_;
      frequencyEnd_ = other.frequencyEnd_;
      sweepLengthSeconds_ = other.sweepLengthSeconds_;
      volume_ = other.volume_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitSoundSignal Clone() {
      return new InitSoundSignal(this);
    }

    /// <summary>Field number for the "signal_type" field.</summary>
    public const int SignalTypeFieldNumber = 1;
    private global::LabNetProt.Client.SoundSignalType signalType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LabNetProt.Client.SoundSignalType SignalType {
      get { return signalType_; }
      set {
        signalType_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private uint id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "frequency" field.</summary>
    public const int FrequencyFieldNumber = 3;
    private uint frequency_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Frequency {
      get { return frequency_; }
      set {
        frequency_ = value;
      }
    }

    /// <summary>Field number for the "frequency_end" field.</summary>
    public const int FrequencyEndFieldNumber = 4;
    private uint frequencyEnd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FrequencyEnd {
      get { return frequencyEnd_; }
      set {
        frequencyEnd_ = value;
      }
    }

    /// <summary>Field number for the "sweep_length_seconds" field.</summary>
    public const int SweepLengthSecondsFieldNumber = 5;
    private float sweepLengthSeconds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SweepLengthSeconds {
      get { return sweepLengthSeconds_; }
      set {
        sweepLengthSeconds_ = value;
      }
    }

    /// <summary>Field number for the "volume" field.</summary>
    public const int VolumeFieldNumber = 6;
    private float volume_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Volume {
      get { return volume_; }
      set {
        volume_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InitSoundSignal);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InitSoundSignal other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SignalType != other.SignalType) return false;
      if (Id != other.Id) return false;
      if (Frequency != other.Frequency) return false;
      if (FrequencyEnd != other.FrequencyEnd) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SweepLengthSeconds, other.SweepLengthSeconds)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Volume, other.Volume)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SignalType != 0) hash ^= SignalType.GetHashCode();
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Frequency != 0) hash ^= Frequency.GetHashCode();
      if (FrequencyEnd != 0) hash ^= FrequencyEnd.GetHashCode();
      if (SweepLengthSeconds != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SweepLengthSeconds);
      if (Volume != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Volume);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SignalType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) SignalType);
      }
      if (Id != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Id);
      }
      if (Frequency != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Frequency);
      }
      if (FrequencyEnd != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(FrequencyEnd);
      }
      if (SweepLengthSeconds != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(SweepLengthSeconds);
      }
      if (Volume != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(Volume);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SignalType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SignalType);
      }
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (Frequency != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Frequency);
      }
      if (FrequencyEnd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FrequencyEnd);
      }
      if (SweepLengthSeconds != 0F) {
        size += 1 + 4;
      }
      if (Volume != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InitSoundSignal other) {
      if (other == null) {
        return;
      }
      if (other.SignalType != 0) {
        SignalType = other.SignalType;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Frequency != 0) {
        Frequency = other.Frequency;
      }
      if (other.FrequencyEnd != 0) {
        FrequencyEnd = other.FrequencyEnd;
      }
      if (other.SweepLengthSeconds != 0F) {
        SweepLengthSeconds = other.SweepLengthSeconds;
      }
      if (other.Volume != 0F) {
        Volume = other.Volume;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            signalType_ = (global::LabNetProt.Client.SoundSignalType) input.ReadEnum();
            break;
          }
          case 16: {
            Id = input.ReadUInt32();
            break;
          }
          case 24: {
            Frequency = input.ReadUInt32();
            break;
          }
          case 32: {
            FrequencyEnd = input.ReadUInt32();
            break;
          }
          case 45: {
            SweepLengthSeconds = input.ReadFloat();
            break;
          }
          case 53: {
            Volume = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
