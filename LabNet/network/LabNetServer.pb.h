// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LabNetServer.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_LabNetServer_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_LabNetServer_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "LabNet.pb.h"
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_LabNetServer_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_LabNetServer_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[15]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_LabNetServer_2eproto;
namespace LabNetProt {
namespace Server {
class ChiBioPumpMoveResult;
class ChiBioPumpMoveResultDefaultTypeInternal;
extern ChiBioPumpMoveResultDefaultTypeInternal _ChiBioPumpMoveResult_default_instance_;
class DataWriteComplete;
class DataWriteCompleteDefaultTypeInternal;
extern DataWriteCompleteDefaultTypeInternal _DataWriteComplete_default_instance_;
class DigitalInInitResult;
class DigitalInInitResultDefaultTypeInternal;
extern DigitalInInitResultDefaultTypeInternal _DigitalInInitResult_default_instance_;
class DigitalInState;
class DigitalInStateDefaultTypeInternal;
extern DigitalInStateDefaultTypeInternal _DigitalInState_default_instance_;
class DigitalOutInitResult;
class DigitalOutInitResultDefaultTypeInternal;
extern DigitalOutInitResultDefaultTypeInternal _DigitalOutInitResult_default_instance_;
class DigitalOutLoopStartResult;
class DigitalOutLoopStartResultDefaultTypeInternal;
extern DigitalOutLoopStartResultDefaultTypeInternal _DigitalOutLoopStartResult_default_instance_;
class DigitalOutLoopStopped;
class DigitalOutLoopStoppedDefaultTypeInternal;
extern DigitalOutLoopStoppedDefaultTypeInternal _DigitalOutLoopStopped_default_instance_;
class DigitalOutState;
class DigitalOutStateDefaultTypeInternal;
extern DigitalOutStateDefaultTypeInternal _DigitalOutState_default_instance_;
class InterfaceInitResult;
class InterfaceInitResultDefaultTypeInternal;
extern InterfaceInitResultDefaultTypeInternal _InterfaceInitResult_default_instance_;
class InterfaceLost;
class InterfaceLostDefaultTypeInternal;
extern InterfaceLostDefaultTypeInternal _InterfaceLost_default_instance_;
class InterfaceReconnected;
class InterfaceReconnectedDefaultTypeInternal;
extern InterfaceReconnectedDefaultTypeInternal _InterfaceReconnected_default_instance_;
class LabNetIdReply;
class LabNetIdReplyDefaultTypeInternal;
extern LabNetIdReplyDefaultTypeInternal _LabNetIdReply_default_instance_;
class LabNetResetReply;
class LabNetResetReplyDefaultTypeInternal;
extern LabNetResetReplyDefaultTypeInternal _LabNetResetReply_default_instance_;
class NewByteData;
class NewByteDataDefaultTypeInternal;
extern NewByteDataDefaultTypeInternal _NewByteData_default_instance_;
class OnlyOneConnectionAllowed;
class OnlyOneConnectionAllowedDefaultTypeInternal;
extern OnlyOneConnectionAllowedDefaultTypeInternal _OnlyOneConnectionAllowed_default_instance_;
}  // namespace Server
}  // namespace LabNetProt
PROTOBUF_NAMESPACE_OPEN
template<> ::LabNetProt::Server::ChiBioPumpMoveResult* Arena::CreateMaybeMessage<::LabNetProt::Server::ChiBioPumpMoveResult>(Arena*);
template<> ::LabNetProt::Server::DataWriteComplete* Arena::CreateMaybeMessage<::LabNetProt::Server::DataWriteComplete>(Arena*);
template<> ::LabNetProt::Server::DigitalInInitResult* Arena::CreateMaybeMessage<::LabNetProt::Server::DigitalInInitResult>(Arena*);
template<> ::LabNetProt::Server::DigitalInState* Arena::CreateMaybeMessage<::LabNetProt::Server::DigitalInState>(Arena*);
template<> ::LabNetProt::Server::DigitalOutInitResult* Arena::CreateMaybeMessage<::LabNetProt::Server::DigitalOutInitResult>(Arena*);
template<> ::LabNetProt::Server::DigitalOutLoopStartResult* Arena::CreateMaybeMessage<::LabNetProt::Server::DigitalOutLoopStartResult>(Arena*);
template<> ::LabNetProt::Server::DigitalOutLoopStopped* Arena::CreateMaybeMessage<::LabNetProt::Server::DigitalOutLoopStopped>(Arena*);
template<> ::LabNetProt::Server::DigitalOutState* Arena::CreateMaybeMessage<::LabNetProt::Server::DigitalOutState>(Arena*);
template<> ::LabNetProt::Server::InterfaceInitResult* Arena::CreateMaybeMessage<::LabNetProt::Server::InterfaceInitResult>(Arena*);
template<> ::LabNetProt::Server::InterfaceLost* Arena::CreateMaybeMessage<::LabNetProt::Server::InterfaceLost>(Arena*);
template<> ::LabNetProt::Server::InterfaceReconnected* Arena::CreateMaybeMessage<::LabNetProt::Server::InterfaceReconnected>(Arena*);
template<> ::LabNetProt::Server::LabNetIdReply* Arena::CreateMaybeMessage<::LabNetProt::Server::LabNetIdReply>(Arena*);
template<> ::LabNetProt::Server::LabNetResetReply* Arena::CreateMaybeMessage<::LabNetProt::Server::LabNetResetReply>(Arena*);
template<> ::LabNetProt::Server::NewByteData* Arena::CreateMaybeMessage<::LabNetProt::Server::NewByteData>(Arena*);
template<> ::LabNetProt::Server::OnlyOneConnectionAllowed* Arena::CreateMaybeMessage<::LabNetProt::Server::OnlyOneConnectionAllowed>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace LabNetProt {
namespace Server {

enum ChiBioPumpMoveResult_MoveResult : int {
  ChiBioPumpMoveResult_MoveResult_STOPPED = 0,
  ChiBioPumpMoveResult_MoveResult_MOVE_DOWN = 1,
  ChiBioPumpMoveResult_MoveResult_MOVE_UP = 2,
  ChiBioPumpMoveResult_MoveResult_ChiBioPumpMoveResult_MoveResult_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ChiBioPumpMoveResult_MoveResult_ChiBioPumpMoveResult_MoveResult_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ChiBioPumpMoveResult_MoveResult_IsValid(int value);
constexpr ChiBioPumpMoveResult_MoveResult ChiBioPumpMoveResult_MoveResult_MoveResult_MIN = ChiBioPumpMoveResult_MoveResult_STOPPED;
constexpr ChiBioPumpMoveResult_MoveResult ChiBioPumpMoveResult_MoveResult_MoveResult_MAX = ChiBioPumpMoveResult_MoveResult_MOVE_UP;
constexpr int ChiBioPumpMoveResult_MoveResult_MoveResult_ARRAYSIZE = ChiBioPumpMoveResult_MoveResult_MoveResult_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChiBioPumpMoveResult_MoveResult_descriptor();
template<typename T>
inline const std::string& ChiBioPumpMoveResult_MoveResult_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ChiBioPumpMoveResult_MoveResult>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ChiBioPumpMoveResult_MoveResult_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ChiBioPumpMoveResult_MoveResult_descriptor(), enum_t_value);
}
inline bool ChiBioPumpMoveResult_MoveResult_Parse(
    const std::string& name, ChiBioPumpMoveResult_MoveResult* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ChiBioPumpMoveResult_MoveResult>(
    ChiBioPumpMoveResult_MoveResult_descriptor(), name, value);
}
enum ServerMessageType : int {
  NONE = 0,
  LABNET_ID_REPLY = 1,
  LABNET_RESET_REPLY = 2,
  DIGITAL_OUT_STATE = 3,
  DIGITAL_IN_STATE = 4,
  NEW_BYTE_DATA = 5,
  DATA_WRITE_COMPLETE = 6,
  INTERFACE_INIT_RESULT = 7,
  DIGITAL_IN_INIT_RESULT = 8,
  DIGITAL_OUT_INIT_RESULT = 9,
  ONLY_ONE_CONNECTION_ALLOWED = 10,
  INTERFACE_LOST = 11,
  INTERFACE_RECONNECTED = 12,
  DIGITAL_OUT_LOOP_START_RESULT = 13,
  DIGITAL_OUT_LOOP_STOPPED = 14,
  CHI_BIO_PUMP_MOVE_RESULT = 25,
  ServerMessageType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ServerMessageType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ServerMessageType_IsValid(int value);
constexpr ServerMessageType ServerMessageType_MIN = NONE;
constexpr ServerMessageType ServerMessageType_MAX = CHI_BIO_PUMP_MOVE_RESULT;
constexpr int ServerMessageType_ARRAYSIZE = ServerMessageType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ServerMessageType_descriptor();
template<typename T>
inline const std::string& ServerMessageType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ServerMessageType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ServerMessageType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ServerMessageType_descriptor(), enum_t_value);
}
inline bool ServerMessageType_Parse(
    const std::string& name, ServerMessageType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ServerMessageType>(
    ServerMessageType_descriptor(), name, value);
}
// ===================================================================

class DigitalOutState PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LabNetProt.Server.DigitalOutState) */ {
 public:
  inline DigitalOutState() : DigitalOutState(nullptr) {};
  virtual ~DigitalOutState();

  DigitalOutState(const DigitalOutState& from);
  DigitalOutState(DigitalOutState&& from) noexcept
    : DigitalOutState() {
    *this = ::std::move(from);
  }

  inline DigitalOutState& operator=(const DigitalOutState& from) {
    CopyFrom(from);
    return *this;
  }
  inline DigitalOutState& operator=(DigitalOutState&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DigitalOutState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DigitalOutState* internal_default_instance() {
    return reinterpret_cast<const DigitalOutState*>(
               &_DigitalOutState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DigitalOutState& a, DigitalOutState& b) {
    a.Swap(&b);
  }
  inline void Swap(DigitalOutState* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DigitalOutState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DigitalOutState* New() const final {
    return CreateMaybeMessage<DigitalOutState>(nullptr);
  }

  DigitalOutState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DigitalOutState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DigitalOutState& from);
  void MergeFrom(const DigitalOutState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DigitalOutState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LabNetProt.Server.DigitalOutState";
  }
  protected:
  explicit DigitalOutState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LabNetServer_2eproto);
    return ::descriptor_table_LabNetServer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPinFieldNumber = 1,
    kTimeFieldNumber = 3,
    kStateFieldNumber = 2,
  };
  // .LabNetProt.PinId pin = 1;
  bool has_pin() const;
  private:
  bool _internal_has_pin() const;
  public:
  void clear_pin();
  const ::LabNetProt::PinId& pin() const;
  ::LabNetProt::PinId* release_pin();
  ::LabNetProt::PinId* mutable_pin();
  void set_allocated_pin(::LabNetProt::PinId* pin);
  private:
  const ::LabNetProt::PinId& _internal_pin() const;
  ::LabNetProt::PinId* _internal_mutable_pin();
  public:
  void unsafe_arena_set_allocated_pin(
      ::LabNetProt::PinId* pin);
  ::LabNetProt::PinId* unsafe_arena_release_pin();

  // .google.protobuf.Timestamp time = 3;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_time();
  void set_allocated_time(PROTOBUF_NAMESPACE_ID::Timestamp* time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_time();
  public:
  void unsafe_arena_set_allocated_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_time();

  // bool state = 2;
  void clear_state();
  bool state() const;
  void set_state(bool value);
  private:
  bool _internal_state() const;
  void _internal_set_state(bool value);
  public:

  // @@protoc_insertion_point(class_scope:LabNetProt.Server.DigitalOutState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::LabNetProt::PinId* pin_;
  PROTOBUF_NAMESPACE_ID::Timestamp* time_;
  bool state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LabNetServer_2eproto;
};
// -------------------------------------------------------------------

class DigitalInState PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LabNetProt.Server.DigitalInState) */ {
 public:
  inline DigitalInState() : DigitalInState(nullptr) {};
  virtual ~DigitalInState();

  DigitalInState(const DigitalInState& from);
  DigitalInState(DigitalInState&& from) noexcept
    : DigitalInState() {
    *this = ::std::move(from);
  }

  inline DigitalInState& operator=(const DigitalInState& from) {
    CopyFrom(from);
    return *this;
  }
  inline DigitalInState& operator=(DigitalInState&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DigitalInState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DigitalInState* internal_default_instance() {
    return reinterpret_cast<const DigitalInState*>(
               &_DigitalInState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DigitalInState& a, DigitalInState& b) {
    a.Swap(&b);
  }
  inline void Swap(DigitalInState* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DigitalInState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DigitalInState* New() const final {
    return CreateMaybeMessage<DigitalInState>(nullptr);
  }

  DigitalInState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DigitalInState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DigitalInState& from);
  void MergeFrom(const DigitalInState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DigitalInState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LabNetProt.Server.DigitalInState";
  }
  protected:
  explicit DigitalInState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LabNetServer_2eproto);
    return ::descriptor_table_LabNetServer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPinFieldNumber = 1,
    kTimeFieldNumber = 3,
    kStateFieldNumber = 2,
  };
  // .LabNetProt.PinId pin = 1;
  bool has_pin() const;
  private:
  bool _internal_has_pin() const;
  public:
  void clear_pin();
  const ::LabNetProt::PinId& pin() const;
  ::LabNetProt::PinId* release_pin();
  ::LabNetProt::PinId* mutable_pin();
  void set_allocated_pin(::LabNetProt::PinId* pin);
  private:
  const ::LabNetProt::PinId& _internal_pin() const;
  ::LabNetProt::PinId* _internal_mutable_pin();
  public:
  void unsafe_arena_set_allocated_pin(
      ::LabNetProt::PinId* pin);
  ::LabNetProt::PinId* unsafe_arena_release_pin();

  // .google.protobuf.Timestamp time = 3;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_time();
  void set_allocated_time(PROTOBUF_NAMESPACE_ID::Timestamp* time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_time();
  public:
  void unsafe_arena_set_allocated_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_time();

  // bool state = 2;
  void clear_state();
  bool state() const;
  void set_state(bool value);
  private:
  bool _internal_state() const;
  void _internal_set_state(bool value);
  public:

  // @@protoc_insertion_point(class_scope:LabNetProt.Server.DigitalInState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::LabNetProt::PinId* pin_;
  PROTOBUF_NAMESPACE_ID::Timestamp* time_;
  bool state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LabNetServer_2eproto;
};
// -------------------------------------------------------------------

class NewByteData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LabNetProt.Server.NewByteData) */ {
 public:
  inline NewByteData() : NewByteData(nullptr) {};
  virtual ~NewByteData();

  NewByteData(const NewByteData& from);
  NewByteData(NewByteData&& from) noexcept
    : NewByteData() {
    *this = ::std::move(from);
  }

  inline NewByteData& operator=(const NewByteData& from) {
    CopyFrom(from);
    return *this;
  }
  inline NewByteData& operator=(NewByteData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NewByteData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NewByteData* internal_default_instance() {
    return reinterpret_cast<const NewByteData*>(
               &_NewByteData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(NewByteData& a, NewByteData& b) {
    a.Swap(&b);
  }
  inline void Swap(NewByteData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NewByteData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NewByteData* New() const final {
    return CreateMaybeMessage<NewByteData>(nullptr);
  }

  NewByteData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NewByteData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NewByteData& from);
  void MergeFrom(const NewByteData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NewByteData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LabNetProt.Server.NewByteData";
  }
  protected:
  explicit NewByteData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LabNetServer_2eproto);
    return ::descriptor_table_LabNetServer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kPinFieldNumber = 1,
    kTimeFieldNumber = 3,
  };
  // bytes data = 2;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_data();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_data(
      std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // .LabNetProt.PinId pin = 1;
  bool has_pin() const;
  private:
  bool _internal_has_pin() const;
  public:
  void clear_pin();
  const ::LabNetProt::PinId& pin() const;
  ::LabNetProt::PinId* release_pin();
  ::LabNetProt::PinId* mutable_pin();
  void set_allocated_pin(::LabNetProt::PinId* pin);
  private:
  const ::LabNetProt::PinId& _internal_pin() const;
  ::LabNetProt::PinId* _internal_mutable_pin();
  public:
  void unsafe_arena_set_allocated_pin(
      ::LabNetProt::PinId* pin);
  ::LabNetProt::PinId* unsafe_arena_release_pin();

  // .google.protobuf.Timestamp time = 3;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_time();
  void set_allocated_time(PROTOBUF_NAMESPACE_ID::Timestamp* time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_time();
  public:
  void unsafe_arena_set_allocated_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_time();

  // @@protoc_insertion_point(class_scope:LabNetProt.Server.NewByteData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::LabNetProt::PinId* pin_;
  PROTOBUF_NAMESPACE_ID::Timestamp* time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LabNetServer_2eproto;
};
// -------------------------------------------------------------------

class DataWriteComplete PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LabNetProt.Server.DataWriteComplete) */ {
 public:
  inline DataWriteComplete() : DataWriteComplete(nullptr) {};
  virtual ~DataWriteComplete();

  DataWriteComplete(const DataWriteComplete& from);
  DataWriteComplete(DataWriteComplete&& from) noexcept
    : DataWriteComplete() {
    *this = ::std::move(from);
  }

  inline DataWriteComplete& operator=(const DataWriteComplete& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataWriteComplete& operator=(DataWriteComplete&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DataWriteComplete& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataWriteComplete* internal_default_instance() {
    return reinterpret_cast<const DataWriteComplete*>(
               &_DataWriteComplete_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DataWriteComplete& a, DataWriteComplete& b) {
    a.Swap(&b);
  }
  inline void Swap(DataWriteComplete* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DataWriteComplete* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DataWriteComplete* New() const final {
    return CreateMaybeMessage<DataWriteComplete>(nullptr);
  }

  DataWriteComplete* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DataWriteComplete>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DataWriteComplete& from);
  void MergeFrom(const DataWriteComplete& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataWriteComplete* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LabNetProt.Server.DataWriteComplete";
  }
  protected:
  explicit DataWriteComplete(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LabNetServer_2eproto);
    return ::descriptor_table_LabNetServer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPinFieldNumber = 1,
  };
  // .LabNetProt.PinId pin = 1;
  bool has_pin() const;
  private:
  bool _internal_has_pin() const;
  public:
  void clear_pin();
  const ::LabNetProt::PinId& pin() const;
  ::LabNetProt::PinId* release_pin();
  ::LabNetProt::PinId* mutable_pin();
  void set_allocated_pin(::LabNetProt::PinId* pin);
  private:
  const ::LabNetProt::PinId& _internal_pin() const;
  ::LabNetProt::PinId* _internal_mutable_pin();
  public:
  void unsafe_arena_set_allocated_pin(
      ::LabNetProt::PinId* pin);
  ::LabNetProt::PinId* unsafe_arena_release_pin();

  // @@protoc_insertion_point(class_scope:LabNetProt.Server.DataWriteComplete)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::LabNetProt::PinId* pin_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LabNetServer_2eproto;
};
// -------------------------------------------------------------------

class InterfaceInitResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LabNetProt.Server.InterfaceInitResult) */ {
 public:
  inline InterfaceInitResult() : InterfaceInitResult(nullptr) {};
  virtual ~InterfaceInitResult();

  InterfaceInitResult(const InterfaceInitResult& from);
  InterfaceInitResult(InterfaceInitResult&& from) noexcept
    : InterfaceInitResult() {
    *this = ::std::move(from);
  }

  inline InterfaceInitResult& operator=(const InterfaceInitResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline InterfaceInitResult& operator=(InterfaceInitResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InterfaceInitResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InterfaceInitResult* internal_default_instance() {
    return reinterpret_cast<const InterfaceInitResult*>(
               &_InterfaceInitResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(InterfaceInitResult& a, InterfaceInitResult& b) {
    a.Swap(&b);
  }
  inline void Swap(InterfaceInitResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InterfaceInitResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InterfaceInitResult* New() const final {
    return CreateMaybeMessage<InterfaceInitResult>(nullptr);
  }

  InterfaceInitResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InterfaceInitResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InterfaceInitResult& from);
  void MergeFrom(const InterfaceInitResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InterfaceInitResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LabNetProt.Server.InterfaceInitResult";
  }
  protected:
  explicit InterfaceInitResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LabNetServer_2eproto);
    return ::descriptor_table_LabNetServer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInterfaceFieldNumber = 1,
    kIsSucceedFieldNumber = 2,
  };
  // .LabNetProt.Interfaces interface = 1;
  void clear_interface();
  ::LabNetProt::Interfaces interface() const;
  void set_interface(::LabNetProt::Interfaces value);
  private:
  ::LabNetProt::Interfaces _internal_interface() const;
  void _internal_set_interface(::LabNetProt::Interfaces value);
  public:

  // bool is_succeed = 2;
  void clear_is_succeed();
  bool is_succeed() const;
  void set_is_succeed(bool value);
  private:
  bool _internal_is_succeed() const;
  void _internal_set_is_succeed(bool value);
  public:

  // @@protoc_insertion_point(class_scope:LabNetProt.Server.InterfaceInitResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int interface_;
  bool is_succeed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LabNetServer_2eproto;
};
// -------------------------------------------------------------------

class InterfaceLost PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LabNetProt.Server.InterfaceLost) */ {
 public:
  inline InterfaceLost() : InterfaceLost(nullptr) {};
  virtual ~InterfaceLost();

  InterfaceLost(const InterfaceLost& from);
  InterfaceLost(InterfaceLost&& from) noexcept
    : InterfaceLost() {
    *this = ::std::move(from);
  }

  inline InterfaceLost& operator=(const InterfaceLost& from) {
    CopyFrom(from);
    return *this;
  }
  inline InterfaceLost& operator=(InterfaceLost&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InterfaceLost& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InterfaceLost* internal_default_instance() {
    return reinterpret_cast<const InterfaceLost*>(
               &_InterfaceLost_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(InterfaceLost& a, InterfaceLost& b) {
    a.Swap(&b);
  }
  inline void Swap(InterfaceLost* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InterfaceLost* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InterfaceLost* New() const final {
    return CreateMaybeMessage<InterfaceLost>(nullptr);
  }

  InterfaceLost* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InterfaceLost>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InterfaceLost& from);
  void MergeFrom(const InterfaceLost& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InterfaceLost* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LabNetProt.Server.InterfaceLost";
  }
  protected:
  explicit InterfaceLost(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LabNetServer_2eproto);
    return ::descriptor_table_LabNetServer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInterfaceFieldNumber = 1,
  };
  // .LabNetProt.Interfaces interface = 1;
  void clear_interface();
  ::LabNetProt::Interfaces interface() const;
  void set_interface(::LabNetProt::Interfaces value);
  private:
  ::LabNetProt::Interfaces _internal_interface() const;
  void _internal_set_interface(::LabNetProt::Interfaces value);
  public:

  // @@protoc_insertion_point(class_scope:LabNetProt.Server.InterfaceLost)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int interface_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LabNetServer_2eproto;
};
// -------------------------------------------------------------------

class InterfaceReconnected PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LabNetProt.Server.InterfaceReconnected) */ {
 public:
  inline InterfaceReconnected() : InterfaceReconnected(nullptr) {};
  virtual ~InterfaceReconnected();

  InterfaceReconnected(const InterfaceReconnected& from);
  InterfaceReconnected(InterfaceReconnected&& from) noexcept
    : InterfaceReconnected() {
    *this = ::std::move(from);
  }

  inline InterfaceReconnected& operator=(const InterfaceReconnected& from) {
    CopyFrom(from);
    return *this;
  }
  inline InterfaceReconnected& operator=(InterfaceReconnected&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InterfaceReconnected& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InterfaceReconnected* internal_default_instance() {
    return reinterpret_cast<const InterfaceReconnected*>(
               &_InterfaceReconnected_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(InterfaceReconnected& a, InterfaceReconnected& b) {
    a.Swap(&b);
  }
  inline void Swap(InterfaceReconnected* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InterfaceReconnected* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InterfaceReconnected* New() const final {
    return CreateMaybeMessage<InterfaceReconnected>(nullptr);
  }

  InterfaceReconnected* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InterfaceReconnected>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InterfaceReconnected& from);
  void MergeFrom(const InterfaceReconnected& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InterfaceReconnected* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LabNetProt.Server.InterfaceReconnected";
  }
  protected:
  explicit InterfaceReconnected(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LabNetServer_2eproto);
    return ::descriptor_table_LabNetServer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInterfaceFieldNumber = 1,
  };
  // .LabNetProt.Interfaces interface = 1;
  void clear_interface();
  ::LabNetProt::Interfaces interface() const;
  void set_interface(::LabNetProt::Interfaces value);
  private:
  ::LabNetProt::Interfaces _internal_interface() const;
  void _internal_set_interface(::LabNetProt::Interfaces value);
  public:

  // @@protoc_insertion_point(class_scope:LabNetProt.Server.InterfaceReconnected)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int interface_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LabNetServer_2eproto;
};
// -------------------------------------------------------------------

class DigitalInInitResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LabNetProt.Server.DigitalInInitResult) */ {
 public:
  inline DigitalInInitResult() : DigitalInInitResult(nullptr) {};
  virtual ~DigitalInInitResult();

  DigitalInInitResult(const DigitalInInitResult& from);
  DigitalInInitResult(DigitalInInitResult&& from) noexcept
    : DigitalInInitResult() {
    *this = ::std::move(from);
  }

  inline DigitalInInitResult& operator=(const DigitalInInitResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline DigitalInInitResult& operator=(DigitalInInitResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DigitalInInitResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DigitalInInitResult* internal_default_instance() {
    return reinterpret_cast<const DigitalInInitResult*>(
               &_DigitalInInitResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(DigitalInInitResult& a, DigitalInInitResult& b) {
    a.Swap(&b);
  }
  inline void Swap(DigitalInInitResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DigitalInInitResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DigitalInInitResult* New() const final {
    return CreateMaybeMessage<DigitalInInitResult>(nullptr);
  }

  DigitalInInitResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DigitalInInitResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DigitalInInitResult& from);
  void MergeFrom(const DigitalInInitResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DigitalInInitResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LabNetProt.Server.DigitalInInitResult";
  }
  protected:
  explicit DigitalInInitResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LabNetServer_2eproto);
    return ::descriptor_table_LabNetServer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInterfaceFieldNumber = 1,
    kPinFieldNumber = 2,
    kIsSucceedFieldNumber = 3,
  };
  // .LabNetProt.Interfaces interface = 1;
  void clear_interface();
  ::LabNetProt::Interfaces interface() const;
  void set_interface(::LabNetProt::Interfaces value);
  private:
  ::LabNetProt::Interfaces _internal_interface() const;
  void _internal_set_interface(::LabNetProt::Interfaces value);
  public:

  // uint32 pin = 2;
  void clear_pin();
  ::PROTOBUF_NAMESPACE_ID::uint32 pin() const;
  void set_pin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pin() const;
  void _internal_set_pin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool is_succeed = 3;
  void clear_is_succeed();
  bool is_succeed() const;
  void set_is_succeed(bool value);
  private:
  bool _internal_is_succeed() const;
  void _internal_set_is_succeed(bool value);
  public:

  // @@protoc_insertion_point(class_scope:LabNetProt.Server.DigitalInInitResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int interface_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pin_;
  bool is_succeed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LabNetServer_2eproto;
};
// -------------------------------------------------------------------

class DigitalOutInitResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LabNetProt.Server.DigitalOutInitResult) */ {
 public:
  inline DigitalOutInitResult() : DigitalOutInitResult(nullptr) {};
  virtual ~DigitalOutInitResult();

  DigitalOutInitResult(const DigitalOutInitResult& from);
  DigitalOutInitResult(DigitalOutInitResult&& from) noexcept
    : DigitalOutInitResult() {
    *this = ::std::move(from);
  }

  inline DigitalOutInitResult& operator=(const DigitalOutInitResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline DigitalOutInitResult& operator=(DigitalOutInitResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DigitalOutInitResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DigitalOutInitResult* internal_default_instance() {
    return reinterpret_cast<const DigitalOutInitResult*>(
               &_DigitalOutInitResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(DigitalOutInitResult& a, DigitalOutInitResult& b) {
    a.Swap(&b);
  }
  inline void Swap(DigitalOutInitResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DigitalOutInitResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DigitalOutInitResult* New() const final {
    return CreateMaybeMessage<DigitalOutInitResult>(nullptr);
  }

  DigitalOutInitResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DigitalOutInitResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DigitalOutInitResult& from);
  void MergeFrom(const DigitalOutInitResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DigitalOutInitResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LabNetProt.Server.DigitalOutInitResult";
  }
  protected:
  explicit DigitalOutInitResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LabNetServer_2eproto);
    return ::descriptor_table_LabNetServer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInterfaceFieldNumber = 1,
    kPinFieldNumber = 2,
    kIsSucceedFieldNumber = 3,
  };
  // .LabNetProt.Interfaces interface = 1;
  void clear_interface();
  ::LabNetProt::Interfaces interface() const;
  void set_interface(::LabNetProt::Interfaces value);
  private:
  ::LabNetProt::Interfaces _internal_interface() const;
  void _internal_set_interface(::LabNetProt::Interfaces value);
  public:

  // uint32 pin = 2;
  void clear_pin();
  ::PROTOBUF_NAMESPACE_ID::uint32 pin() const;
  void set_pin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pin() const;
  void _internal_set_pin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool is_succeed = 3;
  void clear_is_succeed();
  bool is_succeed() const;
  void set_is_succeed(bool value);
  private:
  bool _internal_is_succeed() const;
  void _internal_set_is_succeed(bool value);
  public:

  // @@protoc_insertion_point(class_scope:LabNetProt.Server.DigitalOutInitResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int interface_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pin_;
  bool is_succeed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LabNetServer_2eproto;
};
// -------------------------------------------------------------------

class OnlyOneConnectionAllowed PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LabNetProt.Server.OnlyOneConnectionAllowed) */ {
 public:
  inline OnlyOneConnectionAllowed() : OnlyOneConnectionAllowed(nullptr) {};
  virtual ~OnlyOneConnectionAllowed();

  OnlyOneConnectionAllowed(const OnlyOneConnectionAllowed& from);
  OnlyOneConnectionAllowed(OnlyOneConnectionAllowed&& from) noexcept
    : OnlyOneConnectionAllowed() {
    *this = ::std::move(from);
  }

  inline OnlyOneConnectionAllowed& operator=(const OnlyOneConnectionAllowed& from) {
    CopyFrom(from);
    return *this;
  }
  inline OnlyOneConnectionAllowed& operator=(OnlyOneConnectionAllowed&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OnlyOneConnectionAllowed& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OnlyOneConnectionAllowed* internal_default_instance() {
    return reinterpret_cast<const OnlyOneConnectionAllowed*>(
               &_OnlyOneConnectionAllowed_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(OnlyOneConnectionAllowed& a, OnlyOneConnectionAllowed& b) {
    a.Swap(&b);
  }
  inline void Swap(OnlyOneConnectionAllowed* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OnlyOneConnectionAllowed* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OnlyOneConnectionAllowed* New() const final {
    return CreateMaybeMessage<OnlyOneConnectionAllowed>(nullptr);
  }

  OnlyOneConnectionAllowed* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OnlyOneConnectionAllowed>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OnlyOneConnectionAllowed& from);
  void MergeFrom(const OnlyOneConnectionAllowed& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OnlyOneConnectionAllowed* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LabNetProt.Server.OnlyOneConnectionAllowed";
  }
  protected:
  explicit OnlyOneConnectionAllowed(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LabNetServer_2eproto);
    return ::descriptor_table_LabNetServer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:LabNetProt.Server.OnlyOneConnectionAllowed)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LabNetServer_2eproto;
};
// -------------------------------------------------------------------

class LabNetResetReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LabNetProt.Server.LabNetResetReply) */ {
 public:
  inline LabNetResetReply() : LabNetResetReply(nullptr) {};
  virtual ~LabNetResetReply();

  LabNetResetReply(const LabNetResetReply& from);
  LabNetResetReply(LabNetResetReply&& from) noexcept
    : LabNetResetReply() {
    *this = ::std::move(from);
  }

  inline LabNetResetReply& operator=(const LabNetResetReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline LabNetResetReply& operator=(LabNetResetReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LabNetResetReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LabNetResetReply* internal_default_instance() {
    return reinterpret_cast<const LabNetResetReply*>(
               &_LabNetResetReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(LabNetResetReply& a, LabNetResetReply& b) {
    a.Swap(&b);
  }
  inline void Swap(LabNetResetReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LabNetResetReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LabNetResetReply* New() const final {
    return CreateMaybeMessage<LabNetResetReply>(nullptr);
  }

  LabNetResetReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LabNetResetReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LabNetResetReply& from);
  void MergeFrom(const LabNetResetReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LabNetResetReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LabNetProt.Server.LabNetResetReply";
  }
  protected:
  explicit LabNetResetReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LabNetServer_2eproto);
    return ::descriptor_table_LabNetServer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsResetFieldNumber = 1,
  };
  // bool is_reset = 1;
  void clear_is_reset();
  bool is_reset() const;
  void set_is_reset(bool value);
  private:
  bool _internal_is_reset() const;
  void _internal_set_is_reset(bool value);
  public:

  // @@protoc_insertion_point(class_scope:LabNetProt.Server.LabNetResetReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool is_reset_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LabNetServer_2eproto;
};
// -------------------------------------------------------------------

class LabNetIdReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LabNetProt.Server.LabNetIdReply) */ {
 public:
  inline LabNetIdReply() : LabNetIdReply(nullptr) {};
  virtual ~LabNetIdReply();

  LabNetIdReply(const LabNetIdReply& from);
  LabNetIdReply(LabNetIdReply&& from) noexcept
    : LabNetIdReply() {
    *this = ::std::move(from);
  }

  inline LabNetIdReply& operator=(const LabNetIdReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline LabNetIdReply& operator=(LabNetIdReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LabNetIdReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LabNetIdReply* internal_default_instance() {
    return reinterpret_cast<const LabNetIdReply*>(
               &_LabNetIdReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(LabNetIdReply& a, LabNetIdReply& b) {
    a.Swap(&b);
  }
  inline void Swap(LabNetIdReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LabNetIdReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LabNetIdReply* New() const final {
    return CreateMaybeMessage<LabNetIdReply>(nullptr);
  }

  LabNetIdReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LabNetIdReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LabNetIdReply& from);
  void MergeFrom(const LabNetIdReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LabNetIdReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LabNetProt.Server.LabNetIdReply";
  }
  protected:
  explicit LabNetIdReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LabNetServer_2eproto);
    return ::descriptor_table_LabNetServer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kMajorVersionFieldNumber = 2,
    kMinorVersionFieldNumber = 3,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // uint32 major_version = 2;
  void clear_major_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 major_version() const;
  void set_major_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_major_version() const;
  void _internal_set_major_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 minor_version = 3;
  void clear_minor_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 minor_version() const;
  void set_minor_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_minor_version() const;
  void _internal_set_minor_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:LabNetProt.Server.LabNetIdReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 major_version_;
  ::PROTOBUF_NAMESPACE_ID::uint32 minor_version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LabNetServer_2eproto;
};
// -------------------------------------------------------------------

class DigitalOutLoopStartResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LabNetProt.Server.DigitalOutLoopStartResult) */ {
 public:
  inline DigitalOutLoopStartResult() : DigitalOutLoopStartResult(nullptr) {};
  virtual ~DigitalOutLoopStartResult();

  DigitalOutLoopStartResult(const DigitalOutLoopStartResult& from);
  DigitalOutLoopStartResult(DigitalOutLoopStartResult&& from) noexcept
    : DigitalOutLoopStartResult() {
    *this = ::std::move(from);
  }

  inline DigitalOutLoopStartResult& operator=(const DigitalOutLoopStartResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline DigitalOutLoopStartResult& operator=(DigitalOutLoopStartResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DigitalOutLoopStartResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DigitalOutLoopStartResult* internal_default_instance() {
    return reinterpret_cast<const DigitalOutLoopStartResult*>(
               &_DigitalOutLoopStartResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(DigitalOutLoopStartResult& a, DigitalOutLoopStartResult& b) {
    a.Swap(&b);
  }
  inline void Swap(DigitalOutLoopStartResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DigitalOutLoopStartResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DigitalOutLoopStartResult* New() const final {
    return CreateMaybeMessage<DigitalOutLoopStartResult>(nullptr);
  }

  DigitalOutLoopStartResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DigitalOutLoopStartResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DigitalOutLoopStartResult& from);
  void MergeFrom(const DigitalOutLoopStartResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DigitalOutLoopStartResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LabNetProt.Server.DigitalOutLoopStartResult";
  }
  protected:
  explicit DigitalOutLoopStartResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LabNetServer_2eproto);
    return ::descriptor_table_LabNetServer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLoopNameFieldNumber = 1,
    kIsSucceedFieldNumber = 2,
  };
  // string loop_name = 1;
  void clear_loop_name();
  const std::string& loop_name() const;
  void set_loop_name(const std::string& value);
  void set_loop_name(std::string&& value);
  void set_loop_name(const char* value);
  void set_loop_name(const char* value, size_t size);
  std::string* mutable_loop_name();
  std::string* release_loop_name();
  void set_allocated_loop_name(std::string* loop_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_loop_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_loop_name(
      std::string* loop_name);
  private:
  const std::string& _internal_loop_name() const;
  void _internal_set_loop_name(const std::string& value);
  std::string* _internal_mutable_loop_name();
  public:

  // bool is_succeed = 2;
  void clear_is_succeed();
  bool is_succeed() const;
  void set_is_succeed(bool value);
  private:
  bool _internal_is_succeed() const;
  void _internal_set_is_succeed(bool value);
  public:

  // @@protoc_insertion_point(class_scope:LabNetProt.Server.DigitalOutLoopStartResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr loop_name_;
  bool is_succeed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LabNetServer_2eproto;
};
// -------------------------------------------------------------------

class DigitalOutLoopStopped PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LabNetProt.Server.DigitalOutLoopStopped) */ {
 public:
  inline DigitalOutLoopStopped() : DigitalOutLoopStopped(nullptr) {};
  virtual ~DigitalOutLoopStopped();

  DigitalOutLoopStopped(const DigitalOutLoopStopped& from);
  DigitalOutLoopStopped(DigitalOutLoopStopped&& from) noexcept
    : DigitalOutLoopStopped() {
    *this = ::std::move(from);
  }

  inline DigitalOutLoopStopped& operator=(const DigitalOutLoopStopped& from) {
    CopyFrom(from);
    return *this;
  }
  inline DigitalOutLoopStopped& operator=(DigitalOutLoopStopped&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DigitalOutLoopStopped& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DigitalOutLoopStopped* internal_default_instance() {
    return reinterpret_cast<const DigitalOutLoopStopped*>(
               &_DigitalOutLoopStopped_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(DigitalOutLoopStopped& a, DigitalOutLoopStopped& b) {
    a.Swap(&b);
  }
  inline void Swap(DigitalOutLoopStopped* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DigitalOutLoopStopped* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DigitalOutLoopStopped* New() const final {
    return CreateMaybeMessage<DigitalOutLoopStopped>(nullptr);
  }

  DigitalOutLoopStopped* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DigitalOutLoopStopped>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DigitalOutLoopStopped& from);
  void MergeFrom(const DigitalOutLoopStopped& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DigitalOutLoopStopped* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LabNetProt.Server.DigitalOutLoopStopped";
  }
  protected:
  explicit DigitalOutLoopStopped(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LabNetServer_2eproto);
    return ::descriptor_table_LabNetServer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLoopNameFieldNumber = 1,
  };
  // string loop_name = 1;
  void clear_loop_name();
  const std::string& loop_name() const;
  void set_loop_name(const std::string& value);
  void set_loop_name(std::string&& value);
  void set_loop_name(const char* value);
  void set_loop_name(const char* value, size_t size);
  std::string* mutable_loop_name();
  std::string* release_loop_name();
  void set_allocated_loop_name(std::string* loop_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_loop_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_loop_name(
      std::string* loop_name);
  private:
  const std::string& _internal_loop_name() const;
  void _internal_set_loop_name(const std::string& value);
  std::string* _internal_mutable_loop_name();
  public:

  // @@protoc_insertion_point(class_scope:LabNetProt.Server.DigitalOutLoopStopped)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr loop_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LabNetServer_2eproto;
};
// -------------------------------------------------------------------

class ChiBioPumpMoveResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LabNetProt.Server.ChiBioPumpMoveResult) */ {
 public:
  inline ChiBioPumpMoveResult() : ChiBioPumpMoveResult(nullptr) {};
  virtual ~ChiBioPumpMoveResult();

  ChiBioPumpMoveResult(const ChiBioPumpMoveResult& from);
  ChiBioPumpMoveResult(ChiBioPumpMoveResult&& from) noexcept
    : ChiBioPumpMoveResult() {
    *this = ::std::move(from);
  }

  inline ChiBioPumpMoveResult& operator=(const ChiBioPumpMoveResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChiBioPumpMoveResult& operator=(ChiBioPumpMoveResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChiBioPumpMoveResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChiBioPumpMoveResult* internal_default_instance() {
    return reinterpret_cast<const ChiBioPumpMoveResult*>(
               &_ChiBioPumpMoveResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(ChiBioPumpMoveResult& a, ChiBioPumpMoveResult& b) {
    a.Swap(&b);
  }
  inline void Swap(ChiBioPumpMoveResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChiBioPumpMoveResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChiBioPumpMoveResult* New() const final {
    return CreateMaybeMessage<ChiBioPumpMoveResult>(nullptr);
  }

  ChiBioPumpMoveResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChiBioPumpMoveResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChiBioPumpMoveResult& from);
  void MergeFrom(const ChiBioPumpMoveResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChiBioPumpMoveResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LabNetProt.Server.ChiBioPumpMoveResult";
  }
  protected:
  explicit ChiBioPumpMoveResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LabNetServer_2eproto);
    return ::descriptor_table_LabNetServer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ChiBioPumpMoveResult_MoveResult MoveResult;
  static constexpr MoveResult STOPPED =
    ChiBioPumpMoveResult_MoveResult_STOPPED;
  static constexpr MoveResult MOVE_DOWN =
    ChiBioPumpMoveResult_MoveResult_MOVE_DOWN;
  static constexpr MoveResult MOVE_UP =
    ChiBioPumpMoveResult_MoveResult_MOVE_UP;
  static inline bool MoveResult_IsValid(int value) {
    return ChiBioPumpMoveResult_MoveResult_IsValid(value);
  }
  static constexpr MoveResult MoveResult_MIN =
    ChiBioPumpMoveResult_MoveResult_MoveResult_MIN;
  static constexpr MoveResult MoveResult_MAX =
    ChiBioPumpMoveResult_MoveResult_MoveResult_MAX;
  static constexpr int MoveResult_ARRAYSIZE =
    ChiBioPumpMoveResult_MoveResult_MoveResult_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  MoveResult_descriptor() {
    return ChiBioPumpMoveResult_MoveResult_descriptor();
  }
  template<typename T>
  static inline const std::string& MoveResult_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MoveResult>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MoveResult_Name.");
    return ChiBioPumpMoveResult_MoveResult_Name(enum_t_value);
  }
  static inline bool MoveResult_Parse(const std::string& name,
      MoveResult* value) {
    return ChiBioPumpMoveResult_MoveResult_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPumpIdFieldNumber = 1,
    kResultFieldNumber = 2,
  };
  // uint32 pump_id = 1;
  void clear_pump_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 pump_id() const;
  void set_pump_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pump_id() const;
  void _internal_set_pump_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .LabNetProt.Server.ChiBioPumpMoveResult.MoveResult result = 2;
  void clear_result();
  ::LabNetProt::Server::ChiBioPumpMoveResult_MoveResult result() const;
  void set_result(::LabNetProt::Server::ChiBioPumpMoveResult_MoveResult value);
  private:
  ::LabNetProt::Server::ChiBioPumpMoveResult_MoveResult _internal_result() const;
  void _internal_set_result(::LabNetProt::Server::ChiBioPumpMoveResult_MoveResult value);
  public:

  // @@protoc_insertion_point(class_scope:LabNetProt.Server.ChiBioPumpMoveResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pump_id_;
  int result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LabNetServer_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DigitalOutState

// .LabNetProt.PinId pin = 1;
inline bool DigitalOutState::_internal_has_pin() const {
  return this != internal_default_instance() && pin_ != nullptr;
}
inline bool DigitalOutState::has_pin() const {
  return _internal_has_pin();
}
inline const ::LabNetProt::PinId& DigitalOutState::_internal_pin() const {
  const ::LabNetProt::PinId* p = pin_;
  return p != nullptr ? *p : *reinterpret_cast<const ::LabNetProt::PinId*>(
      &::LabNetProt::_PinId_default_instance_);
}
inline const ::LabNetProt::PinId& DigitalOutState::pin() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Server.DigitalOutState.pin)
  return _internal_pin();
}
inline void DigitalOutState::unsafe_arena_set_allocated_pin(
    ::LabNetProt::PinId* pin) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pin_);
  }
  pin_ = pin;
  if (pin) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LabNetProt.Server.DigitalOutState.pin)
}
inline ::LabNetProt::PinId* DigitalOutState::release_pin() {
  auto temp = unsafe_arena_release_pin();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::LabNetProt::PinId* DigitalOutState::unsafe_arena_release_pin() {
  // @@protoc_insertion_point(field_release:LabNetProt.Server.DigitalOutState.pin)
  
  ::LabNetProt::PinId* temp = pin_;
  pin_ = nullptr;
  return temp;
}
inline ::LabNetProt::PinId* DigitalOutState::_internal_mutable_pin() {
  
  if (pin_ == nullptr) {
    auto* p = CreateMaybeMessage<::LabNetProt::PinId>(GetArena());
    pin_ = p;
  }
  return pin_;
}
inline ::LabNetProt::PinId* DigitalOutState::mutable_pin() {
  // @@protoc_insertion_point(field_mutable:LabNetProt.Server.DigitalOutState.pin)
  return _internal_mutable_pin();
}
inline void DigitalOutState::set_allocated_pin(::LabNetProt::PinId* pin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pin_);
  }
  if (pin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pin)->GetArena();
    if (message_arena != submessage_arena) {
      pin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pin, submessage_arena);
    }
    
  } else {
    
  }
  pin_ = pin;
  // @@protoc_insertion_point(field_set_allocated:LabNetProt.Server.DigitalOutState.pin)
}

// bool state = 2;
inline void DigitalOutState::clear_state() {
  state_ = false;
}
inline bool DigitalOutState::_internal_state() const {
  return state_;
}
inline bool DigitalOutState::state() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Server.DigitalOutState.state)
  return _internal_state();
}
inline void DigitalOutState::_internal_set_state(bool value) {
  
  state_ = value;
}
inline void DigitalOutState::set_state(bool value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:LabNetProt.Server.DigitalOutState.state)
}

// .google.protobuf.Timestamp time = 3;
inline bool DigitalOutState::_internal_has_time() const {
  return this != internal_default_instance() && time_ != nullptr;
}
inline bool DigitalOutState::has_time() const {
  return _internal_has_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& DigitalOutState::_internal_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = time_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& DigitalOutState::time() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Server.DigitalOutState.time)
  return _internal_time();
}
inline void DigitalOutState::unsafe_arena_set_allocated_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_);
  }
  time_ = time;
  if (time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LabNetProt.Server.DigitalOutState.time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* DigitalOutState::release_time() {
  auto temp = unsafe_arena_release_time();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* DigitalOutState::unsafe_arena_release_time() {
  // @@protoc_insertion_point(field_release:LabNetProt.Server.DigitalOutState.time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = time_;
  time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* DigitalOutState::_internal_mutable_time() {
  
  if (time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    time_ = p;
  }
  return time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* DigitalOutState::mutable_time() {
  // @@protoc_insertion_point(field_mutable:LabNetProt.Server.DigitalOutState.time)
  return _internal_mutable_time();
}
inline void DigitalOutState::set_allocated_time(PROTOBUF_NAMESPACE_ID::Timestamp* time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_);
  }
  if (time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time)->GetArena();
    if (message_arena != submessage_arena) {
      time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time, submessage_arena);
    }
    
  } else {
    
  }
  time_ = time;
  // @@protoc_insertion_point(field_set_allocated:LabNetProt.Server.DigitalOutState.time)
}

// -------------------------------------------------------------------

// DigitalInState

// .LabNetProt.PinId pin = 1;
inline bool DigitalInState::_internal_has_pin() const {
  return this != internal_default_instance() && pin_ != nullptr;
}
inline bool DigitalInState::has_pin() const {
  return _internal_has_pin();
}
inline const ::LabNetProt::PinId& DigitalInState::_internal_pin() const {
  const ::LabNetProt::PinId* p = pin_;
  return p != nullptr ? *p : *reinterpret_cast<const ::LabNetProt::PinId*>(
      &::LabNetProt::_PinId_default_instance_);
}
inline const ::LabNetProt::PinId& DigitalInState::pin() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Server.DigitalInState.pin)
  return _internal_pin();
}
inline void DigitalInState::unsafe_arena_set_allocated_pin(
    ::LabNetProt::PinId* pin) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pin_);
  }
  pin_ = pin;
  if (pin) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LabNetProt.Server.DigitalInState.pin)
}
inline ::LabNetProt::PinId* DigitalInState::release_pin() {
  auto temp = unsafe_arena_release_pin();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::LabNetProt::PinId* DigitalInState::unsafe_arena_release_pin() {
  // @@protoc_insertion_point(field_release:LabNetProt.Server.DigitalInState.pin)
  
  ::LabNetProt::PinId* temp = pin_;
  pin_ = nullptr;
  return temp;
}
inline ::LabNetProt::PinId* DigitalInState::_internal_mutable_pin() {
  
  if (pin_ == nullptr) {
    auto* p = CreateMaybeMessage<::LabNetProt::PinId>(GetArena());
    pin_ = p;
  }
  return pin_;
}
inline ::LabNetProt::PinId* DigitalInState::mutable_pin() {
  // @@protoc_insertion_point(field_mutable:LabNetProt.Server.DigitalInState.pin)
  return _internal_mutable_pin();
}
inline void DigitalInState::set_allocated_pin(::LabNetProt::PinId* pin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pin_);
  }
  if (pin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pin)->GetArena();
    if (message_arena != submessage_arena) {
      pin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pin, submessage_arena);
    }
    
  } else {
    
  }
  pin_ = pin;
  // @@protoc_insertion_point(field_set_allocated:LabNetProt.Server.DigitalInState.pin)
}

// bool state = 2;
inline void DigitalInState::clear_state() {
  state_ = false;
}
inline bool DigitalInState::_internal_state() const {
  return state_;
}
inline bool DigitalInState::state() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Server.DigitalInState.state)
  return _internal_state();
}
inline void DigitalInState::_internal_set_state(bool value) {
  
  state_ = value;
}
inline void DigitalInState::set_state(bool value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:LabNetProt.Server.DigitalInState.state)
}

// .google.protobuf.Timestamp time = 3;
inline bool DigitalInState::_internal_has_time() const {
  return this != internal_default_instance() && time_ != nullptr;
}
inline bool DigitalInState::has_time() const {
  return _internal_has_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& DigitalInState::_internal_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = time_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& DigitalInState::time() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Server.DigitalInState.time)
  return _internal_time();
}
inline void DigitalInState::unsafe_arena_set_allocated_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_);
  }
  time_ = time;
  if (time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LabNetProt.Server.DigitalInState.time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* DigitalInState::release_time() {
  auto temp = unsafe_arena_release_time();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* DigitalInState::unsafe_arena_release_time() {
  // @@protoc_insertion_point(field_release:LabNetProt.Server.DigitalInState.time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = time_;
  time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* DigitalInState::_internal_mutable_time() {
  
  if (time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    time_ = p;
  }
  return time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* DigitalInState::mutable_time() {
  // @@protoc_insertion_point(field_mutable:LabNetProt.Server.DigitalInState.time)
  return _internal_mutable_time();
}
inline void DigitalInState::set_allocated_time(PROTOBUF_NAMESPACE_ID::Timestamp* time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_);
  }
  if (time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time)->GetArena();
    if (message_arena != submessage_arena) {
      time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time, submessage_arena);
    }
    
  } else {
    
  }
  time_ = time;
  // @@protoc_insertion_point(field_set_allocated:LabNetProt.Server.DigitalInState.time)
}

// -------------------------------------------------------------------

// NewByteData

// .LabNetProt.PinId pin = 1;
inline bool NewByteData::_internal_has_pin() const {
  return this != internal_default_instance() && pin_ != nullptr;
}
inline bool NewByteData::has_pin() const {
  return _internal_has_pin();
}
inline const ::LabNetProt::PinId& NewByteData::_internal_pin() const {
  const ::LabNetProt::PinId* p = pin_;
  return p != nullptr ? *p : *reinterpret_cast<const ::LabNetProt::PinId*>(
      &::LabNetProt::_PinId_default_instance_);
}
inline const ::LabNetProt::PinId& NewByteData::pin() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Server.NewByteData.pin)
  return _internal_pin();
}
inline void NewByteData::unsafe_arena_set_allocated_pin(
    ::LabNetProt::PinId* pin) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pin_);
  }
  pin_ = pin;
  if (pin) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LabNetProt.Server.NewByteData.pin)
}
inline ::LabNetProt::PinId* NewByteData::release_pin() {
  auto temp = unsafe_arena_release_pin();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::LabNetProt::PinId* NewByteData::unsafe_arena_release_pin() {
  // @@protoc_insertion_point(field_release:LabNetProt.Server.NewByteData.pin)
  
  ::LabNetProt::PinId* temp = pin_;
  pin_ = nullptr;
  return temp;
}
inline ::LabNetProt::PinId* NewByteData::_internal_mutable_pin() {
  
  if (pin_ == nullptr) {
    auto* p = CreateMaybeMessage<::LabNetProt::PinId>(GetArena());
    pin_ = p;
  }
  return pin_;
}
inline ::LabNetProt::PinId* NewByteData::mutable_pin() {
  // @@protoc_insertion_point(field_mutable:LabNetProt.Server.NewByteData.pin)
  return _internal_mutable_pin();
}
inline void NewByteData::set_allocated_pin(::LabNetProt::PinId* pin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pin_);
  }
  if (pin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pin)->GetArena();
    if (message_arena != submessage_arena) {
      pin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pin, submessage_arena);
    }
    
  } else {
    
  }
  pin_ = pin;
  // @@protoc_insertion_point(field_set_allocated:LabNetProt.Server.NewByteData.pin)
}

// bytes data = 2;
inline void NewByteData::clear_data() {
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& NewByteData::data() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Server.NewByteData.data)
  return _internal_data();
}
inline void NewByteData::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:LabNetProt.Server.NewByteData.data)
}
inline std::string* NewByteData::mutable_data() {
  // @@protoc_insertion_point(field_mutable:LabNetProt.Server.NewByteData.data)
  return _internal_mutable_data();
}
inline const std::string& NewByteData::_internal_data() const {
  return data_.Get();
}
inline void NewByteData::_internal_set_data(const std::string& value) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void NewByteData::set_data(std::string&& value) {
  
  data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:LabNetProt.Server.NewByteData.data)
}
inline void NewByteData::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:LabNetProt.Server.NewByteData.data)
}
inline void NewByteData::set_data(const void* value,
    size_t size) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:LabNetProt.Server.NewByteData.data)
}
inline std::string* NewByteData::_internal_mutable_data() {
  
  return data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* NewByteData::release_data() {
  // @@protoc_insertion_point(field_release:LabNetProt.Server.NewByteData.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NewByteData::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:LabNetProt.Server.NewByteData.data)
}
inline std::string* NewByteData::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:LabNetProt.Server.NewByteData.data)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return data_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void NewByteData::unsafe_arena_set_allocated_data(
    std::string* data) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (data != nullptr) {
    
  } else {
    
  }
  data_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      data, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LabNetProt.Server.NewByteData.data)
}

// .google.protobuf.Timestamp time = 3;
inline bool NewByteData::_internal_has_time() const {
  return this != internal_default_instance() && time_ != nullptr;
}
inline bool NewByteData::has_time() const {
  return _internal_has_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& NewByteData::_internal_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = time_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& NewByteData::time() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Server.NewByteData.time)
  return _internal_time();
}
inline void NewByteData::unsafe_arena_set_allocated_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_);
  }
  time_ = time;
  if (time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LabNetProt.Server.NewByteData.time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* NewByteData::release_time() {
  auto temp = unsafe_arena_release_time();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* NewByteData::unsafe_arena_release_time() {
  // @@protoc_insertion_point(field_release:LabNetProt.Server.NewByteData.time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = time_;
  time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* NewByteData::_internal_mutable_time() {
  
  if (time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    time_ = p;
  }
  return time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* NewByteData::mutable_time() {
  // @@protoc_insertion_point(field_mutable:LabNetProt.Server.NewByteData.time)
  return _internal_mutable_time();
}
inline void NewByteData::set_allocated_time(PROTOBUF_NAMESPACE_ID::Timestamp* time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_);
  }
  if (time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time)->GetArena();
    if (message_arena != submessage_arena) {
      time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time, submessage_arena);
    }
    
  } else {
    
  }
  time_ = time;
  // @@protoc_insertion_point(field_set_allocated:LabNetProt.Server.NewByteData.time)
}

// -------------------------------------------------------------------

// DataWriteComplete

// .LabNetProt.PinId pin = 1;
inline bool DataWriteComplete::_internal_has_pin() const {
  return this != internal_default_instance() && pin_ != nullptr;
}
inline bool DataWriteComplete::has_pin() const {
  return _internal_has_pin();
}
inline const ::LabNetProt::PinId& DataWriteComplete::_internal_pin() const {
  const ::LabNetProt::PinId* p = pin_;
  return p != nullptr ? *p : *reinterpret_cast<const ::LabNetProt::PinId*>(
      &::LabNetProt::_PinId_default_instance_);
}
inline const ::LabNetProt::PinId& DataWriteComplete::pin() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Server.DataWriteComplete.pin)
  return _internal_pin();
}
inline void DataWriteComplete::unsafe_arena_set_allocated_pin(
    ::LabNetProt::PinId* pin) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pin_);
  }
  pin_ = pin;
  if (pin) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LabNetProt.Server.DataWriteComplete.pin)
}
inline ::LabNetProt::PinId* DataWriteComplete::release_pin() {
  auto temp = unsafe_arena_release_pin();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::LabNetProt::PinId* DataWriteComplete::unsafe_arena_release_pin() {
  // @@protoc_insertion_point(field_release:LabNetProt.Server.DataWriteComplete.pin)
  
  ::LabNetProt::PinId* temp = pin_;
  pin_ = nullptr;
  return temp;
}
inline ::LabNetProt::PinId* DataWriteComplete::_internal_mutable_pin() {
  
  if (pin_ == nullptr) {
    auto* p = CreateMaybeMessage<::LabNetProt::PinId>(GetArena());
    pin_ = p;
  }
  return pin_;
}
inline ::LabNetProt::PinId* DataWriteComplete::mutable_pin() {
  // @@protoc_insertion_point(field_mutable:LabNetProt.Server.DataWriteComplete.pin)
  return _internal_mutable_pin();
}
inline void DataWriteComplete::set_allocated_pin(::LabNetProt::PinId* pin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pin_);
  }
  if (pin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pin)->GetArena();
    if (message_arena != submessage_arena) {
      pin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pin, submessage_arena);
    }
    
  } else {
    
  }
  pin_ = pin;
  // @@protoc_insertion_point(field_set_allocated:LabNetProt.Server.DataWriteComplete.pin)
}

// -------------------------------------------------------------------

// InterfaceInitResult

// .LabNetProt.Interfaces interface = 1;
inline void InterfaceInitResult::clear_interface() {
  interface_ = 0;
}
inline ::LabNetProt::Interfaces InterfaceInitResult::_internal_interface() const {
  return static_cast< ::LabNetProt::Interfaces >(interface_);
}
inline ::LabNetProt::Interfaces InterfaceInitResult::interface() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Server.InterfaceInitResult.interface)
  return _internal_interface();
}
inline void InterfaceInitResult::_internal_set_interface(::LabNetProt::Interfaces value) {
  
  interface_ = value;
}
inline void InterfaceInitResult::set_interface(::LabNetProt::Interfaces value) {
  _internal_set_interface(value);
  // @@protoc_insertion_point(field_set:LabNetProt.Server.InterfaceInitResult.interface)
}

// bool is_succeed = 2;
inline void InterfaceInitResult::clear_is_succeed() {
  is_succeed_ = false;
}
inline bool InterfaceInitResult::_internal_is_succeed() const {
  return is_succeed_;
}
inline bool InterfaceInitResult::is_succeed() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Server.InterfaceInitResult.is_succeed)
  return _internal_is_succeed();
}
inline void InterfaceInitResult::_internal_set_is_succeed(bool value) {
  
  is_succeed_ = value;
}
inline void InterfaceInitResult::set_is_succeed(bool value) {
  _internal_set_is_succeed(value);
  // @@protoc_insertion_point(field_set:LabNetProt.Server.InterfaceInitResult.is_succeed)
}

// -------------------------------------------------------------------

// InterfaceLost

// .LabNetProt.Interfaces interface = 1;
inline void InterfaceLost::clear_interface() {
  interface_ = 0;
}
inline ::LabNetProt::Interfaces InterfaceLost::_internal_interface() const {
  return static_cast< ::LabNetProt::Interfaces >(interface_);
}
inline ::LabNetProt::Interfaces InterfaceLost::interface() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Server.InterfaceLost.interface)
  return _internal_interface();
}
inline void InterfaceLost::_internal_set_interface(::LabNetProt::Interfaces value) {
  
  interface_ = value;
}
inline void InterfaceLost::set_interface(::LabNetProt::Interfaces value) {
  _internal_set_interface(value);
  // @@protoc_insertion_point(field_set:LabNetProt.Server.InterfaceLost.interface)
}

// -------------------------------------------------------------------

// InterfaceReconnected

// .LabNetProt.Interfaces interface = 1;
inline void InterfaceReconnected::clear_interface() {
  interface_ = 0;
}
inline ::LabNetProt::Interfaces InterfaceReconnected::_internal_interface() const {
  return static_cast< ::LabNetProt::Interfaces >(interface_);
}
inline ::LabNetProt::Interfaces InterfaceReconnected::interface() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Server.InterfaceReconnected.interface)
  return _internal_interface();
}
inline void InterfaceReconnected::_internal_set_interface(::LabNetProt::Interfaces value) {
  
  interface_ = value;
}
inline void InterfaceReconnected::set_interface(::LabNetProt::Interfaces value) {
  _internal_set_interface(value);
  // @@protoc_insertion_point(field_set:LabNetProt.Server.InterfaceReconnected.interface)
}

// -------------------------------------------------------------------

// DigitalInInitResult

// .LabNetProt.Interfaces interface = 1;
inline void DigitalInInitResult::clear_interface() {
  interface_ = 0;
}
inline ::LabNetProt::Interfaces DigitalInInitResult::_internal_interface() const {
  return static_cast< ::LabNetProt::Interfaces >(interface_);
}
inline ::LabNetProt::Interfaces DigitalInInitResult::interface() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Server.DigitalInInitResult.interface)
  return _internal_interface();
}
inline void DigitalInInitResult::_internal_set_interface(::LabNetProt::Interfaces value) {
  
  interface_ = value;
}
inline void DigitalInInitResult::set_interface(::LabNetProt::Interfaces value) {
  _internal_set_interface(value);
  // @@protoc_insertion_point(field_set:LabNetProt.Server.DigitalInInitResult.interface)
}

// uint32 pin = 2;
inline void DigitalInInitResult::clear_pin() {
  pin_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DigitalInInitResult::_internal_pin() const {
  return pin_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DigitalInInitResult::pin() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Server.DigitalInInitResult.pin)
  return _internal_pin();
}
inline void DigitalInInitResult::_internal_set_pin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  pin_ = value;
}
inline void DigitalInInitResult::set_pin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pin(value);
  // @@protoc_insertion_point(field_set:LabNetProt.Server.DigitalInInitResult.pin)
}

// bool is_succeed = 3;
inline void DigitalInInitResult::clear_is_succeed() {
  is_succeed_ = false;
}
inline bool DigitalInInitResult::_internal_is_succeed() const {
  return is_succeed_;
}
inline bool DigitalInInitResult::is_succeed() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Server.DigitalInInitResult.is_succeed)
  return _internal_is_succeed();
}
inline void DigitalInInitResult::_internal_set_is_succeed(bool value) {
  
  is_succeed_ = value;
}
inline void DigitalInInitResult::set_is_succeed(bool value) {
  _internal_set_is_succeed(value);
  // @@protoc_insertion_point(field_set:LabNetProt.Server.DigitalInInitResult.is_succeed)
}

// -------------------------------------------------------------------

// DigitalOutInitResult

// .LabNetProt.Interfaces interface = 1;
inline void DigitalOutInitResult::clear_interface() {
  interface_ = 0;
}
inline ::LabNetProt::Interfaces DigitalOutInitResult::_internal_interface() const {
  return static_cast< ::LabNetProt::Interfaces >(interface_);
}
inline ::LabNetProt::Interfaces DigitalOutInitResult::interface() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Server.DigitalOutInitResult.interface)
  return _internal_interface();
}
inline void DigitalOutInitResult::_internal_set_interface(::LabNetProt::Interfaces value) {
  
  interface_ = value;
}
inline void DigitalOutInitResult::set_interface(::LabNetProt::Interfaces value) {
  _internal_set_interface(value);
  // @@protoc_insertion_point(field_set:LabNetProt.Server.DigitalOutInitResult.interface)
}

// uint32 pin = 2;
inline void DigitalOutInitResult::clear_pin() {
  pin_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DigitalOutInitResult::_internal_pin() const {
  return pin_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DigitalOutInitResult::pin() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Server.DigitalOutInitResult.pin)
  return _internal_pin();
}
inline void DigitalOutInitResult::_internal_set_pin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  pin_ = value;
}
inline void DigitalOutInitResult::set_pin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pin(value);
  // @@protoc_insertion_point(field_set:LabNetProt.Server.DigitalOutInitResult.pin)
}

// bool is_succeed = 3;
inline void DigitalOutInitResult::clear_is_succeed() {
  is_succeed_ = false;
}
inline bool DigitalOutInitResult::_internal_is_succeed() const {
  return is_succeed_;
}
inline bool DigitalOutInitResult::is_succeed() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Server.DigitalOutInitResult.is_succeed)
  return _internal_is_succeed();
}
inline void DigitalOutInitResult::_internal_set_is_succeed(bool value) {
  
  is_succeed_ = value;
}
inline void DigitalOutInitResult::set_is_succeed(bool value) {
  _internal_set_is_succeed(value);
  // @@protoc_insertion_point(field_set:LabNetProt.Server.DigitalOutInitResult.is_succeed)
}

// -------------------------------------------------------------------

// OnlyOneConnectionAllowed

// -------------------------------------------------------------------

// LabNetResetReply

// bool is_reset = 1;
inline void LabNetResetReply::clear_is_reset() {
  is_reset_ = false;
}
inline bool LabNetResetReply::_internal_is_reset() const {
  return is_reset_;
}
inline bool LabNetResetReply::is_reset() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Server.LabNetResetReply.is_reset)
  return _internal_is_reset();
}
inline void LabNetResetReply::_internal_set_is_reset(bool value) {
  
  is_reset_ = value;
}
inline void LabNetResetReply::set_is_reset(bool value) {
  _internal_set_is_reset(value);
  // @@protoc_insertion_point(field_set:LabNetProt.Server.LabNetResetReply.is_reset)
}

// -------------------------------------------------------------------

// LabNetIdReply

// string id = 1;
inline void LabNetIdReply::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LabNetIdReply::id() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Server.LabNetIdReply.id)
  return _internal_id();
}
inline void LabNetIdReply::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:LabNetProt.Server.LabNetIdReply.id)
}
inline std::string* LabNetIdReply::mutable_id() {
  // @@protoc_insertion_point(field_mutable:LabNetProt.Server.LabNetIdReply.id)
  return _internal_mutable_id();
}
inline const std::string& LabNetIdReply::_internal_id() const {
  return id_.Get();
}
inline void LabNetIdReply::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LabNetIdReply::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:LabNetProt.Server.LabNetIdReply.id)
}
inline void LabNetIdReply::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:LabNetProt.Server.LabNetIdReply.id)
}
inline void LabNetIdReply::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:LabNetProt.Server.LabNetIdReply.id)
}
inline std::string* LabNetIdReply::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LabNetIdReply::release_id() {
  // @@protoc_insertion_point(field_release:LabNetProt.Server.LabNetIdReply.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LabNetIdReply::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:LabNetProt.Server.LabNetIdReply.id)
}
inline std::string* LabNetIdReply::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:LabNetProt.Server.LabNetIdReply.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LabNetIdReply::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LabNetProt.Server.LabNetIdReply.id)
}

// uint32 major_version = 2;
inline void LabNetIdReply::clear_major_version() {
  major_version_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LabNetIdReply::_internal_major_version() const {
  return major_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LabNetIdReply::major_version() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Server.LabNetIdReply.major_version)
  return _internal_major_version();
}
inline void LabNetIdReply::_internal_set_major_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  major_version_ = value;
}
inline void LabNetIdReply::set_major_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_major_version(value);
  // @@protoc_insertion_point(field_set:LabNetProt.Server.LabNetIdReply.major_version)
}

// uint32 minor_version = 3;
inline void LabNetIdReply::clear_minor_version() {
  minor_version_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LabNetIdReply::_internal_minor_version() const {
  return minor_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LabNetIdReply::minor_version() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Server.LabNetIdReply.minor_version)
  return _internal_minor_version();
}
inline void LabNetIdReply::_internal_set_minor_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  minor_version_ = value;
}
inline void LabNetIdReply::set_minor_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_minor_version(value);
  // @@protoc_insertion_point(field_set:LabNetProt.Server.LabNetIdReply.minor_version)
}

// -------------------------------------------------------------------

// DigitalOutLoopStartResult

// string loop_name = 1;
inline void DigitalOutLoopStartResult::clear_loop_name() {
  loop_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DigitalOutLoopStartResult::loop_name() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Server.DigitalOutLoopStartResult.loop_name)
  return _internal_loop_name();
}
inline void DigitalOutLoopStartResult::set_loop_name(const std::string& value) {
  _internal_set_loop_name(value);
  // @@protoc_insertion_point(field_set:LabNetProt.Server.DigitalOutLoopStartResult.loop_name)
}
inline std::string* DigitalOutLoopStartResult::mutable_loop_name() {
  // @@protoc_insertion_point(field_mutable:LabNetProt.Server.DigitalOutLoopStartResult.loop_name)
  return _internal_mutable_loop_name();
}
inline const std::string& DigitalOutLoopStartResult::_internal_loop_name() const {
  return loop_name_.Get();
}
inline void DigitalOutLoopStartResult::_internal_set_loop_name(const std::string& value) {
  
  loop_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DigitalOutLoopStartResult::set_loop_name(std::string&& value) {
  
  loop_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:LabNetProt.Server.DigitalOutLoopStartResult.loop_name)
}
inline void DigitalOutLoopStartResult::set_loop_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  loop_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:LabNetProt.Server.DigitalOutLoopStartResult.loop_name)
}
inline void DigitalOutLoopStartResult::set_loop_name(const char* value,
    size_t size) {
  
  loop_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:LabNetProt.Server.DigitalOutLoopStartResult.loop_name)
}
inline std::string* DigitalOutLoopStartResult::_internal_mutable_loop_name() {
  
  return loop_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DigitalOutLoopStartResult::release_loop_name() {
  // @@protoc_insertion_point(field_release:LabNetProt.Server.DigitalOutLoopStartResult.loop_name)
  return loop_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DigitalOutLoopStartResult::set_allocated_loop_name(std::string* loop_name) {
  if (loop_name != nullptr) {
    
  } else {
    
  }
  loop_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), loop_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:LabNetProt.Server.DigitalOutLoopStartResult.loop_name)
}
inline std::string* DigitalOutLoopStartResult::unsafe_arena_release_loop_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:LabNetProt.Server.DigitalOutLoopStartResult.loop_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return loop_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DigitalOutLoopStartResult::unsafe_arena_set_allocated_loop_name(
    std::string* loop_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (loop_name != nullptr) {
    
  } else {
    
  }
  loop_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      loop_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LabNetProt.Server.DigitalOutLoopStartResult.loop_name)
}

// bool is_succeed = 2;
inline void DigitalOutLoopStartResult::clear_is_succeed() {
  is_succeed_ = false;
}
inline bool DigitalOutLoopStartResult::_internal_is_succeed() const {
  return is_succeed_;
}
inline bool DigitalOutLoopStartResult::is_succeed() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Server.DigitalOutLoopStartResult.is_succeed)
  return _internal_is_succeed();
}
inline void DigitalOutLoopStartResult::_internal_set_is_succeed(bool value) {
  
  is_succeed_ = value;
}
inline void DigitalOutLoopStartResult::set_is_succeed(bool value) {
  _internal_set_is_succeed(value);
  // @@protoc_insertion_point(field_set:LabNetProt.Server.DigitalOutLoopStartResult.is_succeed)
}

// -------------------------------------------------------------------

// DigitalOutLoopStopped

// string loop_name = 1;
inline void DigitalOutLoopStopped::clear_loop_name() {
  loop_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DigitalOutLoopStopped::loop_name() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Server.DigitalOutLoopStopped.loop_name)
  return _internal_loop_name();
}
inline void DigitalOutLoopStopped::set_loop_name(const std::string& value) {
  _internal_set_loop_name(value);
  // @@protoc_insertion_point(field_set:LabNetProt.Server.DigitalOutLoopStopped.loop_name)
}
inline std::string* DigitalOutLoopStopped::mutable_loop_name() {
  // @@protoc_insertion_point(field_mutable:LabNetProt.Server.DigitalOutLoopStopped.loop_name)
  return _internal_mutable_loop_name();
}
inline const std::string& DigitalOutLoopStopped::_internal_loop_name() const {
  return loop_name_.Get();
}
inline void DigitalOutLoopStopped::_internal_set_loop_name(const std::string& value) {
  
  loop_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DigitalOutLoopStopped::set_loop_name(std::string&& value) {
  
  loop_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:LabNetProt.Server.DigitalOutLoopStopped.loop_name)
}
inline void DigitalOutLoopStopped::set_loop_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  loop_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:LabNetProt.Server.DigitalOutLoopStopped.loop_name)
}
inline void DigitalOutLoopStopped::set_loop_name(const char* value,
    size_t size) {
  
  loop_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:LabNetProt.Server.DigitalOutLoopStopped.loop_name)
}
inline std::string* DigitalOutLoopStopped::_internal_mutable_loop_name() {
  
  return loop_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DigitalOutLoopStopped::release_loop_name() {
  // @@protoc_insertion_point(field_release:LabNetProt.Server.DigitalOutLoopStopped.loop_name)
  return loop_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DigitalOutLoopStopped::set_allocated_loop_name(std::string* loop_name) {
  if (loop_name != nullptr) {
    
  } else {
    
  }
  loop_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), loop_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:LabNetProt.Server.DigitalOutLoopStopped.loop_name)
}
inline std::string* DigitalOutLoopStopped::unsafe_arena_release_loop_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:LabNetProt.Server.DigitalOutLoopStopped.loop_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return loop_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DigitalOutLoopStopped::unsafe_arena_set_allocated_loop_name(
    std::string* loop_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (loop_name != nullptr) {
    
  } else {
    
  }
  loop_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      loop_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LabNetProt.Server.DigitalOutLoopStopped.loop_name)
}

// -------------------------------------------------------------------

// ChiBioPumpMoveResult

// uint32 pump_id = 1;
inline void ChiBioPumpMoveResult::clear_pump_id() {
  pump_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChiBioPumpMoveResult::_internal_pump_id() const {
  return pump_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChiBioPumpMoveResult::pump_id() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Server.ChiBioPumpMoveResult.pump_id)
  return _internal_pump_id();
}
inline void ChiBioPumpMoveResult::_internal_set_pump_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  pump_id_ = value;
}
inline void ChiBioPumpMoveResult::set_pump_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pump_id(value);
  // @@protoc_insertion_point(field_set:LabNetProt.Server.ChiBioPumpMoveResult.pump_id)
}

// .LabNetProt.Server.ChiBioPumpMoveResult.MoveResult result = 2;
inline void ChiBioPumpMoveResult::clear_result() {
  result_ = 0;
}
inline ::LabNetProt::Server::ChiBioPumpMoveResult_MoveResult ChiBioPumpMoveResult::_internal_result() const {
  return static_cast< ::LabNetProt::Server::ChiBioPumpMoveResult_MoveResult >(result_);
}
inline ::LabNetProt::Server::ChiBioPumpMoveResult_MoveResult ChiBioPumpMoveResult::result() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Server.ChiBioPumpMoveResult.result)
  return _internal_result();
}
inline void ChiBioPumpMoveResult::_internal_set_result(::LabNetProt::Server::ChiBioPumpMoveResult_MoveResult value) {
  
  result_ = value;
}
inline void ChiBioPumpMoveResult::set_result(::LabNetProt::Server::ChiBioPumpMoveResult_MoveResult value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:LabNetProt.Server.ChiBioPumpMoveResult.result)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Server
}  // namespace LabNetProt

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::LabNetProt::Server::ChiBioPumpMoveResult_MoveResult> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::LabNetProt::Server::ChiBioPumpMoveResult_MoveResult>() {
  return ::LabNetProt::Server::ChiBioPumpMoveResult_MoveResult_descriptor();
}
template <> struct is_proto_enum< ::LabNetProt::Server::ServerMessageType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::LabNetProt::Server::ServerMessageType>() {
  return ::LabNetProt::Server::ServerMessageType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_LabNetServer_2eproto
