// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LabNetClient.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_LabNetClient_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_LabNetClient_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "LabNet.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_LabNetClient_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_LabNetClient_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[26]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_LabNetClient_2eproto;
namespace LabNetProt {
namespace Client {
class BleUartInit;
class BleUartInitDefaultTypeInternal;
extern BleUartInitDefaultTypeInternal _BleUartInit_default_instance_;
class ChiBioInit;
class ChiBioInitDefaultTypeInternal;
extern ChiBioInitDefaultTypeInternal _ChiBioInit_default_instance_;
class DigitalOutPulse;
class DigitalOutPulseDefaultTypeInternal;
extern DigitalOutPulseDefaultTypeInternal _DigitalOutPulse_default_instance_;
class DigitalOutSet;
class DigitalOutSetDefaultTypeInternal;
extern DigitalOutSetDefaultTypeInternal _DigitalOutSet_default_instance_;
class GpioWiringPiInit;
class GpioWiringPiInitDefaultTypeInternal;
extern GpioWiringPiInitDefaultTypeInternal _GpioWiringPiInit_default_instance_;
class GpioWiringPiInitDigitalIn;
class GpioWiringPiInitDigitalInDefaultTypeInternal;
extern GpioWiringPiInitDigitalInDefaultTypeInternal _GpioWiringPiInitDigitalIn_default_instance_;
class GpioWiringPiInitDigitalOut;
class GpioWiringPiInitDigitalOutDefaultTypeInternal;
extern GpioWiringPiInitDigitalOutDefaultTypeInternal _GpioWiringPiInitDigitalOut_default_instance_;
class InitSound;
class InitSoundDefaultTypeInternal;
extern InitSoundDefaultTypeInternal _InitSound_default_instance_;
class InitSoundSignal;
class InitSoundSignalDefaultTypeInternal;
extern InitSoundSignalDefaultTypeInternal _InitSoundSignal_default_instance_;
class IoBoardInit;
class IoBoardInitDefaultTypeInternal;
extern IoBoardInitDefaultTypeInternal _IoBoardInit_default_instance_;
class IoBoardInitDigitalIn;
class IoBoardInitDigitalInDefaultTypeInternal;
extern IoBoardInitDigitalInDefaultTypeInternal _IoBoardInitDigitalIn_default_instance_;
class IoBoardInitDigitalOut;
class IoBoardInitDigitalOutDefaultTypeInternal;
extern IoBoardInitDigitalOutDefaultTypeInternal _IoBoardInitDigitalOut_default_instance_;
class LabNetIdRequest;
class LabNetIdRequestDefaultTypeInternal;
extern LabNetIdRequestDefaultTypeInternal _LabNetIdRequest_default_instance_;
class LabNetResetRequest;
class LabNetResetRequestDefaultTypeInternal;
extern LabNetResetRequestDefaultTypeInternal _LabNetResetRequest_default_instance_;
class MoveChiBioPump;
class MoveChiBioPumpDefaultTypeInternal;
extern MoveChiBioPumpDefaultTypeInternal _MoveChiBioPump_default_instance_;
class RfidBoardInit;
class RfidBoardInitDefaultTypeInternal;
extern RfidBoardInitDefaultTypeInternal _RfidBoardInit_default_instance_;
class RfidBoardSetPhaseMatrix;
class RfidBoardSetPhaseMatrixDefaultTypeInternal;
extern RfidBoardSetPhaseMatrixDefaultTypeInternal _RfidBoardSetPhaseMatrix_default_instance_;
class StartDigitalOutLoop;
class StartDigitalOutLoopDefaultTypeInternal;
extern StartDigitalOutLoopDefaultTypeInternal _StartDigitalOutLoop_default_instance_;
class StartDigitalOutLoop_DigitalOutputParameter;
class StartDigitalOutLoop_DigitalOutputParameterDefaultTypeInternal;
extern StartDigitalOutLoop_DigitalOutputParameterDefaultTypeInternal _StartDigitalOutLoop_DigitalOutputParameter_default_instance_;
class StopDigitalOutLoop;
class StopDigitalOutLoopDefaultTypeInternal;
extern StopDigitalOutLoopDefaultTypeInternal _StopDigitalOutLoop_default_instance_;
class UartBoardInit;
class UartBoardInitDefaultTypeInternal;
extern UartBoardInitDefaultTypeInternal _UartBoardInit_default_instance_;
class UartBoardWriteData;
class UartBoardWriteDataDefaultTypeInternal;
extern UartBoardWriteDataDefaultTypeInternal _UartBoardWriteData_default_instance_;
class UartInit;
class UartInitDefaultTypeInternal;
extern UartInitDefaultTypeInternal _UartInit_default_instance_;
class UartInitDigitalIn;
class UartInitDigitalInDefaultTypeInternal;
extern UartInitDigitalInDefaultTypeInternal _UartInitDigitalIn_default_instance_;
class UartInitDigitalOut;
class UartInitDigitalOutDefaultTypeInternal;
extern UartInitDigitalOutDefaultTypeInternal _UartInitDigitalOut_default_instance_;
class UartWriteData;
class UartWriteDataDefaultTypeInternal;
extern UartWriteDataDefaultTypeInternal _UartWriteData_default_instance_;
}  // namespace Client
}  // namespace LabNetProt
PROTOBUF_NAMESPACE_OPEN
template<> ::LabNetProt::Client::BleUartInit* Arena::CreateMaybeMessage<::LabNetProt::Client::BleUartInit>(Arena*);
template<> ::LabNetProt::Client::ChiBioInit* Arena::CreateMaybeMessage<::LabNetProt::Client::ChiBioInit>(Arena*);
template<> ::LabNetProt::Client::DigitalOutPulse* Arena::CreateMaybeMessage<::LabNetProt::Client::DigitalOutPulse>(Arena*);
template<> ::LabNetProt::Client::DigitalOutSet* Arena::CreateMaybeMessage<::LabNetProt::Client::DigitalOutSet>(Arena*);
template<> ::LabNetProt::Client::GpioWiringPiInit* Arena::CreateMaybeMessage<::LabNetProt::Client::GpioWiringPiInit>(Arena*);
template<> ::LabNetProt::Client::GpioWiringPiInitDigitalIn* Arena::CreateMaybeMessage<::LabNetProt::Client::GpioWiringPiInitDigitalIn>(Arena*);
template<> ::LabNetProt::Client::GpioWiringPiInitDigitalOut* Arena::CreateMaybeMessage<::LabNetProt::Client::GpioWiringPiInitDigitalOut>(Arena*);
template<> ::LabNetProt::Client::InitSound* Arena::CreateMaybeMessage<::LabNetProt::Client::InitSound>(Arena*);
template<> ::LabNetProt::Client::InitSoundSignal* Arena::CreateMaybeMessage<::LabNetProt::Client::InitSoundSignal>(Arena*);
template<> ::LabNetProt::Client::IoBoardInit* Arena::CreateMaybeMessage<::LabNetProt::Client::IoBoardInit>(Arena*);
template<> ::LabNetProt::Client::IoBoardInitDigitalIn* Arena::CreateMaybeMessage<::LabNetProt::Client::IoBoardInitDigitalIn>(Arena*);
template<> ::LabNetProt::Client::IoBoardInitDigitalOut* Arena::CreateMaybeMessage<::LabNetProt::Client::IoBoardInitDigitalOut>(Arena*);
template<> ::LabNetProt::Client::LabNetIdRequest* Arena::CreateMaybeMessage<::LabNetProt::Client::LabNetIdRequest>(Arena*);
template<> ::LabNetProt::Client::LabNetResetRequest* Arena::CreateMaybeMessage<::LabNetProt::Client::LabNetResetRequest>(Arena*);
template<> ::LabNetProt::Client::MoveChiBioPump* Arena::CreateMaybeMessage<::LabNetProt::Client::MoveChiBioPump>(Arena*);
template<> ::LabNetProt::Client::RfidBoardInit* Arena::CreateMaybeMessage<::LabNetProt::Client::RfidBoardInit>(Arena*);
template<> ::LabNetProt::Client::RfidBoardSetPhaseMatrix* Arena::CreateMaybeMessage<::LabNetProt::Client::RfidBoardSetPhaseMatrix>(Arena*);
template<> ::LabNetProt::Client::StartDigitalOutLoop* Arena::CreateMaybeMessage<::LabNetProt::Client::StartDigitalOutLoop>(Arena*);
template<> ::LabNetProt::Client::StartDigitalOutLoop_DigitalOutputParameter* Arena::CreateMaybeMessage<::LabNetProt::Client::StartDigitalOutLoop_DigitalOutputParameter>(Arena*);
template<> ::LabNetProt::Client::StopDigitalOutLoop* Arena::CreateMaybeMessage<::LabNetProt::Client::StopDigitalOutLoop>(Arena*);
template<> ::LabNetProt::Client::UartBoardInit* Arena::CreateMaybeMessage<::LabNetProt::Client::UartBoardInit>(Arena*);
template<> ::LabNetProt::Client::UartBoardWriteData* Arena::CreateMaybeMessage<::LabNetProt::Client::UartBoardWriteData>(Arena*);
template<> ::LabNetProt::Client::UartInit* Arena::CreateMaybeMessage<::LabNetProt::Client::UartInit>(Arena*);
template<> ::LabNetProt::Client::UartInitDigitalIn* Arena::CreateMaybeMessage<::LabNetProt::Client::UartInitDigitalIn>(Arena*);
template<> ::LabNetProt::Client::UartInitDigitalOut* Arena::CreateMaybeMessage<::LabNetProt::Client::UartInitDigitalOut>(Arena*);
template<> ::LabNetProt::Client::UartWriteData* Arena::CreateMaybeMessage<::LabNetProt::Client::UartWriteData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace LabNetProt {
namespace Client {

enum IoBoardInitDigitalIn_Resistor : int {
  IoBoardInitDigitalIn_Resistor_OFF = 0,
  IoBoardInitDigitalIn_Resistor_PULL_DOWN = 1,
  IoBoardInitDigitalIn_Resistor_PULL_UP = 2,
  IoBoardInitDigitalIn_Resistor_IoBoardInitDigitalIn_Resistor_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  IoBoardInitDigitalIn_Resistor_IoBoardInitDigitalIn_Resistor_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool IoBoardInitDigitalIn_Resistor_IsValid(int value);
constexpr IoBoardInitDigitalIn_Resistor IoBoardInitDigitalIn_Resistor_Resistor_MIN = IoBoardInitDigitalIn_Resistor_OFF;
constexpr IoBoardInitDigitalIn_Resistor IoBoardInitDigitalIn_Resistor_Resistor_MAX = IoBoardInitDigitalIn_Resistor_PULL_UP;
constexpr int IoBoardInitDigitalIn_Resistor_Resistor_ARRAYSIZE = IoBoardInitDigitalIn_Resistor_Resistor_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IoBoardInitDigitalIn_Resistor_descriptor();
template<typename T>
inline const std::string& IoBoardInitDigitalIn_Resistor_Name(T enum_t_value) {
  static_assert(::std::is_same<T, IoBoardInitDigitalIn_Resistor>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function IoBoardInitDigitalIn_Resistor_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    IoBoardInitDigitalIn_Resistor_descriptor(), enum_t_value);
}
inline bool IoBoardInitDigitalIn_Resistor_Parse(
    const std::string& name, IoBoardInitDigitalIn_Resistor* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<IoBoardInitDigitalIn_Resistor>(
    IoBoardInitDigitalIn_Resistor_descriptor(), name, value);
}
enum GpioWiringPiInitDigitalIn_Resistor : int {
  GpioWiringPiInitDigitalIn_Resistor_OFF = 0,
  GpioWiringPiInitDigitalIn_Resistor_PULL_DOWN = 1,
  GpioWiringPiInitDigitalIn_Resistor_PULL_UP = 2,
  GpioWiringPiInitDigitalIn_Resistor_GpioWiringPiInitDigitalIn_Resistor_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  GpioWiringPiInitDigitalIn_Resistor_GpioWiringPiInitDigitalIn_Resistor_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool GpioWiringPiInitDigitalIn_Resistor_IsValid(int value);
constexpr GpioWiringPiInitDigitalIn_Resistor GpioWiringPiInitDigitalIn_Resistor_Resistor_MIN = GpioWiringPiInitDigitalIn_Resistor_OFF;
constexpr GpioWiringPiInitDigitalIn_Resistor GpioWiringPiInitDigitalIn_Resistor_Resistor_MAX = GpioWiringPiInitDigitalIn_Resistor_PULL_UP;
constexpr int GpioWiringPiInitDigitalIn_Resistor_Resistor_ARRAYSIZE = GpioWiringPiInitDigitalIn_Resistor_Resistor_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GpioWiringPiInitDigitalIn_Resistor_descriptor();
template<typename T>
inline const std::string& GpioWiringPiInitDigitalIn_Resistor_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GpioWiringPiInitDigitalIn_Resistor>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GpioWiringPiInitDigitalIn_Resistor_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GpioWiringPiInitDigitalIn_Resistor_descriptor(), enum_t_value);
}
inline bool GpioWiringPiInitDigitalIn_Resistor_Parse(
    const std::string& name, GpioWiringPiInitDigitalIn_Resistor* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GpioWiringPiInitDigitalIn_Resistor>(
    GpioWiringPiInitDigitalIn_Resistor_descriptor(), name, value);
}
enum ClientMessageType : int {
  NONE = 0,
  LABNET_ID_REQUEST = 1,
  LABNET_RESET_REQUEST = 2,
  IO_BOARD_INIT = 3,
  IO_BOARD_INIT_DIGITAL_IN = 4,
  IO_BOARD_INIT_DIGITAL_OUT = 5,
  RFID_BOARD_INIT = 6,
  RFID_BOARD_SET_PHASE_MATRIX = 7,
  UART_INIT = 8,
  UART_WRITE_DATA = 9,
  DIGITAL_OUT_SET = 10,
  DIGITAL_OUT_PULSE = 11,
  START_DIGITAL_OUT_LOOP = 12,
  STOP_DIGITAL_OUT_LOOP = 13,
  GPIO_WIRINGPI_INIT = 14,
  GPIO_WIRINGPI_INIT_DIGITAL_IN = 15,
  GPIO_WIRINGPI_INIT_DIGITAL_OUT = 16,
  INIT_SOUND = 17,
  INIT_SOUND_SIGNAL = 18,
  UART_INIT_DIGITAL_IN = 19,
  UART_INIT_DIGITAL_OUT = 20,
  CHI_BIO_INIT = 21,
  MOVE_CHI_BIO_PUMP = 22,
  BLE_UART_INIT = 23,
  UART_BOARD_INIT = 24,
  UART_BOARD_WRITE_DATA = 25,
  ClientMessageType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ClientMessageType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ClientMessageType_IsValid(int value);
constexpr ClientMessageType ClientMessageType_MIN = NONE;
constexpr ClientMessageType ClientMessageType_MAX = UART_BOARD_WRITE_DATA;
constexpr int ClientMessageType_ARRAYSIZE = ClientMessageType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClientMessageType_descriptor();
template<typename T>
inline const std::string& ClientMessageType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ClientMessageType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ClientMessageType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ClientMessageType_descriptor(), enum_t_value);
}
inline bool ClientMessageType_Parse(
    const std::string& name, ClientMessageType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ClientMessageType>(
    ClientMessageType_descriptor(), name, value);
}
enum SoundSignalType : int {
  SINE_WAVE = 0,
  SQUARE_WAVE = 1,
  TRIANGLE_WAVE = 2,
  SAW_TOOTH_WAVE = 3,
  WHITE_NOISE = 4,
  PINK_NOISE = 5,
  SWEEP = 6,
  SoundSignalType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SoundSignalType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SoundSignalType_IsValid(int value);
constexpr SoundSignalType SoundSignalType_MIN = SINE_WAVE;
constexpr SoundSignalType SoundSignalType_MAX = SWEEP;
constexpr int SoundSignalType_ARRAYSIZE = SoundSignalType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SoundSignalType_descriptor();
template<typename T>
inline const std::string& SoundSignalType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SoundSignalType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SoundSignalType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SoundSignalType_descriptor(), enum_t_value);
}
inline bool SoundSignalType_Parse(
    const std::string& name, SoundSignalType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SoundSignalType>(
    SoundSignalType_descriptor(), name, value);
}
// ===================================================================

class IoBoardInit PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LabNetProt.Client.IoBoardInit) */ {
 public:
  inline IoBoardInit() : IoBoardInit(nullptr) {};
  virtual ~IoBoardInit();

  IoBoardInit(const IoBoardInit& from);
  IoBoardInit(IoBoardInit&& from) noexcept
    : IoBoardInit() {
    *this = ::std::move(from);
  }

  inline IoBoardInit& operator=(const IoBoardInit& from) {
    CopyFrom(from);
    return *this;
  }
  inline IoBoardInit& operator=(IoBoardInit&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IoBoardInit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IoBoardInit* internal_default_instance() {
    return reinterpret_cast<const IoBoardInit*>(
               &_IoBoardInit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(IoBoardInit& a, IoBoardInit& b) {
    a.Swap(&b);
  }
  inline void Swap(IoBoardInit* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IoBoardInit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IoBoardInit* New() const final {
    return CreateMaybeMessage<IoBoardInit>(nullptr);
  }

  IoBoardInit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IoBoardInit>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IoBoardInit& from);
  void MergeFrom(const IoBoardInit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IoBoardInit* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LabNetProt.Client.IoBoardInit";
  }
  protected:
  explicit IoBoardInit(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LabNetClient_2eproto);
    return ::descriptor_table_LabNetClient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:LabNetProt.Client.IoBoardInit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LabNetClient_2eproto;
};
// -------------------------------------------------------------------

class IoBoardInitDigitalIn PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LabNetProt.Client.IoBoardInitDigitalIn) */ {
 public:
  inline IoBoardInitDigitalIn() : IoBoardInitDigitalIn(nullptr) {};
  virtual ~IoBoardInitDigitalIn();

  IoBoardInitDigitalIn(const IoBoardInitDigitalIn& from);
  IoBoardInitDigitalIn(IoBoardInitDigitalIn&& from) noexcept
    : IoBoardInitDigitalIn() {
    *this = ::std::move(from);
  }

  inline IoBoardInitDigitalIn& operator=(const IoBoardInitDigitalIn& from) {
    CopyFrom(from);
    return *this;
  }
  inline IoBoardInitDigitalIn& operator=(IoBoardInitDigitalIn&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IoBoardInitDigitalIn& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IoBoardInitDigitalIn* internal_default_instance() {
    return reinterpret_cast<const IoBoardInitDigitalIn*>(
               &_IoBoardInitDigitalIn_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(IoBoardInitDigitalIn& a, IoBoardInitDigitalIn& b) {
    a.Swap(&b);
  }
  inline void Swap(IoBoardInitDigitalIn* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IoBoardInitDigitalIn* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IoBoardInitDigitalIn* New() const final {
    return CreateMaybeMessage<IoBoardInitDigitalIn>(nullptr);
  }

  IoBoardInitDigitalIn* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IoBoardInitDigitalIn>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IoBoardInitDigitalIn& from);
  void MergeFrom(const IoBoardInitDigitalIn& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IoBoardInitDigitalIn* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LabNetProt.Client.IoBoardInitDigitalIn";
  }
  protected:
  explicit IoBoardInitDigitalIn(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LabNetClient_2eproto);
    return ::descriptor_table_LabNetClient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef IoBoardInitDigitalIn_Resistor Resistor;
  static constexpr Resistor OFF =
    IoBoardInitDigitalIn_Resistor_OFF;
  static constexpr Resistor PULL_DOWN =
    IoBoardInitDigitalIn_Resistor_PULL_DOWN;
  static constexpr Resistor PULL_UP =
    IoBoardInitDigitalIn_Resistor_PULL_UP;
  static inline bool Resistor_IsValid(int value) {
    return IoBoardInitDigitalIn_Resistor_IsValid(value);
  }
  static constexpr Resistor Resistor_MIN =
    IoBoardInitDigitalIn_Resistor_Resistor_MIN;
  static constexpr Resistor Resistor_MAX =
    IoBoardInitDigitalIn_Resistor_Resistor_MAX;
  static constexpr int Resistor_ARRAYSIZE =
    IoBoardInitDigitalIn_Resistor_Resistor_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Resistor_descriptor() {
    return IoBoardInitDigitalIn_Resistor_descriptor();
  }
  template<typename T>
  static inline const std::string& Resistor_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Resistor>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Resistor_Name.");
    return IoBoardInitDigitalIn_Resistor_Name(enum_t_value);
  }
  static inline bool Resistor_Parse(const std::string& name,
      Resistor* value) {
    return IoBoardInitDigitalIn_Resistor_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPinFieldNumber = 1,
    kResistorStateFieldNumber = 2,
    kIsInvertedFieldNumber = 3,
  };
  // uint32 pin = 1;
  void clear_pin();
  ::PROTOBUF_NAMESPACE_ID::uint32 pin() const;
  void set_pin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pin() const;
  void _internal_set_pin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .LabNetProt.Client.IoBoardInitDigitalIn.Resistor resistor_state = 2;
  void clear_resistor_state();
  ::LabNetProt::Client::IoBoardInitDigitalIn_Resistor resistor_state() const;
  void set_resistor_state(::LabNetProt::Client::IoBoardInitDigitalIn_Resistor value);
  private:
  ::LabNetProt::Client::IoBoardInitDigitalIn_Resistor _internal_resistor_state() const;
  void _internal_set_resistor_state(::LabNetProt::Client::IoBoardInitDigitalIn_Resistor value);
  public:

  // bool is_inverted = 3;
  void clear_is_inverted();
  bool is_inverted() const;
  void set_is_inverted(bool value);
  private:
  bool _internal_is_inverted() const;
  void _internal_set_is_inverted(bool value);
  public:

  // @@protoc_insertion_point(class_scope:LabNetProt.Client.IoBoardInitDigitalIn)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pin_;
  int resistor_state_;
  bool is_inverted_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LabNetClient_2eproto;
};
// -------------------------------------------------------------------

class IoBoardInitDigitalOut PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LabNetProt.Client.IoBoardInitDigitalOut) */ {
 public:
  inline IoBoardInitDigitalOut() : IoBoardInitDigitalOut(nullptr) {};
  virtual ~IoBoardInitDigitalOut();

  IoBoardInitDigitalOut(const IoBoardInitDigitalOut& from);
  IoBoardInitDigitalOut(IoBoardInitDigitalOut&& from) noexcept
    : IoBoardInitDigitalOut() {
    *this = ::std::move(from);
  }

  inline IoBoardInitDigitalOut& operator=(const IoBoardInitDigitalOut& from) {
    CopyFrom(from);
    return *this;
  }
  inline IoBoardInitDigitalOut& operator=(IoBoardInitDigitalOut&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IoBoardInitDigitalOut& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IoBoardInitDigitalOut* internal_default_instance() {
    return reinterpret_cast<const IoBoardInitDigitalOut*>(
               &_IoBoardInitDigitalOut_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(IoBoardInitDigitalOut& a, IoBoardInitDigitalOut& b) {
    a.Swap(&b);
  }
  inline void Swap(IoBoardInitDigitalOut* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IoBoardInitDigitalOut* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IoBoardInitDigitalOut* New() const final {
    return CreateMaybeMessage<IoBoardInitDigitalOut>(nullptr);
  }

  IoBoardInitDigitalOut* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IoBoardInitDigitalOut>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IoBoardInitDigitalOut& from);
  void MergeFrom(const IoBoardInitDigitalOut& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IoBoardInitDigitalOut* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LabNetProt.Client.IoBoardInitDigitalOut";
  }
  protected:
  explicit IoBoardInitDigitalOut(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LabNetClient_2eproto);
    return ::descriptor_table_LabNetClient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPinFieldNumber = 1,
    kIsInvertedFieldNumber = 2,
  };
  // uint32 pin = 1;
  void clear_pin();
  ::PROTOBUF_NAMESPACE_ID::uint32 pin() const;
  void set_pin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pin() const;
  void _internal_set_pin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool is_inverted = 2;
  void clear_is_inverted();
  bool is_inverted() const;
  void set_is_inverted(bool value);
  private:
  bool _internal_is_inverted() const;
  void _internal_set_is_inverted(bool value);
  public:

  // @@protoc_insertion_point(class_scope:LabNetProt.Client.IoBoardInitDigitalOut)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pin_;
  bool is_inverted_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LabNetClient_2eproto;
};
// -------------------------------------------------------------------

class RfidBoardInit PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LabNetProt.Client.RfidBoardInit) */ {
 public:
  inline RfidBoardInit() : RfidBoardInit(nullptr) {};
  virtual ~RfidBoardInit();

  RfidBoardInit(const RfidBoardInit& from);
  RfidBoardInit(RfidBoardInit&& from) noexcept
    : RfidBoardInit() {
    *this = ::std::move(from);
  }

  inline RfidBoardInit& operator=(const RfidBoardInit& from) {
    CopyFrom(from);
    return *this;
  }
  inline RfidBoardInit& operator=(RfidBoardInit&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RfidBoardInit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RfidBoardInit* internal_default_instance() {
    return reinterpret_cast<const RfidBoardInit*>(
               &_RfidBoardInit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RfidBoardInit& a, RfidBoardInit& b) {
    a.Swap(&b);
  }
  inline void Swap(RfidBoardInit* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RfidBoardInit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RfidBoardInit* New() const final {
    return CreateMaybeMessage<RfidBoardInit>(nullptr);
  }

  RfidBoardInit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RfidBoardInit>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RfidBoardInit& from);
  void MergeFrom(const RfidBoardInit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RfidBoardInit* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LabNetProt.Client.RfidBoardInit";
  }
  protected:
  explicit RfidBoardInit(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LabNetClient_2eproto);
    return ::descriptor_table_LabNetClient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAntennaPhase1FieldNumber = 1,
    kAntennaPhase2FieldNumber = 2,
    kPhaseDurationFieldNumber = 3,
    kInvertedFieldNumber = 4,
  };
  // uint32 antenna_phase1 = 1;
  void clear_antenna_phase1();
  ::PROTOBUF_NAMESPACE_ID::uint32 antenna_phase1() const;
  void set_antenna_phase1(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_antenna_phase1() const;
  void _internal_set_antenna_phase1(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 antenna_phase2 = 2;
  void clear_antenna_phase2();
  ::PROTOBUF_NAMESPACE_ID::uint32 antenna_phase2() const;
  void set_antenna_phase2(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_antenna_phase2() const;
  void _internal_set_antenna_phase2(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 phase_duration = 3;
  void clear_phase_duration();
  ::PROTOBUF_NAMESPACE_ID::uint32 phase_duration() const;
  void set_phase_duration(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_phase_duration() const;
  void _internal_set_phase_duration(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool inverted = 4;
  void clear_inverted();
  bool inverted() const;
  void set_inverted(bool value);
  private:
  bool _internal_inverted() const;
  void _internal_set_inverted(bool value);
  public:

  // @@protoc_insertion_point(class_scope:LabNetProt.Client.RfidBoardInit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 antenna_phase1_;
  ::PROTOBUF_NAMESPACE_ID::uint32 antenna_phase2_;
  ::PROTOBUF_NAMESPACE_ID::uint32 phase_duration_;
  bool inverted_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LabNetClient_2eproto;
};
// -------------------------------------------------------------------

class RfidBoardSetPhaseMatrix PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LabNetProt.Client.RfidBoardSetPhaseMatrix) */ {
 public:
  inline RfidBoardSetPhaseMatrix() : RfidBoardSetPhaseMatrix(nullptr) {};
  virtual ~RfidBoardSetPhaseMatrix();

  RfidBoardSetPhaseMatrix(const RfidBoardSetPhaseMatrix& from);
  RfidBoardSetPhaseMatrix(RfidBoardSetPhaseMatrix&& from) noexcept
    : RfidBoardSetPhaseMatrix() {
    *this = ::std::move(from);
  }

  inline RfidBoardSetPhaseMatrix& operator=(const RfidBoardSetPhaseMatrix& from) {
    CopyFrom(from);
    return *this;
  }
  inline RfidBoardSetPhaseMatrix& operator=(RfidBoardSetPhaseMatrix&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RfidBoardSetPhaseMatrix& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RfidBoardSetPhaseMatrix* internal_default_instance() {
    return reinterpret_cast<const RfidBoardSetPhaseMatrix*>(
               &_RfidBoardSetPhaseMatrix_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RfidBoardSetPhaseMatrix& a, RfidBoardSetPhaseMatrix& b) {
    a.Swap(&b);
  }
  inline void Swap(RfidBoardSetPhaseMatrix* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RfidBoardSetPhaseMatrix* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RfidBoardSetPhaseMatrix* New() const final {
    return CreateMaybeMessage<RfidBoardSetPhaseMatrix>(nullptr);
  }

  RfidBoardSetPhaseMatrix* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RfidBoardSetPhaseMatrix>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RfidBoardSetPhaseMatrix& from);
  void MergeFrom(const RfidBoardSetPhaseMatrix& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RfidBoardSetPhaseMatrix* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LabNetProt.Client.RfidBoardSetPhaseMatrix";
  }
  protected:
  explicit RfidBoardSetPhaseMatrix(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LabNetClient_2eproto);
    return ::descriptor_table_LabNetClient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAntennaPhase1FieldNumber = 1,
    kAntennaPhase2FieldNumber = 2,
    kPhaseDurationFieldNumber = 3,
  };
  // uint32 antenna_phase1 = 1;
  void clear_antenna_phase1();
  ::PROTOBUF_NAMESPACE_ID::uint32 antenna_phase1() const;
  void set_antenna_phase1(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_antenna_phase1() const;
  void _internal_set_antenna_phase1(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 antenna_phase2 = 2;
  void clear_antenna_phase2();
  ::PROTOBUF_NAMESPACE_ID::uint32 antenna_phase2() const;
  void set_antenna_phase2(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_antenna_phase2() const;
  void _internal_set_antenna_phase2(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 phase_duration = 3;
  void clear_phase_duration();
  ::PROTOBUF_NAMESPACE_ID::uint32 phase_duration() const;
  void set_phase_duration(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_phase_duration() const;
  void _internal_set_phase_duration(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:LabNetProt.Client.RfidBoardSetPhaseMatrix)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 antenna_phase1_;
  ::PROTOBUF_NAMESPACE_ID::uint32 antenna_phase2_;
  ::PROTOBUF_NAMESPACE_ID::uint32 phase_duration_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LabNetClient_2eproto;
};
// -------------------------------------------------------------------

class UartInit PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LabNetProt.Client.UartInit) */ {
 public:
  inline UartInit() : UartInit(nullptr) {};
  virtual ~UartInit();

  UartInit(const UartInit& from);
  UartInit(UartInit&& from) noexcept
    : UartInit() {
    *this = ::std::move(from);
  }

  inline UartInit& operator=(const UartInit& from) {
    CopyFrom(from);
    return *this;
  }
  inline UartInit& operator=(UartInit&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UartInit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UartInit* internal_default_instance() {
    return reinterpret_cast<const UartInit*>(
               &_UartInit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(UartInit& a, UartInit& b) {
    a.Swap(&b);
  }
  inline void Swap(UartInit* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UartInit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UartInit* New() const final {
    return CreateMaybeMessage<UartInit>(nullptr);
  }

  UartInit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UartInit>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UartInit& from);
  void MergeFrom(const UartInit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UartInit* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LabNetProt.Client.UartInit";
  }
  protected:
  explicit UartInit(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LabNetClient_2eproto);
    return ::descriptor_table_LabNetClient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPortFieldNumber = 1,
    kBaudFieldNumber = 2,
  };
  // .LabNetProt.Uarts port = 1;
  void clear_port();
  ::LabNetProt::Uarts port() const;
  void set_port(::LabNetProt::Uarts value);
  private:
  ::LabNetProt::Uarts _internal_port() const;
  void _internal_set_port(::LabNetProt::Uarts value);
  public:

  // uint32 baud = 2;
  void clear_baud();
  ::PROTOBUF_NAMESPACE_ID::uint32 baud() const;
  void set_baud(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_baud() const;
  void _internal_set_baud(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:LabNetProt.Client.UartInit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int port_;
  ::PROTOBUF_NAMESPACE_ID::uint32 baud_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LabNetClient_2eproto;
};
// -------------------------------------------------------------------

class UartWriteData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LabNetProt.Client.UartWriteData) */ {
 public:
  inline UartWriteData() : UartWriteData(nullptr) {};
  virtual ~UartWriteData();

  UartWriteData(const UartWriteData& from);
  UartWriteData(UartWriteData&& from) noexcept
    : UartWriteData() {
    *this = ::std::move(from);
  }

  inline UartWriteData& operator=(const UartWriteData& from) {
    CopyFrom(from);
    return *this;
  }
  inline UartWriteData& operator=(UartWriteData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UartWriteData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UartWriteData* internal_default_instance() {
    return reinterpret_cast<const UartWriteData*>(
               &_UartWriteData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(UartWriteData& a, UartWriteData& b) {
    a.Swap(&b);
  }
  inline void Swap(UartWriteData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UartWriteData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UartWriteData* New() const final {
    return CreateMaybeMessage<UartWriteData>(nullptr);
  }

  UartWriteData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UartWriteData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UartWriteData& from);
  void MergeFrom(const UartWriteData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UartWriteData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LabNetProt.Client.UartWriteData";
  }
  protected:
  explicit UartWriteData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LabNetClient_2eproto);
    return ::descriptor_table_LabNetClient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kPortFieldNumber = 1,
  };
  // bytes data = 2;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_data();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_data(
      std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // .LabNetProt.Uarts port = 1;
  void clear_port();
  ::LabNetProt::Uarts port() const;
  void set_port(::LabNetProt::Uarts value);
  private:
  ::LabNetProt::Uarts _internal_port() const;
  void _internal_set_port(::LabNetProt::Uarts value);
  public:

  // @@protoc_insertion_point(class_scope:LabNetProt.Client.UartWriteData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  int port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LabNetClient_2eproto;
};
// -------------------------------------------------------------------

class UartInitDigitalIn PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LabNetProt.Client.UartInitDigitalIn) */ {
 public:
  inline UartInitDigitalIn() : UartInitDigitalIn(nullptr) {};
  virtual ~UartInitDigitalIn();

  UartInitDigitalIn(const UartInitDigitalIn& from);
  UartInitDigitalIn(UartInitDigitalIn&& from) noexcept
    : UartInitDigitalIn() {
    *this = ::std::move(from);
  }

  inline UartInitDigitalIn& operator=(const UartInitDigitalIn& from) {
    CopyFrom(from);
    return *this;
  }
  inline UartInitDigitalIn& operator=(UartInitDigitalIn&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UartInitDigitalIn& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UartInitDigitalIn* internal_default_instance() {
    return reinterpret_cast<const UartInitDigitalIn*>(
               &_UartInitDigitalIn_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(UartInitDigitalIn& a, UartInitDigitalIn& b) {
    a.Swap(&b);
  }
  inline void Swap(UartInitDigitalIn* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UartInitDigitalIn* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UartInitDigitalIn* New() const final {
    return CreateMaybeMessage<UartInitDigitalIn>(nullptr);
  }

  UartInitDigitalIn* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UartInitDigitalIn>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UartInitDigitalIn& from);
  void MergeFrom(const UartInitDigitalIn& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UartInitDigitalIn* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LabNetProt.Client.UartInitDigitalIn";
  }
  protected:
  explicit UartInitDigitalIn(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LabNetClient_2eproto);
    return ::descriptor_table_LabNetClient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPortFieldNumber = 1,
    kPinFieldNumber = 2,
    kIsInvertedFieldNumber = 3,
  };
  // .LabNetProt.Uarts port = 1;
  void clear_port();
  ::LabNetProt::Uarts port() const;
  void set_port(::LabNetProt::Uarts value);
  private:
  ::LabNetProt::Uarts _internal_port() const;
  void _internal_set_port(::LabNetProt::Uarts value);
  public:

  // uint32 pin = 2;
  void clear_pin();
  ::PROTOBUF_NAMESPACE_ID::uint32 pin() const;
  void set_pin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pin() const;
  void _internal_set_pin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool is_inverted = 3;
  void clear_is_inverted();
  bool is_inverted() const;
  void set_is_inverted(bool value);
  private:
  bool _internal_is_inverted() const;
  void _internal_set_is_inverted(bool value);
  public:

  // @@protoc_insertion_point(class_scope:LabNetProt.Client.UartInitDigitalIn)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int port_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pin_;
  bool is_inverted_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LabNetClient_2eproto;
};
// -------------------------------------------------------------------

class UartInitDigitalOut PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LabNetProt.Client.UartInitDigitalOut) */ {
 public:
  inline UartInitDigitalOut() : UartInitDigitalOut(nullptr) {};
  virtual ~UartInitDigitalOut();

  UartInitDigitalOut(const UartInitDigitalOut& from);
  UartInitDigitalOut(UartInitDigitalOut&& from) noexcept
    : UartInitDigitalOut() {
    *this = ::std::move(from);
  }

  inline UartInitDigitalOut& operator=(const UartInitDigitalOut& from) {
    CopyFrom(from);
    return *this;
  }
  inline UartInitDigitalOut& operator=(UartInitDigitalOut&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UartInitDigitalOut& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UartInitDigitalOut* internal_default_instance() {
    return reinterpret_cast<const UartInitDigitalOut*>(
               &_UartInitDigitalOut_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(UartInitDigitalOut& a, UartInitDigitalOut& b) {
    a.Swap(&b);
  }
  inline void Swap(UartInitDigitalOut* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UartInitDigitalOut* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UartInitDigitalOut* New() const final {
    return CreateMaybeMessage<UartInitDigitalOut>(nullptr);
  }

  UartInitDigitalOut* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UartInitDigitalOut>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UartInitDigitalOut& from);
  void MergeFrom(const UartInitDigitalOut& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UartInitDigitalOut* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LabNetProt.Client.UartInitDigitalOut";
  }
  protected:
  explicit UartInitDigitalOut(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LabNetClient_2eproto);
    return ::descriptor_table_LabNetClient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPortFieldNumber = 1,
    kPinFieldNumber = 2,
    kIsInvertedFieldNumber = 3,
  };
  // .LabNetProt.Uarts port = 1;
  void clear_port();
  ::LabNetProt::Uarts port() const;
  void set_port(::LabNetProt::Uarts value);
  private:
  ::LabNetProt::Uarts _internal_port() const;
  void _internal_set_port(::LabNetProt::Uarts value);
  public:

  // uint32 pin = 2;
  void clear_pin();
  ::PROTOBUF_NAMESPACE_ID::uint32 pin() const;
  void set_pin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pin() const;
  void _internal_set_pin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool is_inverted = 3;
  void clear_is_inverted();
  bool is_inverted() const;
  void set_is_inverted(bool value);
  private:
  bool _internal_is_inverted() const;
  void _internal_set_is_inverted(bool value);
  public:

  // @@protoc_insertion_point(class_scope:LabNetProt.Client.UartInitDigitalOut)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int port_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pin_;
  bool is_inverted_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LabNetClient_2eproto;
};
// -------------------------------------------------------------------

class GpioWiringPiInit PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LabNetProt.Client.GpioWiringPiInit) */ {
 public:
  inline GpioWiringPiInit() : GpioWiringPiInit(nullptr) {};
  virtual ~GpioWiringPiInit();

  GpioWiringPiInit(const GpioWiringPiInit& from);
  GpioWiringPiInit(GpioWiringPiInit&& from) noexcept
    : GpioWiringPiInit() {
    *this = ::std::move(from);
  }

  inline GpioWiringPiInit& operator=(const GpioWiringPiInit& from) {
    CopyFrom(from);
    return *this;
  }
  inline GpioWiringPiInit& operator=(GpioWiringPiInit&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GpioWiringPiInit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GpioWiringPiInit* internal_default_instance() {
    return reinterpret_cast<const GpioWiringPiInit*>(
               &_GpioWiringPiInit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(GpioWiringPiInit& a, GpioWiringPiInit& b) {
    a.Swap(&b);
  }
  inline void Swap(GpioWiringPiInit* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GpioWiringPiInit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GpioWiringPiInit* New() const final {
    return CreateMaybeMessage<GpioWiringPiInit>(nullptr);
  }

  GpioWiringPiInit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GpioWiringPiInit>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GpioWiringPiInit& from);
  void MergeFrom(const GpioWiringPiInit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GpioWiringPiInit* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LabNetProt.Client.GpioWiringPiInit";
  }
  protected:
  explicit GpioWiringPiInit(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LabNetClient_2eproto);
    return ::descriptor_table_LabNetClient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:LabNetProt.Client.GpioWiringPiInit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LabNetClient_2eproto;
};
// -------------------------------------------------------------------

class GpioWiringPiInitDigitalIn PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LabNetProt.Client.GpioWiringPiInitDigitalIn) */ {
 public:
  inline GpioWiringPiInitDigitalIn() : GpioWiringPiInitDigitalIn(nullptr) {};
  virtual ~GpioWiringPiInitDigitalIn();

  GpioWiringPiInitDigitalIn(const GpioWiringPiInitDigitalIn& from);
  GpioWiringPiInitDigitalIn(GpioWiringPiInitDigitalIn&& from) noexcept
    : GpioWiringPiInitDigitalIn() {
    *this = ::std::move(from);
  }

  inline GpioWiringPiInitDigitalIn& operator=(const GpioWiringPiInitDigitalIn& from) {
    CopyFrom(from);
    return *this;
  }
  inline GpioWiringPiInitDigitalIn& operator=(GpioWiringPiInitDigitalIn&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GpioWiringPiInitDigitalIn& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GpioWiringPiInitDigitalIn* internal_default_instance() {
    return reinterpret_cast<const GpioWiringPiInitDigitalIn*>(
               &_GpioWiringPiInitDigitalIn_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(GpioWiringPiInitDigitalIn& a, GpioWiringPiInitDigitalIn& b) {
    a.Swap(&b);
  }
  inline void Swap(GpioWiringPiInitDigitalIn* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GpioWiringPiInitDigitalIn* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GpioWiringPiInitDigitalIn* New() const final {
    return CreateMaybeMessage<GpioWiringPiInitDigitalIn>(nullptr);
  }

  GpioWiringPiInitDigitalIn* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GpioWiringPiInitDigitalIn>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GpioWiringPiInitDigitalIn& from);
  void MergeFrom(const GpioWiringPiInitDigitalIn& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GpioWiringPiInitDigitalIn* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LabNetProt.Client.GpioWiringPiInitDigitalIn";
  }
  protected:
  explicit GpioWiringPiInitDigitalIn(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LabNetClient_2eproto);
    return ::descriptor_table_LabNetClient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef GpioWiringPiInitDigitalIn_Resistor Resistor;
  static constexpr Resistor OFF =
    GpioWiringPiInitDigitalIn_Resistor_OFF;
  static constexpr Resistor PULL_DOWN =
    GpioWiringPiInitDigitalIn_Resistor_PULL_DOWN;
  static constexpr Resistor PULL_UP =
    GpioWiringPiInitDigitalIn_Resistor_PULL_UP;
  static inline bool Resistor_IsValid(int value) {
    return GpioWiringPiInitDigitalIn_Resistor_IsValid(value);
  }
  static constexpr Resistor Resistor_MIN =
    GpioWiringPiInitDigitalIn_Resistor_Resistor_MIN;
  static constexpr Resistor Resistor_MAX =
    GpioWiringPiInitDigitalIn_Resistor_Resistor_MAX;
  static constexpr int Resistor_ARRAYSIZE =
    GpioWiringPiInitDigitalIn_Resistor_Resistor_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Resistor_descriptor() {
    return GpioWiringPiInitDigitalIn_Resistor_descriptor();
  }
  template<typename T>
  static inline const std::string& Resistor_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Resistor>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Resistor_Name.");
    return GpioWiringPiInitDigitalIn_Resistor_Name(enum_t_value);
  }
  static inline bool Resistor_Parse(const std::string& name,
      Resistor* value) {
    return GpioWiringPiInitDigitalIn_Resistor_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPinFieldNumber = 1,
    kResistorStateFieldNumber = 2,
    kIsInvertedFieldNumber = 3,
  };
  // uint32 pin = 1;
  void clear_pin();
  ::PROTOBUF_NAMESPACE_ID::uint32 pin() const;
  void set_pin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pin() const;
  void _internal_set_pin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .LabNetProt.Client.GpioWiringPiInitDigitalIn.Resistor resistor_state = 2;
  void clear_resistor_state();
  ::LabNetProt::Client::GpioWiringPiInitDigitalIn_Resistor resistor_state() const;
  void set_resistor_state(::LabNetProt::Client::GpioWiringPiInitDigitalIn_Resistor value);
  private:
  ::LabNetProt::Client::GpioWiringPiInitDigitalIn_Resistor _internal_resistor_state() const;
  void _internal_set_resistor_state(::LabNetProt::Client::GpioWiringPiInitDigitalIn_Resistor value);
  public:

  // bool is_inverted = 3;
  void clear_is_inverted();
  bool is_inverted() const;
  void set_is_inverted(bool value);
  private:
  bool _internal_is_inverted() const;
  void _internal_set_is_inverted(bool value);
  public:

  // @@protoc_insertion_point(class_scope:LabNetProt.Client.GpioWiringPiInitDigitalIn)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pin_;
  int resistor_state_;
  bool is_inverted_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LabNetClient_2eproto;
};
// -------------------------------------------------------------------

class GpioWiringPiInitDigitalOut PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LabNetProt.Client.GpioWiringPiInitDigitalOut) */ {
 public:
  inline GpioWiringPiInitDigitalOut() : GpioWiringPiInitDigitalOut(nullptr) {};
  virtual ~GpioWiringPiInitDigitalOut();

  GpioWiringPiInitDigitalOut(const GpioWiringPiInitDigitalOut& from);
  GpioWiringPiInitDigitalOut(GpioWiringPiInitDigitalOut&& from) noexcept
    : GpioWiringPiInitDigitalOut() {
    *this = ::std::move(from);
  }

  inline GpioWiringPiInitDigitalOut& operator=(const GpioWiringPiInitDigitalOut& from) {
    CopyFrom(from);
    return *this;
  }
  inline GpioWiringPiInitDigitalOut& operator=(GpioWiringPiInitDigitalOut&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GpioWiringPiInitDigitalOut& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GpioWiringPiInitDigitalOut* internal_default_instance() {
    return reinterpret_cast<const GpioWiringPiInitDigitalOut*>(
               &_GpioWiringPiInitDigitalOut_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(GpioWiringPiInitDigitalOut& a, GpioWiringPiInitDigitalOut& b) {
    a.Swap(&b);
  }
  inline void Swap(GpioWiringPiInitDigitalOut* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GpioWiringPiInitDigitalOut* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GpioWiringPiInitDigitalOut* New() const final {
    return CreateMaybeMessage<GpioWiringPiInitDigitalOut>(nullptr);
  }

  GpioWiringPiInitDigitalOut* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GpioWiringPiInitDigitalOut>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GpioWiringPiInitDigitalOut& from);
  void MergeFrom(const GpioWiringPiInitDigitalOut& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GpioWiringPiInitDigitalOut* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LabNetProt.Client.GpioWiringPiInitDigitalOut";
  }
  protected:
  explicit GpioWiringPiInitDigitalOut(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LabNetClient_2eproto);
    return ::descriptor_table_LabNetClient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPinFieldNumber = 1,
    kIsInvertedFieldNumber = 2,
  };
  // uint32 pin = 1;
  void clear_pin();
  ::PROTOBUF_NAMESPACE_ID::uint32 pin() const;
  void set_pin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pin() const;
  void _internal_set_pin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool is_inverted = 2;
  void clear_is_inverted();
  bool is_inverted() const;
  void set_is_inverted(bool value);
  private:
  bool _internal_is_inverted() const;
  void _internal_set_is_inverted(bool value);
  public:

  // @@protoc_insertion_point(class_scope:LabNetProt.Client.GpioWiringPiInitDigitalOut)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pin_;
  bool is_inverted_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LabNetClient_2eproto;
};
// -------------------------------------------------------------------

class DigitalOutSet PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LabNetProt.Client.DigitalOutSet) */ {
 public:
  inline DigitalOutSet() : DigitalOutSet(nullptr) {};
  virtual ~DigitalOutSet();

  DigitalOutSet(const DigitalOutSet& from);
  DigitalOutSet(DigitalOutSet&& from) noexcept
    : DigitalOutSet() {
    *this = ::std::move(from);
  }

  inline DigitalOutSet& operator=(const DigitalOutSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline DigitalOutSet& operator=(DigitalOutSet&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DigitalOutSet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DigitalOutSet* internal_default_instance() {
    return reinterpret_cast<const DigitalOutSet*>(
               &_DigitalOutSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(DigitalOutSet& a, DigitalOutSet& b) {
    a.Swap(&b);
  }
  inline void Swap(DigitalOutSet* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DigitalOutSet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DigitalOutSet* New() const final {
    return CreateMaybeMessage<DigitalOutSet>(nullptr);
  }

  DigitalOutSet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DigitalOutSet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DigitalOutSet& from);
  void MergeFrom(const DigitalOutSet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DigitalOutSet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LabNetProt.Client.DigitalOutSet";
  }
  protected:
  explicit DigitalOutSet(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LabNetClient_2eproto);
    return ::descriptor_table_LabNetClient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kStateFieldNumber = 2,
  };
  // .LabNetProt.PinId id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::LabNetProt::PinId& id() const;
  ::LabNetProt::PinId* release_id();
  ::LabNetProt::PinId* mutable_id();
  void set_allocated_id(::LabNetProt::PinId* id);
  private:
  const ::LabNetProt::PinId& _internal_id() const;
  ::LabNetProt::PinId* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::LabNetProt::PinId* id);
  ::LabNetProt::PinId* unsafe_arena_release_id();

  // bool state = 2;
  void clear_state();
  bool state() const;
  void set_state(bool value);
  private:
  bool _internal_state() const;
  void _internal_set_state(bool value);
  public:

  // @@protoc_insertion_point(class_scope:LabNetProt.Client.DigitalOutSet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::LabNetProt::PinId* id_;
  bool state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LabNetClient_2eproto;
};
// -------------------------------------------------------------------

class DigitalOutPulse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LabNetProt.Client.DigitalOutPulse) */ {
 public:
  inline DigitalOutPulse() : DigitalOutPulse(nullptr) {};
  virtual ~DigitalOutPulse();

  DigitalOutPulse(const DigitalOutPulse& from);
  DigitalOutPulse(DigitalOutPulse&& from) noexcept
    : DigitalOutPulse() {
    *this = ::std::move(from);
  }

  inline DigitalOutPulse& operator=(const DigitalOutPulse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DigitalOutPulse& operator=(DigitalOutPulse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DigitalOutPulse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DigitalOutPulse* internal_default_instance() {
    return reinterpret_cast<const DigitalOutPulse*>(
               &_DigitalOutPulse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(DigitalOutPulse& a, DigitalOutPulse& b) {
    a.Swap(&b);
  }
  inline void Swap(DigitalOutPulse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DigitalOutPulse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DigitalOutPulse* New() const final {
    return CreateMaybeMessage<DigitalOutPulse>(nullptr);
  }

  DigitalOutPulse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DigitalOutPulse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DigitalOutPulse& from);
  void MergeFrom(const DigitalOutPulse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DigitalOutPulse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LabNetProt.Client.DigitalOutPulse";
  }
  protected:
  explicit DigitalOutPulse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LabNetClient_2eproto);
    return ::descriptor_table_LabNetClient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kHighDurationFieldNumber = 2,
    kLowDurationFieldNumber = 3,
    kPulsesFieldNumber = 4,
  };
  // .LabNetProt.PinId id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::LabNetProt::PinId& id() const;
  ::LabNetProt::PinId* release_id();
  ::LabNetProt::PinId* mutable_id();
  void set_allocated_id(::LabNetProt::PinId* id);
  private:
  const ::LabNetProt::PinId& _internal_id() const;
  ::LabNetProt::PinId* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::LabNetProt::PinId* id);
  ::LabNetProt::PinId* unsafe_arena_release_id();

  // uint32 high_duration = 2;
  void clear_high_duration();
  ::PROTOBUF_NAMESPACE_ID::uint32 high_duration() const;
  void set_high_duration(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_high_duration() const;
  void _internal_set_high_duration(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 low_duration = 3;
  void clear_low_duration();
  ::PROTOBUF_NAMESPACE_ID::uint32 low_duration() const;
  void set_low_duration(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_low_duration() const;
  void _internal_set_low_duration(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 pulses = 4;
  void clear_pulses();
  ::PROTOBUF_NAMESPACE_ID::uint32 pulses() const;
  void set_pulses(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pulses() const;
  void _internal_set_pulses(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:LabNetProt.Client.DigitalOutPulse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::LabNetProt::PinId* id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 high_duration_;
  ::PROTOBUF_NAMESPACE_ID::uint32 low_duration_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pulses_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LabNetClient_2eproto;
};
// -------------------------------------------------------------------

class StartDigitalOutLoop_DigitalOutputParameter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LabNetProt.Client.StartDigitalOutLoop.DigitalOutputParameter) */ {
 public:
  inline StartDigitalOutLoop_DigitalOutputParameter() : StartDigitalOutLoop_DigitalOutputParameter(nullptr) {};
  virtual ~StartDigitalOutLoop_DigitalOutputParameter();

  StartDigitalOutLoop_DigitalOutputParameter(const StartDigitalOutLoop_DigitalOutputParameter& from);
  StartDigitalOutLoop_DigitalOutputParameter(StartDigitalOutLoop_DigitalOutputParameter&& from) noexcept
    : StartDigitalOutLoop_DigitalOutputParameter() {
    *this = ::std::move(from);
  }

  inline StartDigitalOutLoop_DigitalOutputParameter& operator=(const StartDigitalOutLoop_DigitalOutputParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartDigitalOutLoop_DigitalOutputParameter& operator=(StartDigitalOutLoop_DigitalOutputParameter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StartDigitalOutLoop_DigitalOutputParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StartDigitalOutLoop_DigitalOutputParameter* internal_default_instance() {
    return reinterpret_cast<const StartDigitalOutLoop_DigitalOutputParameter*>(
               &_StartDigitalOutLoop_DigitalOutputParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(StartDigitalOutLoop_DigitalOutputParameter& a, StartDigitalOutLoop_DigitalOutputParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(StartDigitalOutLoop_DigitalOutputParameter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartDigitalOutLoop_DigitalOutputParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StartDigitalOutLoop_DigitalOutputParameter* New() const final {
    return CreateMaybeMessage<StartDigitalOutLoop_DigitalOutputParameter>(nullptr);
  }

  StartDigitalOutLoop_DigitalOutputParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StartDigitalOutLoop_DigitalOutputParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StartDigitalOutLoop_DigitalOutputParameter& from);
  void MergeFrom(const StartDigitalOutLoop_DigitalOutputParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartDigitalOutLoop_DigitalOutputParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LabNetProt.Client.StartDigitalOutLoop.DigitalOutputParameter";
  }
  protected:
  explicit StartDigitalOutLoop_DigitalOutputParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LabNetClient_2eproto);
    return ::descriptor_table_LabNetClient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kOffsetFieldNumber = 2,
    kDurationFieldNumber = 3,
  };
  // .LabNetProt.PinId id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::LabNetProt::PinId& id() const;
  ::LabNetProt::PinId* release_id();
  ::LabNetProt::PinId* mutable_id();
  void set_allocated_id(::LabNetProt::PinId* id);
  private:
  const ::LabNetProt::PinId& _internal_id() const;
  ::LabNetProt::PinId* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::LabNetProt::PinId* id);
  ::LabNetProt::PinId* unsafe_arena_release_id();

  // uint32 offset = 2;
  void clear_offset();
  ::PROTOBUF_NAMESPACE_ID::uint32 offset() const;
  void set_offset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_offset() const;
  void _internal_set_offset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 duration = 3;
  void clear_duration();
  ::PROTOBUF_NAMESPACE_ID::uint32 duration() const;
  void set_duration(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_duration() const;
  void _internal_set_duration(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:LabNetProt.Client.StartDigitalOutLoop.DigitalOutputParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::LabNetProt::PinId* id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 offset_;
  ::PROTOBUF_NAMESPACE_ID::uint32 duration_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LabNetClient_2eproto;
};
// -------------------------------------------------------------------

class StartDigitalOutLoop PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LabNetProt.Client.StartDigitalOutLoop) */ {
 public:
  inline StartDigitalOutLoop() : StartDigitalOutLoop(nullptr) {};
  virtual ~StartDigitalOutLoop();

  StartDigitalOutLoop(const StartDigitalOutLoop& from);
  StartDigitalOutLoop(StartDigitalOutLoop&& from) noexcept
    : StartDigitalOutLoop() {
    *this = ::std::move(from);
  }

  inline StartDigitalOutLoop& operator=(const StartDigitalOutLoop& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartDigitalOutLoop& operator=(StartDigitalOutLoop&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StartDigitalOutLoop& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StartDigitalOutLoop* internal_default_instance() {
    return reinterpret_cast<const StartDigitalOutLoop*>(
               &_StartDigitalOutLoop_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(StartDigitalOutLoop& a, StartDigitalOutLoop& b) {
    a.Swap(&b);
  }
  inline void Swap(StartDigitalOutLoop* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartDigitalOutLoop* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StartDigitalOutLoop* New() const final {
    return CreateMaybeMessage<StartDigitalOutLoop>(nullptr);
  }

  StartDigitalOutLoop* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StartDigitalOutLoop>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StartDigitalOutLoop& from);
  void MergeFrom(const StartDigitalOutLoop& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartDigitalOutLoop* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LabNetProt.Client.StartDigitalOutLoop";
  }
  protected:
  explicit StartDigitalOutLoop(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LabNetClient_2eproto);
    return ::descriptor_table_LabNetClient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef StartDigitalOutLoop_DigitalOutputParameter DigitalOutputParameter;

  // accessors -------------------------------------------------------

  enum : int {
    kDigitalOutputsFieldNumber = 3,
    kLoopNameFieldNumber = 1,
    kLoopPauseFieldNumber = 2,
  };
  // repeated .LabNetProt.Client.StartDigitalOutLoop.DigitalOutputParameter digital_outputs = 3;
  int digital_outputs_size() const;
  private:
  int _internal_digital_outputs_size() const;
  public:
  void clear_digital_outputs();
  ::LabNetProt::Client::StartDigitalOutLoop_DigitalOutputParameter* mutable_digital_outputs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LabNetProt::Client::StartDigitalOutLoop_DigitalOutputParameter >*
      mutable_digital_outputs();
  private:
  const ::LabNetProt::Client::StartDigitalOutLoop_DigitalOutputParameter& _internal_digital_outputs(int index) const;
  ::LabNetProt::Client::StartDigitalOutLoop_DigitalOutputParameter* _internal_add_digital_outputs();
  public:
  const ::LabNetProt::Client::StartDigitalOutLoop_DigitalOutputParameter& digital_outputs(int index) const;
  ::LabNetProt::Client::StartDigitalOutLoop_DigitalOutputParameter* add_digital_outputs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LabNetProt::Client::StartDigitalOutLoop_DigitalOutputParameter >&
      digital_outputs() const;

  // string loop_name = 1;
  void clear_loop_name();
  const std::string& loop_name() const;
  void set_loop_name(const std::string& value);
  void set_loop_name(std::string&& value);
  void set_loop_name(const char* value);
  void set_loop_name(const char* value, size_t size);
  std::string* mutable_loop_name();
  std::string* release_loop_name();
  void set_allocated_loop_name(std::string* loop_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_loop_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_loop_name(
      std::string* loop_name);
  private:
  const std::string& _internal_loop_name() const;
  void _internal_set_loop_name(const std::string& value);
  std::string* _internal_mutable_loop_name();
  public:

  // uint32 loop_pause = 2;
  void clear_loop_pause();
  ::PROTOBUF_NAMESPACE_ID::uint32 loop_pause() const;
  void set_loop_pause(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_loop_pause() const;
  void _internal_set_loop_pause(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:LabNetProt.Client.StartDigitalOutLoop)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LabNetProt::Client::StartDigitalOutLoop_DigitalOutputParameter > digital_outputs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr loop_name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 loop_pause_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LabNetClient_2eproto;
};
// -------------------------------------------------------------------

class StopDigitalOutLoop PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LabNetProt.Client.StopDigitalOutLoop) */ {
 public:
  inline StopDigitalOutLoop() : StopDigitalOutLoop(nullptr) {};
  virtual ~StopDigitalOutLoop();

  StopDigitalOutLoop(const StopDigitalOutLoop& from);
  StopDigitalOutLoop(StopDigitalOutLoop&& from) noexcept
    : StopDigitalOutLoop() {
    *this = ::std::move(from);
  }

  inline StopDigitalOutLoop& operator=(const StopDigitalOutLoop& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopDigitalOutLoop& operator=(StopDigitalOutLoop&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StopDigitalOutLoop& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StopDigitalOutLoop* internal_default_instance() {
    return reinterpret_cast<const StopDigitalOutLoop*>(
               &_StopDigitalOutLoop_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(StopDigitalOutLoop& a, StopDigitalOutLoop& b) {
    a.Swap(&b);
  }
  inline void Swap(StopDigitalOutLoop* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopDigitalOutLoop* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StopDigitalOutLoop* New() const final {
    return CreateMaybeMessage<StopDigitalOutLoop>(nullptr);
  }

  StopDigitalOutLoop* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StopDigitalOutLoop>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StopDigitalOutLoop& from);
  void MergeFrom(const StopDigitalOutLoop& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopDigitalOutLoop* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LabNetProt.Client.StopDigitalOutLoop";
  }
  protected:
  explicit StopDigitalOutLoop(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LabNetClient_2eproto);
    return ::descriptor_table_LabNetClient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLoopNameFieldNumber = 1,
  };
  // string loop_name = 1;
  void clear_loop_name();
  const std::string& loop_name() const;
  void set_loop_name(const std::string& value);
  void set_loop_name(std::string&& value);
  void set_loop_name(const char* value);
  void set_loop_name(const char* value, size_t size);
  std::string* mutable_loop_name();
  std::string* release_loop_name();
  void set_allocated_loop_name(std::string* loop_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_loop_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_loop_name(
      std::string* loop_name);
  private:
  const std::string& _internal_loop_name() const;
  void _internal_set_loop_name(const std::string& value);
  std::string* _internal_mutable_loop_name();
  public:

  // @@protoc_insertion_point(class_scope:LabNetProt.Client.StopDigitalOutLoop)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr loop_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LabNetClient_2eproto;
};
// -------------------------------------------------------------------

class LabNetResetRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LabNetProt.Client.LabNetResetRequest) */ {
 public:
  inline LabNetResetRequest() : LabNetResetRequest(nullptr) {};
  virtual ~LabNetResetRequest();

  LabNetResetRequest(const LabNetResetRequest& from);
  LabNetResetRequest(LabNetResetRequest&& from) noexcept
    : LabNetResetRequest() {
    *this = ::std::move(from);
  }

  inline LabNetResetRequest& operator=(const LabNetResetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LabNetResetRequest& operator=(LabNetResetRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LabNetResetRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LabNetResetRequest* internal_default_instance() {
    return reinterpret_cast<const LabNetResetRequest*>(
               &_LabNetResetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(LabNetResetRequest& a, LabNetResetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LabNetResetRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LabNetResetRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LabNetResetRequest* New() const final {
    return CreateMaybeMessage<LabNetResetRequest>(nullptr);
  }

  LabNetResetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LabNetResetRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LabNetResetRequest& from);
  void MergeFrom(const LabNetResetRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LabNetResetRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LabNetProt.Client.LabNetResetRequest";
  }
  protected:
  explicit LabNetResetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LabNetClient_2eproto);
    return ::descriptor_table_LabNetClient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:LabNetProt.Client.LabNetResetRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LabNetClient_2eproto;
};
// -------------------------------------------------------------------

class LabNetIdRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LabNetProt.Client.LabNetIdRequest) */ {
 public:
  inline LabNetIdRequest() : LabNetIdRequest(nullptr) {};
  virtual ~LabNetIdRequest();

  LabNetIdRequest(const LabNetIdRequest& from);
  LabNetIdRequest(LabNetIdRequest&& from) noexcept
    : LabNetIdRequest() {
    *this = ::std::move(from);
  }

  inline LabNetIdRequest& operator=(const LabNetIdRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LabNetIdRequest& operator=(LabNetIdRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LabNetIdRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LabNetIdRequest* internal_default_instance() {
    return reinterpret_cast<const LabNetIdRequest*>(
               &_LabNetIdRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(LabNetIdRequest& a, LabNetIdRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LabNetIdRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LabNetIdRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LabNetIdRequest* New() const final {
    return CreateMaybeMessage<LabNetIdRequest>(nullptr);
  }

  LabNetIdRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LabNetIdRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LabNetIdRequest& from);
  void MergeFrom(const LabNetIdRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LabNetIdRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LabNetProt.Client.LabNetIdRequest";
  }
  protected:
  explicit LabNetIdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LabNetClient_2eproto);
    return ::descriptor_table_LabNetClient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:LabNetProt.Client.LabNetIdRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LabNetClient_2eproto;
};
// -------------------------------------------------------------------

class InitSound PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LabNetProt.Client.InitSound) */ {
 public:
  inline InitSound() : InitSound(nullptr) {};
  virtual ~InitSound();

  InitSound(const InitSound& from);
  InitSound(InitSound&& from) noexcept
    : InitSound() {
    *this = ::std::move(from);
  }

  inline InitSound& operator=(const InitSound& from) {
    CopyFrom(from);
    return *this;
  }
  inline InitSound& operator=(InitSound&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InitSound& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InitSound* internal_default_instance() {
    return reinterpret_cast<const InitSound*>(
               &_InitSound_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(InitSound& a, InitSound& b) {
    a.Swap(&b);
  }
  inline void Swap(InitSound* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InitSound* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InitSound* New() const final {
    return CreateMaybeMessage<InitSound>(nullptr);
  }

  InitSound* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InitSound>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InitSound& from);
  void MergeFrom(const InitSound& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InitSound* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LabNetProt.Client.InitSound";
  }
  protected:
  explicit InitSound(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LabNetClient_2eproto);
    return ::descriptor_table_LabNetClient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:LabNetProt.Client.InitSound)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LabNetClient_2eproto;
};
// -------------------------------------------------------------------

class InitSoundSignal PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LabNetProt.Client.InitSoundSignal) */ {
 public:
  inline InitSoundSignal() : InitSoundSignal(nullptr) {};
  virtual ~InitSoundSignal();

  InitSoundSignal(const InitSoundSignal& from);
  InitSoundSignal(InitSoundSignal&& from) noexcept
    : InitSoundSignal() {
    *this = ::std::move(from);
  }

  inline InitSoundSignal& operator=(const InitSoundSignal& from) {
    CopyFrom(from);
    return *this;
  }
  inline InitSoundSignal& operator=(InitSoundSignal&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InitSoundSignal& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InitSoundSignal* internal_default_instance() {
    return reinterpret_cast<const InitSoundSignal*>(
               &_InitSoundSignal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(InitSoundSignal& a, InitSoundSignal& b) {
    a.Swap(&b);
  }
  inline void Swap(InitSoundSignal* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InitSoundSignal* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InitSoundSignal* New() const final {
    return CreateMaybeMessage<InitSoundSignal>(nullptr);
  }

  InitSoundSignal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InitSoundSignal>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InitSoundSignal& from);
  void MergeFrom(const InitSoundSignal& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InitSoundSignal* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LabNetProt.Client.InitSoundSignal";
  }
  protected:
  explicit InitSoundSignal(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LabNetClient_2eproto);
    return ::descriptor_table_LabNetClient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignalTypeFieldNumber = 1,
    kIdFieldNumber = 2,
    kFrequencyFieldNumber = 3,
    kFrequencyEndFieldNumber = 4,
    kSweepLengthSecondsFieldNumber = 5,
    kVolumeFieldNumber = 6,
  };
  // .LabNetProt.Client.SoundSignalType signal_type = 1;
  void clear_signal_type();
  ::LabNetProt::Client::SoundSignalType signal_type() const;
  void set_signal_type(::LabNetProt::Client::SoundSignalType value);
  private:
  ::LabNetProt::Client::SoundSignalType _internal_signal_type() const;
  void _internal_set_signal_type(::LabNetProt::Client::SoundSignalType value);
  public:

  // uint32 id = 2;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 frequency = 3;
  void clear_frequency();
  ::PROTOBUF_NAMESPACE_ID::uint32 frequency() const;
  void set_frequency(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_frequency() const;
  void _internal_set_frequency(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 frequency_end = 4;
  void clear_frequency_end();
  ::PROTOBUF_NAMESPACE_ID::uint32 frequency_end() const;
  void set_frequency_end(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_frequency_end() const;
  void _internal_set_frequency_end(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float sweep_length_seconds = 5;
  void clear_sweep_length_seconds();
  float sweep_length_seconds() const;
  void set_sweep_length_seconds(float value);
  private:
  float _internal_sweep_length_seconds() const;
  void _internal_set_sweep_length_seconds(float value);
  public:

  // float volume = 6;
  void clear_volume();
  float volume() const;
  void set_volume(float value);
  private:
  float _internal_volume() const;
  void _internal_set_volume(float value);
  public:

  // @@protoc_insertion_point(class_scope:LabNetProt.Client.InitSoundSignal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int signal_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 frequency_;
  ::PROTOBUF_NAMESPACE_ID::uint32 frequency_end_;
  float sweep_length_seconds_;
  float volume_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LabNetClient_2eproto;
};
// -------------------------------------------------------------------

class ChiBioInit PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LabNetProt.Client.ChiBioInit) */ {
 public:
  inline ChiBioInit() : ChiBioInit(nullptr) {};
  virtual ~ChiBioInit();

  ChiBioInit(const ChiBioInit& from);
  ChiBioInit(ChiBioInit&& from) noexcept
    : ChiBioInit() {
    *this = ::std::move(from);
  }

  inline ChiBioInit& operator=(const ChiBioInit& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChiBioInit& operator=(ChiBioInit&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChiBioInit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChiBioInit* internal_default_instance() {
    return reinterpret_cast<const ChiBioInit*>(
               &_ChiBioInit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(ChiBioInit& a, ChiBioInit& b) {
    a.Swap(&b);
  }
  inline void Swap(ChiBioInit* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChiBioInit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChiBioInit* New() const final {
    return CreateMaybeMessage<ChiBioInit>(nullptr);
  }

  ChiBioInit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChiBioInit>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChiBioInit& from);
  void MergeFrom(const ChiBioInit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChiBioInit* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LabNetProt.Client.ChiBioInit";
  }
  protected:
  explicit ChiBioInit(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LabNetClient_2eproto);
    return ::descriptor_table_LabNetClient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:LabNetProt.Client.ChiBioInit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LabNetClient_2eproto;
};
// -------------------------------------------------------------------

class MoveChiBioPump PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LabNetProt.Client.MoveChiBioPump) */ {
 public:
  inline MoveChiBioPump() : MoveChiBioPump(nullptr) {};
  virtual ~MoveChiBioPump();

  MoveChiBioPump(const MoveChiBioPump& from);
  MoveChiBioPump(MoveChiBioPump&& from) noexcept
    : MoveChiBioPump() {
    *this = ::std::move(from);
  }

  inline MoveChiBioPump& operator=(const MoveChiBioPump& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveChiBioPump& operator=(MoveChiBioPump&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MoveChiBioPump& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MoveChiBioPump* internal_default_instance() {
    return reinterpret_cast<const MoveChiBioPump*>(
               &_MoveChiBioPump_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(MoveChiBioPump& a, MoveChiBioPump& b) {
    a.Swap(&b);
  }
  inline void Swap(MoveChiBioPump* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MoveChiBioPump* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MoveChiBioPump* New() const final {
    return CreateMaybeMessage<MoveChiBioPump>(nullptr);
  }

  MoveChiBioPump* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MoveChiBioPump>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MoveChiBioPump& from);
  void MergeFrom(const MoveChiBioPump& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveChiBioPump* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LabNetProt.Client.MoveChiBioPump";
  }
  protected:
  explicit MoveChiBioPump(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LabNetClient_2eproto);
    return ::descriptor_table_LabNetClient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPumpIdFieldNumber = 1,
    kMoveFieldNumber = 2,
  };
  // uint32 pump_id = 1;
  void clear_pump_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 pump_id() const;
  void set_pump_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pump_id() const;
  void _internal_set_pump_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 move = 2;
  void clear_move();
  ::PROTOBUF_NAMESPACE_ID::int32 move() const;
  void set_move(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_move() const;
  void _internal_set_move(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:LabNetProt.Client.MoveChiBioPump)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pump_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 move_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LabNetClient_2eproto;
};
// -------------------------------------------------------------------

class BleUartInit PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LabNetProt.Client.BleUartInit) */ {
 public:
  inline BleUartInit() : BleUartInit(nullptr) {};
  virtual ~BleUartInit();

  BleUartInit(const BleUartInit& from);
  BleUartInit(BleUartInit&& from) noexcept
    : BleUartInit() {
    *this = ::std::move(from);
  }

  inline BleUartInit& operator=(const BleUartInit& from) {
    CopyFrom(from);
    return *this;
  }
  inline BleUartInit& operator=(BleUartInit&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BleUartInit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BleUartInit* internal_default_instance() {
    return reinterpret_cast<const BleUartInit*>(
               &_BleUartInit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(BleUartInit& a, BleUartInit& b) {
    a.Swap(&b);
  }
  inline void Swap(BleUartInit* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BleUartInit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BleUartInit* New() const final {
    return CreateMaybeMessage<BleUartInit>(nullptr);
  }

  BleUartInit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BleUartInit>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BleUartInit& from);
  void MergeFrom(const BleUartInit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BleUartInit* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LabNetProt.Client.BleUartInit";
  }
  protected:
  explicit BleUartInit(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LabNetClient_2eproto);
    return ::descriptor_table_LabNetClient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceFieldNumber = 1,
  };
  // string device = 1;
  void clear_device();
  const std::string& device() const;
  void set_device(const std::string& value);
  void set_device(std::string&& value);
  void set_device(const char* value);
  void set_device(const char* value, size_t size);
  std::string* mutable_device();
  std::string* release_device();
  void set_allocated_device(std::string* device);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_device();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_device(
      std::string* device);
  private:
  const std::string& _internal_device() const;
  void _internal_set_device(const std::string& value);
  std::string* _internal_mutable_device();
  public:

  // @@protoc_insertion_point(class_scope:LabNetProt.Client.BleUartInit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LabNetClient_2eproto;
};
// -------------------------------------------------------------------

class UartBoardInit PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LabNetProt.Client.UartBoardInit) */ {
 public:
  inline UartBoardInit() : UartBoardInit(nullptr) {};
  virtual ~UartBoardInit();

  UartBoardInit(const UartBoardInit& from);
  UartBoardInit(UartBoardInit&& from) noexcept
    : UartBoardInit() {
    *this = ::std::move(from);
  }

  inline UartBoardInit& operator=(const UartBoardInit& from) {
    CopyFrom(from);
    return *this;
  }
  inline UartBoardInit& operator=(UartBoardInit&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UartBoardInit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UartBoardInit* internal_default_instance() {
    return reinterpret_cast<const UartBoardInit*>(
               &_UartBoardInit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(UartBoardInit& a, UartBoardInit& b) {
    a.Swap(&b);
  }
  inline void Swap(UartBoardInit* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UartBoardInit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UartBoardInit* New() const final {
    return CreateMaybeMessage<UartBoardInit>(nullptr);
  }

  UartBoardInit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UartBoardInit>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UartBoardInit& from);
  void MergeFrom(const UartBoardInit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UartBoardInit* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LabNetProt.Client.UartBoardInit";
  }
  protected:
  explicit UartBoardInit(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LabNetClient_2eproto);
    return ::descriptor_table_LabNetClient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaudFieldNumber = 1,
    kIsInvertedFieldNumber = 2,
  };
  // uint32 baud = 1;
  void clear_baud();
  ::PROTOBUF_NAMESPACE_ID::uint32 baud() const;
  void set_baud(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_baud() const;
  void _internal_set_baud(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool is_inverted = 2;
  void clear_is_inverted();
  bool is_inverted() const;
  void set_is_inverted(bool value);
  private:
  bool _internal_is_inverted() const;
  void _internal_set_is_inverted(bool value);
  public:

  // @@protoc_insertion_point(class_scope:LabNetProt.Client.UartBoardInit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 baud_;
  bool is_inverted_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LabNetClient_2eproto;
};
// -------------------------------------------------------------------

class UartBoardWriteData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LabNetProt.Client.UartBoardWriteData) */ {
 public:
  inline UartBoardWriteData() : UartBoardWriteData(nullptr) {};
  virtual ~UartBoardWriteData();

  UartBoardWriteData(const UartBoardWriteData& from);
  UartBoardWriteData(UartBoardWriteData&& from) noexcept
    : UartBoardWriteData() {
    *this = ::std::move(from);
  }

  inline UartBoardWriteData& operator=(const UartBoardWriteData& from) {
    CopyFrom(from);
    return *this;
  }
  inline UartBoardWriteData& operator=(UartBoardWriteData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UartBoardWriteData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UartBoardWriteData* internal_default_instance() {
    return reinterpret_cast<const UartBoardWriteData*>(
               &_UartBoardWriteData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(UartBoardWriteData& a, UartBoardWriteData& b) {
    a.Swap(&b);
  }
  inline void Swap(UartBoardWriteData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UartBoardWriteData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UartBoardWriteData* New() const final {
    return CreateMaybeMessage<UartBoardWriteData>(nullptr);
  }

  UartBoardWriteData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UartBoardWriteData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UartBoardWriteData& from);
  void MergeFrom(const UartBoardWriteData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UartBoardWriteData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LabNetProt.Client.UartBoardWriteData";
  }
  protected:
  explicit UartBoardWriteData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LabNetClient_2eproto);
    return ::descriptor_table_LabNetClient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kPortFieldNumber = 1,
  };
  // bytes data = 2;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_data();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_data(
      std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // uint32 port = 1;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:LabNetProt.Client.UartBoardWriteData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::uint32 port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LabNetClient_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// IoBoardInit

// -------------------------------------------------------------------

// IoBoardInitDigitalIn

// uint32 pin = 1;
inline void IoBoardInitDigitalIn::clear_pin() {
  pin_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IoBoardInitDigitalIn::_internal_pin() const {
  return pin_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IoBoardInitDigitalIn::pin() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Client.IoBoardInitDigitalIn.pin)
  return _internal_pin();
}
inline void IoBoardInitDigitalIn::_internal_set_pin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  pin_ = value;
}
inline void IoBoardInitDigitalIn::set_pin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pin(value);
  // @@protoc_insertion_point(field_set:LabNetProt.Client.IoBoardInitDigitalIn.pin)
}

// .LabNetProt.Client.IoBoardInitDigitalIn.Resistor resistor_state = 2;
inline void IoBoardInitDigitalIn::clear_resistor_state() {
  resistor_state_ = 0;
}
inline ::LabNetProt::Client::IoBoardInitDigitalIn_Resistor IoBoardInitDigitalIn::_internal_resistor_state() const {
  return static_cast< ::LabNetProt::Client::IoBoardInitDigitalIn_Resistor >(resistor_state_);
}
inline ::LabNetProt::Client::IoBoardInitDigitalIn_Resistor IoBoardInitDigitalIn::resistor_state() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Client.IoBoardInitDigitalIn.resistor_state)
  return _internal_resistor_state();
}
inline void IoBoardInitDigitalIn::_internal_set_resistor_state(::LabNetProt::Client::IoBoardInitDigitalIn_Resistor value) {
  
  resistor_state_ = value;
}
inline void IoBoardInitDigitalIn::set_resistor_state(::LabNetProt::Client::IoBoardInitDigitalIn_Resistor value) {
  _internal_set_resistor_state(value);
  // @@protoc_insertion_point(field_set:LabNetProt.Client.IoBoardInitDigitalIn.resistor_state)
}

// bool is_inverted = 3;
inline void IoBoardInitDigitalIn::clear_is_inverted() {
  is_inverted_ = false;
}
inline bool IoBoardInitDigitalIn::_internal_is_inverted() const {
  return is_inverted_;
}
inline bool IoBoardInitDigitalIn::is_inverted() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Client.IoBoardInitDigitalIn.is_inverted)
  return _internal_is_inverted();
}
inline void IoBoardInitDigitalIn::_internal_set_is_inverted(bool value) {
  
  is_inverted_ = value;
}
inline void IoBoardInitDigitalIn::set_is_inverted(bool value) {
  _internal_set_is_inverted(value);
  // @@protoc_insertion_point(field_set:LabNetProt.Client.IoBoardInitDigitalIn.is_inverted)
}

// -------------------------------------------------------------------

// IoBoardInitDigitalOut

// uint32 pin = 1;
inline void IoBoardInitDigitalOut::clear_pin() {
  pin_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IoBoardInitDigitalOut::_internal_pin() const {
  return pin_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IoBoardInitDigitalOut::pin() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Client.IoBoardInitDigitalOut.pin)
  return _internal_pin();
}
inline void IoBoardInitDigitalOut::_internal_set_pin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  pin_ = value;
}
inline void IoBoardInitDigitalOut::set_pin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pin(value);
  // @@protoc_insertion_point(field_set:LabNetProt.Client.IoBoardInitDigitalOut.pin)
}

// bool is_inverted = 2;
inline void IoBoardInitDigitalOut::clear_is_inverted() {
  is_inverted_ = false;
}
inline bool IoBoardInitDigitalOut::_internal_is_inverted() const {
  return is_inverted_;
}
inline bool IoBoardInitDigitalOut::is_inverted() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Client.IoBoardInitDigitalOut.is_inverted)
  return _internal_is_inverted();
}
inline void IoBoardInitDigitalOut::_internal_set_is_inverted(bool value) {
  
  is_inverted_ = value;
}
inline void IoBoardInitDigitalOut::set_is_inverted(bool value) {
  _internal_set_is_inverted(value);
  // @@protoc_insertion_point(field_set:LabNetProt.Client.IoBoardInitDigitalOut.is_inverted)
}

// -------------------------------------------------------------------

// RfidBoardInit

// uint32 antenna_phase1 = 1;
inline void RfidBoardInit::clear_antenna_phase1() {
  antenna_phase1_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RfidBoardInit::_internal_antenna_phase1() const {
  return antenna_phase1_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RfidBoardInit::antenna_phase1() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Client.RfidBoardInit.antenna_phase1)
  return _internal_antenna_phase1();
}
inline void RfidBoardInit::_internal_set_antenna_phase1(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  antenna_phase1_ = value;
}
inline void RfidBoardInit::set_antenna_phase1(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_antenna_phase1(value);
  // @@protoc_insertion_point(field_set:LabNetProt.Client.RfidBoardInit.antenna_phase1)
}

// uint32 antenna_phase2 = 2;
inline void RfidBoardInit::clear_antenna_phase2() {
  antenna_phase2_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RfidBoardInit::_internal_antenna_phase2() const {
  return antenna_phase2_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RfidBoardInit::antenna_phase2() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Client.RfidBoardInit.antenna_phase2)
  return _internal_antenna_phase2();
}
inline void RfidBoardInit::_internal_set_antenna_phase2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  antenna_phase2_ = value;
}
inline void RfidBoardInit::set_antenna_phase2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_antenna_phase2(value);
  // @@protoc_insertion_point(field_set:LabNetProt.Client.RfidBoardInit.antenna_phase2)
}

// uint32 phase_duration = 3;
inline void RfidBoardInit::clear_phase_duration() {
  phase_duration_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RfidBoardInit::_internal_phase_duration() const {
  return phase_duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RfidBoardInit::phase_duration() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Client.RfidBoardInit.phase_duration)
  return _internal_phase_duration();
}
inline void RfidBoardInit::_internal_set_phase_duration(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  phase_duration_ = value;
}
inline void RfidBoardInit::set_phase_duration(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_phase_duration(value);
  // @@protoc_insertion_point(field_set:LabNetProt.Client.RfidBoardInit.phase_duration)
}

// bool inverted = 4;
inline void RfidBoardInit::clear_inverted() {
  inverted_ = false;
}
inline bool RfidBoardInit::_internal_inverted() const {
  return inverted_;
}
inline bool RfidBoardInit::inverted() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Client.RfidBoardInit.inverted)
  return _internal_inverted();
}
inline void RfidBoardInit::_internal_set_inverted(bool value) {
  
  inverted_ = value;
}
inline void RfidBoardInit::set_inverted(bool value) {
  _internal_set_inverted(value);
  // @@protoc_insertion_point(field_set:LabNetProt.Client.RfidBoardInit.inverted)
}

// -------------------------------------------------------------------

// RfidBoardSetPhaseMatrix

// uint32 antenna_phase1 = 1;
inline void RfidBoardSetPhaseMatrix::clear_antenna_phase1() {
  antenna_phase1_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RfidBoardSetPhaseMatrix::_internal_antenna_phase1() const {
  return antenna_phase1_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RfidBoardSetPhaseMatrix::antenna_phase1() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Client.RfidBoardSetPhaseMatrix.antenna_phase1)
  return _internal_antenna_phase1();
}
inline void RfidBoardSetPhaseMatrix::_internal_set_antenna_phase1(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  antenna_phase1_ = value;
}
inline void RfidBoardSetPhaseMatrix::set_antenna_phase1(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_antenna_phase1(value);
  // @@protoc_insertion_point(field_set:LabNetProt.Client.RfidBoardSetPhaseMatrix.antenna_phase1)
}

// uint32 antenna_phase2 = 2;
inline void RfidBoardSetPhaseMatrix::clear_antenna_phase2() {
  antenna_phase2_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RfidBoardSetPhaseMatrix::_internal_antenna_phase2() const {
  return antenna_phase2_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RfidBoardSetPhaseMatrix::antenna_phase2() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Client.RfidBoardSetPhaseMatrix.antenna_phase2)
  return _internal_antenna_phase2();
}
inline void RfidBoardSetPhaseMatrix::_internal_set_antenna_phase2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  antenna_phase2_ = value;
}
inline void RfidBoardSetPhaseMatrix::set_antenna_phase2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_antenna_phase2(value);
  // @@protoc_insertion_point(field_set:LabNetProt.Client.RfidBoardSetPhaseMatrix.antenna_phase2)
}

// uint32 phase_duration = 3;
inline void RfidBoardSetPhaseMatrix::clear_phase_duration() {
  phase_duration_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RfidBoardSetPhaseMatrix::_internal_phase_duration() const {
  return phase_duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RfidBoardSetPhaseMatrix::phase_duration() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Client.RfidBoardSetPhaseMatrix.phase_duration)
  return _internal_phase_duration();
}
inline void RfidBoardSetPhaseMatrix::_internal_set_phase_duration(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  phase_duration_ = value;
}
inline void RfidBoardSetPhaseMatrix::set_phase_duration(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_phase_duration(value);
  // @@protoc_insertion_point(field_set:LabNetProt.Client.RfidBoardSetPhaseMatrix.phase_duration)
}

// -------------------------------------------------------------------

// UartInit

// .LabNetProt.Uarts port = 1;
inline void UartInit::clear_port() {
  port_ = 0;
}
inline ::LabNetProt::Uarts UartInit::_internal_port() const {
  return static_cast< ::LabNetProt::Uarts >(port_);
}
inline ::LabNetProt::Uarts UartInit::port() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Client.UartInit.port)
  return _internal_port();
}
inline void UartInit::_internal_set_port(::LabNetProt::Uarts value) {
  
  port_ = value;
}
inline void UartInit::set_port(::LabNetProt::Uarts value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:LabNetProt.Client.UartInit.port)
}

// uint32 baud = 2;
inline void UartInit::clear_baud() {
  baud_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UartInit::_internal_baud() const {
  return baud_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UartInit::baud() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Client.UartInit.baud)
  return _internal_baud();
}
inline void UartInit::_internal_set_baud(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  baud_ = value;
}
inline void UartInit::set_baud(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_baud(value);
  // @@protoc_insertion_point(field_set:LabNetProt.Client.UartInit.baud)
}

// -------------------------------------------------------------------

// UartWriteData

// .LabNetProt.Uarts port = 1;
inline void UartWriteData::clear_port() {
  port_ = 0;
}
inline ::LabNetProt::Uarts UartWriteData::_internal_port() const {
  return static_cast< ::LabNetProt::Uarts >(port_);
}
inline ::LabNetProt::Uarts UartWriteData::port() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Client.UartWriteData.port)
  return _internal_port();
}
inline void UartWriteData::_internal_set_port(::LabNetProt::Uarts value) {
  
  port_ = value;
}
inline void UartWriteData::set_port(::LabNetProt::Uarts value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:LabNetProt.Client.UartWriteData.port)
}

// bytes data = 2;
inline void UartWriteData::clear_data() {
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UartWriteData::data() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Client.UartWriteData.data)
  return _internal_data();
}
inline void UartWriteData::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:LabNetProt.Client.UartWriteData.data)
}
inline std::string* UartWriteData::mutable_data() {
  // @@protoc_insertion_point(field_mutable:LabNetProt.Client.UartWriteData.data)
  return _internal_mutable_data();
}
inline const std::string& UartWriteData::_internal_data() const {
  return data_.Get();
}
inline void UartWriteData::_internal_set_data(const std::string& value) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UartWriteData::set_data(std::string&& value) {
  
  data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:LabNetProt.Client.UartWriteData.data)
}
inline void UartWriteData::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:LabNetProt.Client.UartWriteData.data)
}
inline void UartWriteData::set_data(const void* value,
    size_t size) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:LabNetProt.Client.UartWriteData.data)
}
inline std::string* UartWriteData::_internal_mutable_data() {
  
  return data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UartWriteData::release_data() {
  // @@protoc_insertion_point(field_release:LabNetProt.Client.UartWriteData.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UartWriteData::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:LabNetProt.Client.UartWriteData.data)
}
inline std::string* UartWriteData::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:LabNetProt.Client.UartWriteData.data)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return data_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UartWriteData::unsafe_arena_set_allocated_data(
    std::string* data) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (data != nullptr) {
    
  } else {
    
  }
  data_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      data, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LabNetProt.Client.UartWriteData.data)
}

// -------------------------------------------------------------------

// UartInitDigitalIn

// .LabNetProt.Uarts port = 1;
inline void UartInitDigitalIn::clear_port() {
  port_ = 0;
}
inline ::LabNetProt::Uarts UartInitDigitalIn::_internal_port() const {
  return static_cast< ::LabNetProt::Uarts >(port_);
}
inline ::LabNetProt::Uarts UartInitDigitalIn::port() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Client.UartInitDigitalIn.port)
  return _internal_port();
}
inline void UartInitDigitalIn::_internal_set_port(::LabNetProt::Uarts value) {
  
  port_ = value;
}
inline void UartInitDigitalIn::set_port(::LabNetProt::Uarts value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:LabNetProt.Client.UartInitDigitalIn.port)
}

// uint32 pin = 2;
inline void UartInitDigitalIn::clear_pin() {
  pin_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UartInitDigitalIn::_internal_pin() const {
  return pin_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UartInitDigitalIn::pin() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Client.UartInitDigitalIn.pin)
  return _internal_pin();
}
inline void UartInitDigitalIn::_internal_set_pin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  pin_ = value;
}
inline void UartInitDigitalIn::set_pin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pin(value);
  // @@protoc_insertion_point(field_set:LabNetProt.Client.UartInitDigitalIn.pin)
}

// bool is_inverted = 3;
inline void UartInitDigitalIn::clear_is_inverted() {
  is_inverted_ = false;
}
inline bool UartInitDigitalIn::_internal_is_inverted() const {
  return is_inverted_;
}
inline bool UartInitDigitalIn::is_inverted() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Client.UartInitDigitalIn.is_inverted)
  return _internal_is_inverted();
}
inline void UartInitDigitalIn::_internal_set_is_inverted(bool value) {
  
  is_inverted_ = value;
}
inline void UartInitDigitalIn::set_is_inverted(bool value) {
  _internal_set_is_inverted(value);
  // @@protoc_insertion_point(field_set:LabNetProt.Client.UartInitDigitalIn.is_inverted)
}

// -------------------------------------------------------------------

// UartInitDigitalOut

// .LabNetProt.Uarts port = 1;
inline void UartInitDigitalOut::clear_port() {
  port_ = 0;
}
inline ::LabNetProt::Uarts UartInitDigitalOut::_internal_port() const {
  return static_cast< ::LabNetProt::Uarts >(port_);
}
inline ::LabNetProt::Uarts UartInitDigitalOut::port() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Client.UartInitDigitalOut.port)
  return _internal_port();
}
inline void UartInitDigitalOut::_internal_set_port(::LabNetProt::Uarts value) {
  
  port_ = value;
}
inline void UartInitDigitalOut::set_port(::LabNetProt::Uarts value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:LabNetProt.Client.UartInitDigitalOut.port)
}

// uint32 pin = 2;
inline void UartInitDigitalOut::clear_pin() {
  pin_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UartInitDigitalOut::_internal_pin() const {
  return pin_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UartInitDigitalOut::pin() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Client.UartInitDigitalOut.pin)
  return _internal_pin();
}
inline void UartInitDigitalOut::_internal_set_pin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  pin_ = value;
}
inline void UartInitDigitalOut::set_pin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pin(value);
  // @@protoc_insertion_point(field_set:LabNetProt.Client.UartInitDigitalOut.pin)
}

// bool is_inverted = 3;
inline void UartInitDigitalOut::clear_is_inverted() {
  is_inverted_ = false;
}
inline bool UartInitDigitalOut::_internal_is_inverted() const {
  return is_inverted_;
}
inline bool UartInitDigitalOut::is_inverted() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Client.UartInitDigitalOut.is_inverted)
  return _internal_is_inverted();
}
inline void UartInitDigitalOut::_internal_set_is_inverted(bool value) {
  
  is_inverted_ = value;
}
inline void UartInitDigitalOut::set_is_inverted(bool value) {
  _internal_set_is_inverted(value);
  // @@protoc_insertion_point(field_set:LabNetProt.Client.UartInitDigitalOut.is_inverted)
}

// -------------------------------------------------------------------

// GpioWiringPiInit

// -------------------------------------------------------------------

// GpioWiringPiInitDigitalIn

// uint32 pin = 1;
inline void GpioWiringPiInitDigitalIn::clear_pin() {
  pin_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GpioWiringPiInitDigitalIn::_internal_pin() const {
  return pin_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GpioWiringPiInitDigitalIn::pin() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Client.GpioWiringPiInitDigitalIn.pin)
  return _internal_pin();
}
inline void GpioWiringPiInitDigitalIn::_internal_set_pin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  pin_ = value;
}
inline void GpioWiringPiInitDigitalIn::set_pin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pin(value);
  // @@protoc_insertion_point(field_set:LabNetProt.Client.GpioWiringPiInitDigitalIn.pin)
}

// .LabNetProt.Client.GpioWiringPiInitDigitalIn.Resistor resistor_state = 2;
inline void GpioWiringPiInitDigitalIn::clear_resistor_state() {
  resistor_state_ = 0;
}
inline ::LabNetProt::Client::GpioWiringPiInitDigitalIn_Resistor GpioWiringPiInitDigitalIn::_internal_resistor_state() const {
  return static_cast< ::LabNetProt::Client::GpioWiringPiInitDigitalIn_Resistor >(resistor_state_);
}
inline ::LabNetProt::Client::GpioWiringPiInitDigitalIn_Resistor GpioWiringPiInitDigitalIn::resistor_state() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Client.GpioWiringPiInitDigitalIn.resistor_state)
  return _internal_resistor_state();
}
inline void GpioWiringPiInitDigitalIn::_internal_set_resistor_state(::LabNetProt::Client::GpioWiringPiInitDigitalIn_Resistor value) {
  
  resistor_state_ = value;
}
inline void GpioWiringPiInitDigitalIn::set_resistor_state(::LabNetProt::Client::GpioWiringPiInitDigitalIn_Resistor value) {
  _internal_set_resistor_state(value);
  // @@protoc_insertion_point(field_set:LabNetProt.Client.GpioWiringPiInitDigitalIn.resistor_state)
}

// bool is_inverted = 3;
inline void GpioWiringPiInitDigitalIn::clear_is_inverted() {
  is_inverted_ = false;
}
inline bool GpioWiringPiInitDigitalIn::_internal_is_inverted() const {
  return is_inverted_;
}
inline bool GpioWiringPiInitDigitalIn::is_inverted() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Client.GpioWiringPiInitDigitalIn.is_inverted)
  return _internal_is_inverted();
}
inline void GpioWiringPiInitDigitalIn::_internal_set_is_inverted(bool value) {
  
  is_inverted_ = value;
}
inline void GpioWiringPiInitDigitalIn::set_is_inverted(bool value) {
  _internal_set_is_inverted(value);
  // @@protoc_insertion_point(field_set:LabNetProt.Client.GpioWiringPiInitDigitalIn.is_inverted)
}

// -------------------------------------------------------------------

// GpioWiringPiInitDigitalOut

// uint32 pin = 1;
inline void GpioWiringPiInitDigitalOut::clear_pin() {
  pin_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GpioWiringPiInitDigitalOut::_internal_pin() const {
  return pin_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GpioWiringPiInitDigitalOut::pin() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Client.GpioWiringPiInitDigitalOut.pin)
  return _internal_pin();
}
inline void GpioWiringPiInitDigitalOut::_internal_set_pin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  pin_ = value;
}
inline void GpioWiringPiInitDigitalOut::set_pin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pin(value);
  // @@protoc_insertion_point(field_set:LabNetProt.Client.GpioWiringPiInitDigitalOut.pin)
}

// bool is_inverted = 2;
inline void GpioWiringPiInitDigitalOut::clear_is_inverted() {
  is_inverted_ = false;
}
inline bool GpioWiringPiInitDigitalOut::_internal_is_inverted() const {
  return is_inverted_;
}
inline bool GpioWiringPiInitDigitalOut::is_inverted() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Client.GpioWiringPiInitDigitalOut.is_inverted)
  return _internal_is_inverted();
}
inline void GpioWiringPiInitDigitalOut::_internal_set_is_inverted(bool value) {
  
  is_inverted_ = value;
}
inline void GpioWiringPiInitDigitalOut::set_is_inverted(bool value) {
  _internal_set_is_inverted(value);
  // @@protoc_insertion_point(field_set:LabNetProt.Client.GpioWiringPiInitDigitalOut.is_inverted)
}

// -------------------------------------------------------------------

// DigitalOutSet

// .LabNetProt.PinId id = 1;
inline bool DigitalOutSet::_internal_has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline bool DigitalOutSet::has_id() const {
  return _internal_has_id();
}
inline const ::LabNetProt::PinId& DigitalOutSet::_internal_id() const {
  const ::LabNetProt::PinId* p = id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::LabNetProt::PinId*>(
      &::LabNetProt::_PinId_default_instance_);
}
inline const ::LabNetProt::PinId& DigitalOutSet::id() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Client.DigitalOutSet.id)
  return _internal_id();
}
inline void DigitalOutSet::unsafe_arena_set_allocated_id(
    ::LabNetProt::PinId* id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LabNetProt.Client.DigitalOutSet.id)
}
inline ::LabNetProt::PinId* DigitalOutSet::release_id() {
  auto temp = unsafe_arena_release_id();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::LabNetProt::PinId* DigitalOutSet::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:LabNetProt.Client.DigitalOutSet.id)
  
  ::LabNetProt::PinId* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::LabNetProt::PinId* DigitalOutSet::_internal_mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::LabNetProt::PinId>(GetArena());
    id_ = p;
  }
  return id_;
}
inline ::LabNetProt::PinId* DigitalOutSet::mutable_id() {
  // @@protoc_insertion_point(field_mutable:LabNetProt.Client.DigitalOutSet.id)
  return _internal_mutable_id();
}
inline void DigitalOutSet::set_allocated_id(::LabNetProt::PinId* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id)->GetArena();
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:LabNetProt.Client.DigitalOutSet.id)
}

// bool state = 2;
inline void DigitalOutSet::clear_state() {
  state_ = false;
}
inline bool DigitalOutSet::_internal_state() const {
  return state_;
}
inline bool DigitalOutSet::state() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Client.DigitalOutSet.state)
  return _internal_state();
}
inline void DigitalOutSet::_internal_set_state(bool value) {
  
  state_ = value;
}
inline void DigitalOutSet::set_state(bool value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:LabNetProt.Client.DigitalOutSet.state)
}

// -------------------------------------------------------------------

// DigitalOutPulse

// .LabNetProt.PinId id = 1;
inline bool DigitalOutPulse::_internal_has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline bool DigitalOutPulse::has_id() const {
  return _internal_has_id();
}
inline const ::LabNetProt::PinId& DigitalOutPulse::_internal_id() const {
  const ::LabNetProt::PinId* p = id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::LabNetProt::PinId*>(
      &::LabNetProt::_PinId_default_instance_);
}
inline const ::LabNetProt::PinId& DigitalOutPulse::id() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Client.DigitalOutPulse.id)
  return _internal_id();
}
inline void DigitalOutPulse::unsafe_arena_set_allocated_id(
    ::LabNetProt::PinId* id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LabNetProt.Client.DigitalOutPulse.id)
}
inline ::LabNetProt::PinId* DigitalOutPulse::release_id() {
  auto temp = unsafe_arena_release_id();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::LabNetProt::PinId* DigitalOutPulse::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:LabNetProt.Client.DigitalOutPulse.id)
  
  ::LabNetProt::PinId* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::LabNetProt::PinId* DigitalOutPulse::_internal_mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::LabNetProt::PinId>(GetArena());
    id_ = p;
  }
  return id_;
}
inline ::LabNetProt::PinId* DigitalOutPulse::mutable_id() {
  // @@protoc_insertion_point(field_mutable:LabNetProt.Client.DigitalOutPulse.id)
  return _internal_mutable_id();
}
inline void DigitalOutPulse::set_allocated_id(::LabNetProt::PinId* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id)->GetArena();
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:LabNetProt.Client.DigitalOutPulse.id)
}

// uint32 high_duration = 2;
inline void DigitalOutPulse::clear_high_duration() {
  high_duration_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DigitalOutPulse::_internal_high_duration() const {
  return high_duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DigitalOutPulse::high_duration() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Client.DigitalOutPulse.high_duration)
  return _internal_high_duration();
}
inline void DigitalOutPulse::_internal_set_high_duration(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  high_duration_ = value;
}
inline void DigitalOutPulse::set_high_duration(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_high_duration(value);
  // @@protoc_insertion_point(field_set:LabNetProt.Client.DigitalOutPulse.high_duration)
}

// uint32 low_duration = 3;
inline void DigitalOutPulse::clear_low_duration() {
  low_duration_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DigitalOutPulse::_internal_low_duration() const {
  return low_duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DigitalOutPulse::low_duration() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Client.DigitalOutPulse.low_duration)
  return _internal_low_duration();
}
inline void DigitalOutPulse::_internal_set_low_duration(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  low_duration_ = value;
}
inline void DigitalOutPulse::set_low_duration(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_low_duration(value);
  // @@protoc_insertion_point(field_set:LabNetProt.Client.DigitalOutPulse.low_duration)
}

// uint32 pulses = 4;
inline void DigitalOutPulse::clear_pulses() {
  pulses_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DigitalOutPulse::_internal_pulses() const {
  return pulses_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DigitalOutPulse::pulses() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Client.DigitalOutPulse.pulses)
  return _internal_pulses();
}
inline void DigitalOutPulse::_internal_set_pulses(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  pulses_ = value;
}
inline void DigitalOutPulse::set_pulses(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pulses(value);
  // @@protoc_insertion_point(field_set:LabNetProt.Client.DigitalOutPulse.pulses)
}

// -------------------------------------------------------------------

// StartDigitalOutLoop_DigitalOutputParameter

// .LabNetProt.PinId id = 1;
inline bool StartDigitalOutLoop_DigitalOutputParameter::_internal_has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline bool StartDigitalOutLoop_DigitalOutputParameter::has_id() const {
  return _internal_has_id();
}
inline const ::LabNetProt::PinId& StartDigitalOutLoop_DigitalOutputParameter::_internal_id() const {
  const ::LabNetProt::PinId* p = id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::LabNetProt::PinId*>(
      &::LabNetProt::_PinId_default_instance_);
}
inline const ::LabNetProt::PinId& StartDigitalOutLoop_DigitalOutputParameter::id() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Client.StartDigitalOutLoop.DigitalOutputParameter.id)
  return _internal_id();
}
inline void StartDigitalOutLoop_DigitalOutputParameter::unsafe_arena_set_allocated_id(
    ::LabNetProt::PinId* id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LabNetProt.Client.StartDigitalOutLoop.DigitalOutputParameter.id)
}
inline ::LabNetProt::PinId* StartDigitalOutLoop_DigitalOutputParameter::release_id() {
  auto temp = unsafe_arena_release_id();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::LabNetProt::PinId* StartDigitalOutLoop_DigitalOutputParameter::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:LabNetProt.Client.StartDigitalOutLoop.DigitalOutputParameter.id)
  
  ::LabNetProt::PinId* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::LabNetProt::PinId* StartDigitalOutLoop_DigitalOutputParameter::_internal_mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::LabNetProt::PinId>(GetArena());
    id_ = p;
  }
  return id_;
}
inline ::LabNetProt::PinId* StartDigitalOutLoop_DigitalOutputParameter::mutable_id() {
  // @@protoc_insertion_point(field_mutable:LabNetProt.Client.StartDigitalOutLoop.DigitalOutputParameter.id)
  return _internal_mutable_id();
}
inline void StartDigitalOutLoop_DigitalOutputParameter::set_allocated_id(::LabNetProt::PinId* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id)->GetArena();
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:LabNetProt.Client.StartDigitalOutLoop.DigitalOutputParameter.id)
}

// uint32 offset = 2;
inline void StartDigitalOutLoop_DigitalOutputParameter::clear_offset() {
  offset_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StartDigitalOutLoop_DigitalOutputParameter::_internal_offset() const {
  return offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StartDigitalOutLoop_DigitalOutputParameter::offset() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Client.StartDigitalOutLoop.DigitalOutputParameter.offset)
  return _internal_offset();
}
inline void StartDigitalOutLoop_DigitalOutputParameter::_internal_set_offset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  offset_ = value;
}
inline void StartDigitalOutLoop_DigitalOutputParameter::set_offset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:LabNetProt.Client.StartDigitalOutLoop.DigitalOutputParameter.offset)
}

// uint32 duration = 3;
inline void StartDigitalOutLoop_DigitalOutputParameter::clear_duration() {
  duration_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StartDigitalOutLoop_DigitalOutputParameter::_internal_duration() const {
  return duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StartDigitalOutLoop_DigitalOutputParameter::duration() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Client.StartDigitalOutLoop.DigitalOutputParameter.duration)
  return _internal_duration();
}
inline void StartDigitalOutLoop_DigitalOutputParameter::_internal_set_duration(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  duration_ = value;
}
inline void StartDigitalOutLoop_DigitalOutputParameter::set_duration(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:LabNetProt.Client.StartDigitalOutLoop.DigitalOutputParameter.duration)
}

// -------------------------------------------------------------------

// StartDigitalOutLoop

// string loop_name = 1;
inline void StartDigitalOutLoop::clear_loop_name() {
  loop_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StartDigitalOutLoop::loop_name() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Client.StartDigitalOutLoop.loop_name)
  return _internal_loop_name();
}
inline void StartDigitalOutLoop::set_loop_name(const std::string& value) {
  _internal_set_loop_name(value);
  // @@protoc_insertion_point(field_set:LabNetProt.Client.StartDigitalOutLoop.loop_name)
}
inline std::string* StartDigitalOutLoop::mutable_loop_name() {
  // @@protoc_insertion_point(field_mutable:LabNetProt.Client.StartDigitalOutLoop.loop_name)
  return _internal_mutable_loop_name();
}
inline const std::string& StartDigitalOutLoop::_internal_loop_name() const {
  return loop_name_.Get();
}
inline void StartDigitalOutLoop::_internal_set_loop_name(const std::string& value) {
  
  loop_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StartDigitalOutLoop::set_loop_name(std::string&& value) {
  
  loop_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:LabNetProt.Client.StartDigitalOutLoop.loop_name)
}
inline void StartDigitalOutLoop::set_loop_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  loop_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:LabNetProt.Client.StartDigitalOutLoop.loop_name)
}
inline void StartDigitalOutLoop::set_loop_name(const char* value,
    size_t size) {
  
  loop_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:LabNetProt.Client.StartDigitalOutLoop.loop_name)
}
inline std::string* StartDigitalOutLoop::_internal_mutable_loop_name() {
  
  return loop_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StartDigitalOutLoop::release_loop_name() {
  // @@protoc_insertion_point(field_release:LabNetProt.Client.StartDigitalOutLoop.loop_name)
  return loop_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StartDigitalOutLoop::set_allocated_loop_name(std::string* loop_name) {
  if (loop_name != nullptr) {
    
  } else {
    
  }
  loop_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), loop_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:LabNetProt.Client.StartDigitalOutLoop.loop_name)
}
inline std::string* StartDigitalOutLoop::unsafe_arena_release_loop_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:LabNetProt.Client.StartDigitalOutLoop.loop_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return loop_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StartDigitalOutLoop::unsafe_arena_set_allocated_loop_name(
    std::string* loop_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (loop_name != nullptr) {
    
  } else {
    
  }
  loop_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      loop_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LabNetProt.Client.StartDigitalOutLoop.loop_name)
}

// uint32 loop_pause = 2;
inline void StartDigitalOutLoop::clear_loop_pause() {
  loop_pause_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StartDigitalOutLoop::_internal_loop_pause() const {
  return loop_pause_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StartDigitalOutLoop::loop_pause() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Client.StartDigitalOutLoop.loop_pause)
  return _internal_loop_pause();
}
inline void StartDigitalOutLoop::_internal_set_loop_pause(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  loop_pause_ = value;
}
inline void StartDigitalOutLoop::set_loop_pause(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_loop_pause(value);
  // @@protoc_insertion_point(field_set:LabNetProt.Client.StartDigitalOutLoop.loop_pause)
}

// repeated .LabNetProt.Client.StartDigitalOutLoop.DigitalOutputParameter digital_outputs = 3;
inline int StartDigitalOutLoop::_internal_digital_outputs_size() const {
  return digital_outputs_.size();
}
inline int StartDigitalOutLoop::digital_outputs_size() const {
  return _internal_digital_outputs_size();
}
inline void StartDigitalOutLoop::clear_digital_outputs() {
  digital_outputs_.Clear();
}
inline ::LabNetProt::Client::StartDigitalOutLoop_DigitalOutputParameter* StartDigitalOutLoop::mutable_digital_outputs(int index) {
  // @@protoc_insertion_point(field_mutable:LabNetProt.Client.StartDigitalOutLoop.digital_outputs)
  return digital_outputs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LabNetProt::Client::StartDigitalOutLoop_DigitalOutputParameter >*
StartDigitalOutLoop::mutable_digital_outputs() {
  // @@protoc_insertion_point(field_mutable_list:LabNetProt.Client.StartDigitalOutLoop.digital_outputs)
  return &digital_outputs_;
}
inline const ::LabNetProt::Client::StartDigitalOutLoop_DigitalOutputParameter& StartDigitalOutLoop::_internal_digital_outputs(int index) const {
  return digital_outputs_.Get(index);
}
inline const ::LabNetProt::Client::StartDigitalOutLoop_DigitalOutputParameter& StartDigitalOutLoop::digital_outputs(int index) const {
  // @@protoc_insertion_point(field_get:LabNetProt.Client.StartDigitalOutLoop.digital_outputs)
  return _internal_digital_outputs(index);
}
inline ::LabNetProt::Client::StartDigitalOutLoop_DigitalOutputParameter* StartDigitalOutLoop::_internal_add_digital_outputs() {
  return digital_outputs_.Add();
}
inline ::LabNetProt::Client::StartDigitalOutLoop_DigitalOutputParameter* StartDigitalOutLoop::add_digital_outputs() {
  // @@protoc_insertion_point(field_add:LabNetProt.Client.StartDigitalOutLoop.digital_outputs)
  return _internal_add_digital_outputs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LabNetProt::Client::StartDigitalOutLoop_DigitalOutputParameter >&
StartDigitalOutLoop::digital_outputs() const {
  // @@protoc_insertion_point(field_list:LabNetProt.Client.StartDigitalOutLoop.digital_outputs)
  return digital_outputs_;
}

// -------------------------------------------------------------------

// StopDigitalOutLoop

// string loop_name = 1;
inline void StopDigitalOutLoop::clear_loop_name() {
  loop_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StopDigitalOutLoop::loop_name() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Client.StopDigitalOutLoop.loop_name)
  return _internal_loop_name();
}
inline void StopDigitalOutLoop::set_loop_name(const std::string& value) {
  _internal_set_loop_name(value);
  // @@protoc_insertion_point(field_set:LabNetProt.Client.StopDigitalOutLoop.loop_name)
}
inline std::string* StopDigitalOutLoop::mutable_loop_name() {
  // @@protoc_insertion_point(field_mutable:LabNetProt.Client.StopDigitalOutLoop.loop_name)
  return _internal_mutable_loop_name();
}
inline const std::string& StopDigitalOutLoop::_internal_loop_name() const {
  return loop_name_.Get();
}
inline void StopDigitalOutLoop::_internal_set_loop_name(const std::string& value) {
  
  loop_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StopDigitalOutLoop::set_loop_name(std::string&& value) {
  
  loop_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:LabNetProt.Client.StopDigitalOutLoop.loop_name)
}
inline void StopDigitalOutLoop::set_loop_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  loop_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:LabNetProt.Client.StopDigitalOutLoop.loop_name)
}
inline void StopDigitalOutLoop::set_loop_name(const char* value,
    size_t size) {
  
  loop_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:LabNetProt.Client.StopDigitalOutLoop.loop_name)
}
inline std::string* StopDigitalOutLoop::_internal_mutable_loop_name() {
  
  return loop_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StopDigitalOutLoop::release_loop_name() {
  // @@protoc_insertion_point(field_release:LabNetProt.Client.StopDigitalOutLoop.loop_name)
  return loop_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StopDigitalOutLoop::set_allocated_loop_name(std::string* loop_name) {
  if (loop_name != nullptr) {
    
  } else {
    
  }
  loop_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), loop_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:LabNetProt.Client.StopDigitalOutLoop.loop_name)
}
inline std::string* StopDigitalOutLoop::unsafe_arena_release_loop_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:LabNetProt.Client.StopDigitalOutLoop.loop_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return loop_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StopDigitalOutLoop::unsafe_arena_set_allocated_loop_name(
    std::string* loop_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (loop_name != nullptr) {
    
  } else {
    
  }
  loop_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      loop_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LabNetProt.Client.StopDigitalOutLoop.loop_name)
}

// -------------------------------------------------------------------

// LabNetResetRequest

// -------------------------------------------------------------------

// LabNetIdRequest

// -------------------------------------------------------------------

// InitSound

// -------------------------------------------------------------------

// InitSoundSignal

// .LabNetProt.Client.SoundSignalType signal_type = 1;
inline void InitSoundSignal::clear_signal_type() {
  signal_type_ = 0;
}
inline ::LabNetProt::Client::SoundSignalType InitSoundSignal::_internal_signal_type() const {
  return static_cast< ::LabNetProt::Client::SoundSignalType >(signal_type_);
}
inline ::LabNetProt::Client::SoundSignalType InitSoundSignal::signal_type() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Client.InitSoundSignal.signal_type)
  return _internal_signal_type();
}
inline void InitSoundSignal::_internal_set_signal_type(::LabNetProt::Client::SoundSignalType value) {
  
  signal_type_ = value;
}
inline void InitSoundSignal::set_signal_type(::LabNetProt::Client::SoundSignalType value) {
  _internal_set_signal_type(value);
  // @@protoc_insertion_point(field_set:LabNetProt.Client.InitSoundSignal.signal_type)
}

// uint32 id = 2;
inline void InitSoundSignal::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InitSoundSignal::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InitSoundSignal::id() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Client.InitSoundSignal.id)
  return _internal_id();
}
inline void InitSoundSignal::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void InitSoundSignal::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:LabNetProt.Client.InitSoundSignal.id)
}

// uint32 frequency = 3;
inline void InitSoundSignal::clear_frequency() {
  frequency_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InitSoundSignal::_internal_frequency() const {
  return frequency_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InitSoundSignal::frequency() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Client.InitSoundSignal.frequency)
  return _internal_frequency();
}
inline void InitSoundSignal::_internal_set_frequency(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  frequency_ = value;
}
inline void InitSoundSignal::set_frequency(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_frequency(value);
  // @@protoc_insertion_point(field_set:LabNetProt.Client.InitSoundSignal.frequency)
}

// uint32 frequency_end = 4;
inline void InitSoundSignal::clear_frequency_end() {
  frequency_end_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InitSoundSignal::_internal_frequency_end() const {
  return frequency_end_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InitSoundSignal::frequency_end() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Client.InitSoundSignal.frequency_end)
  return _internal_frequency_end();
}
inline void InitSoundSignal::_internal_set_frequency_end(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  frequency_end_ = value;
}
inline void InitSoundSignal::set_frequency_end(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_frequency_end(value);
  // @@protoc_insertion_point(field_set:LabNetProt.Client.InitSoundSignal.frequency_end)
}

// float sweep_length_seconds = 5;
inline void InitSoundSignal::clear_sweep_length_seconds() {
  sweep_length_seconds_ = 0;
}
inline float InitSoundSignal::_internal_sweep_length_seconds() const {
  return sweep_length_seconds_;
}
inline float InitSoundSignal::sweep_length_seconds() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Client.InitSoundSignal.sweep_length_seconds)
  return _internal_sweep_length_seconds();
}
inline void InitSoundSignal::_internal_set_sweep_length_seconds(float value) {
  
  sweep_length_seconds_ = value;
}
inline void InitSoundSignal::set_sweep_length_seconds(float value) {
  _internal_set_sweep_length_seconds(value);
  // @@protoc_insertion_point(field_set:LabNetProt.Client.InitSoundSignal.sweep_length_seconds)
}

// float volume = 6;
inline void InitSoundSignal::clear_volume() {
  volume_ = 0;
}
inline float InitSoundSignal::_internal_volume() const {
  return volume_;
}
inline float InitSoundSignal::volume() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Client.InitSoundSignal.volume)
  return _internal_volume();
}
inline void InitSoundSignal::_internal_set_volume(float value) {
  
  volume_ = value;
}
inline void InitSoundSignal::set_volume(float value) {
  _internal_set_volume(value);
  // @@protoc_insertion_point(field_set:LabNetProt.Client.InitSoundSignal.volume)
}

// -------------------------------------------------------------------

// ChiBioInit

// -------------------------------------------------------------------

// MoveChiBioPump

// uint32 pump_id = 1;
inline void MoveChiBioPump::clear_pump_id() {
  pump_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MoveChiBioPump::_internal_pump_id() const {
  return pump_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MoveChiBioPump::pump_id() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Client.MoveChiBioPump.pump_id)
  return _internal_pump_id();
}
inline void MoveChiBioPump::_internal_set_pump_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  pump_id_ = value;
}
inline void MoveChiBioPump::set_pump_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pump_id(value);
  // @@protoc_insertion_point(field_set:LabNetProt.Client.MoveChiBioPump.pump_id)
}

// int32 move = 2;
inline void MoveChiBioPump::clear_move() {
  move_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MoveChiBioPump::_internal_move() const {
  return move_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MoveChiBioPump::move() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Client.MoveChiBioPump.move)
  return _internal_move();
}
inline void MoveChiBioPump::_internal_set_move(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  move_ = value;
}
inline void MoveChiBioPump::set_move(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_move(value);
  // @@protoc_insertion_point(field_set:LabNetProt.Client.MoveChiBioPump.move)
}

// -------------------------------------------------------------------

// BleUartInit

// string device = 1;
inline void BleUartInit::clear_device() {
  device_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BleUartInit::device() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Client.BleUartInit.device)
  return _internal_device();
}
inline void BleUartInit::set_device(const std::string& value) {
  _internal_set_device(value);
  // @@protoc_insertion_point(field_set:LabNetProt.Client.BleUartInit.device)
}
inline std::string* BleUartInit::mutable_device() {
  // @@protoc_insertion_point(field_mutable:LabNetProt.Client.BleUartInit.device)
  return _internal_mutable_device();
}
inline const std::string& BleUartInit::_internal_device() const {
  return device_.Get();
}
inline void BleUartInit::_internal_set_device(const std::string& value) {
  
  device_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BleUartInit::set_device(std::string&& value) {
  
  device_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:LabNetProt.Client.BleUartInit.device)
}
inline void BleUartInit::set_device(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:LabNetProt.Client.BleUartInit.device)
}
inline void BleUartInit::set_device(const char* value,
    size_t size) {
  
  device_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:LabNetProt.Client.BleUartInit.device)
}
inline std::string* BleUartInit::_internal_mutable_device() {
  
  return device_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BleUartInit::release_device() {
  // @@protoc_insertion_point(field_release:LabNetProt.Client.BleUartInit.device)
  return device_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BleUartInit::set_allocated_device(std::string* device) {
  if (device != nullptr) {
    
  } else {
    
  }
  device_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:LabNetProt.Client.BleUartInit.device)
}
inline std::string* BleUartInit::unsafe_arena_release_device() {
  // @@protoc_insertion_point(field_unsafe_arena_release:LabNetProt.Client.BleUartInit.device)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return device_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void BleUartInit::unsafe_arena_set_allocated_device(
    std::string* device) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (device != nullptr) {
    
  } else {
    
  }
  device_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      device, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LabNetProt.Client.BleUartInit.device)
}

// -------------------------------------------------------------------

// UartBoardInit

// uint32 baud = 1;
inline void UartBoardInit::clear_baud() {
  baud_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UartBoardInit::_internal_baud() const {
  return baud_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UartBoardInit::baud() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Client.UartBoardInit.baud)
  return _internal_baud();
}
inline void UartBoardInit::_internal_set_baud(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  baud_ = value;
}
inline void UartBoardInit::set_baud(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_baud(value);
  // @@protoc_insertion_point(field_set:LabNetProt.Client.UartBoardInit.baud)
}

// bool is_inverted = 2;
inline void UartBoardInit::clear_is_inverted() {
  is_inverted_ = false;
}
inline bool UartBoardInit::_internal_is_inverted() const {
  return is_inverted_;
}
inline bool UartBoardInit::is_inverted() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Client.UartBoardInit.is_inverted)
  return _internal_is_inverted();
}
inline void UartBoardInit::_internal_set_is_inverted(bool value) {
  
  is_inverted_ = value;
}
inline void UartBoardInit::set_is_inverted(bool value) {
  _internal_set_is_inverted(value);
  // @@protoc_insertion_point(field_set:LabNetProt.Client.UartBoardInit.is_inverted)
}

// -------------------------------------------------------------------

// UartBoardWriteData

// uint32 port = 1;
inline void UartBoardWriteData::clear_port() {
  port_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UartBoardWriteData::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UartBoardWriteData::port() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Client.UartBoardWriteData.port)
  return _internal_port();
}
inline void UartBoardWriteData::_internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  port_ = value;
}
inline void UartBoardWriteData::set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:LabNetProt.Client.UartBoardWriteData.port)
}

// bytes data = 2;
inline void UartBoardWriteData::clear_data() {
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UartBoardWriteData::data() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Client.UartBoardWriteData.data)
  return _internal_data();
}
inline void UartBoardWriteData::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:LabNetProt.Client.UartBoardWriteData.data)
}
inline std::string* UartBoardWriteData::mutable_data() {
  // @@protoc_insertion_point(field_mutable:LabNetProt.Client.UartBoardWriteData.data)
  return _internal_mutable_data();
}
inline const std::string& UartBoardWriteData::_internal_data() const {
  return data_.Get();
}
inline void UartBoardWriteData::_internal_set_data(const std::string& value) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UartBoardWriteData::set_data(std::string&& value) {
  
  data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:LabNetProt.Client.UartBoardWriteData.data)
}
inline void UartBoardWriteData::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:LabNetProt.Client.UartBoardWriteData.data)
}
inline void UartBoardWriteData::set_data(const void* value,
    size_t size) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:LabNetProt.Client.UartBoardWriteData.data)
}
inline std::string* UartBoardWriteData::_internal_mutable_data() {
  
  return data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UartBoardWriteData::release_data() {
  // @@protoc_insertion_point(field_release:LabNetProt.Client.UartBoardWriteData.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UartBoardWriteData::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:LabNetProt.Client.UartBoardWriteData.data)
}
inline std::string* UartBoardWriteData::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:LabNetProt.Client.UartBoardWriteData.data)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return data_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UartBoardWriteData::unsafe_arena_set_allocated_data(
    std::string* data) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (data != nullptr) {
    
  } else {
    
  }
  data_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      data, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LabNetProt.Client.UartBoardWriteData.data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Client
}  // namespace LabNetProt

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::LabNetProt::Client::IoBoardInitDigitalIn_Resistor> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::LabNetProt::Client::IoBoardInitDigitalIn_Resistor>() {
  return ::LabNetProt::Client::IoBoardInitDigitalIn_Resistor_descriptor();
}
template <> struct is_proto_enum< ::LabNetProt::Client::GpioWiringPiInitDigitalIn_Resistor> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::LabNetProt::Client::GpioWiringPiInitDigitalIn_Resistor>() {
  return ::LabNetProt::Client::GpioWiringPiInitDigitalIn_Resistor_descriptor();
}
template <> struct is_proto_enum< ::LabNetProt::Client::ClientMessageType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::LabNetProt::Client::ClientMessageType>() {
  return ::LabNetProt::Client::ClientMessageType_descriptor();
}
template <> struct is_proto_enum< ::LabNetProt::Client::SoundSignalType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::LabNetProt::Client::SoundSignalType>() {
  return ::LabNetProt::Client::SoundSignalType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_LabNetClient_2eproto
