// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LabNetServerMessages.proto

#include "LabNetServerMessages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_LabNetServerMessages_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_LabNetServerMessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GpioDigitalInInitResult;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_LabNetServerMessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GpioDigitalInState;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_LabNetServerMessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GpioDigitalOutInitResult;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_LabNetServerMessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GpioDigitalOutState;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_LabNetServerMessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GpioInitResult;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_LabNetServerMessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_OnlyOneConnectionAllowed;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_LabNetServerMessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Sam32InitResult;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_LabNetServerMessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_UartInitResult;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_LabNetServerMessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_UartNewData;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_LabNetServerMessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_UartWriteDataComplete;
}  // namespace protobuf_LabNetServerMessages_2eproto
namespace LabNet {
namespace Messages {
namespace Server {
class GpioInitResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GpioInitResult>
      _instance;
} _GpioInitResult_default_instance_;
class GpioDigitalInInitResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GpioDigitalInInitResult>
      _instance;
} _GpioDigitalInInitResult_default_instance_;
class GpioDigitalOutInitResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GpioDigitalOutInitResult>
      _instance;
} _GpioDigitalOutInitResult_default_instance_;
class GpioDigitalOutStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GpioDigitalOutState>
      _instance;
} _GpioDigitalOutState_default_instance_;
class GpioDigitalInStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GpioDigitalInState>
      _instance;
} _GpioDigitalInState_default_instance_;
class Sam32InitResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Sam32InitResult>
      _instance;
} _Sam32InitResult_default_instance_;
class UartInitResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UartInitResult>
      _instance;
} _UartInitResult_default_instance_;
class UartNewDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UartNewData>
      _instance;
} _UartNewData_default_instance_;
class UartWriteDataCompleteDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UartWriteDataComplete>
      _instance;
} _UartWriteDataComplete_default_instance_;
class OnlyOneConnectionAllowedDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OnlyOneConnectionAllowed>
      _instance;
} _OnlyOneConnectionAllowed_default_instance_;
class ServerWrappedMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ServerWrappedMessage>
      _instance;
  const ::LabNet::Messages::Server::GpioInitResult* gpio_init_result_;
  const ::LabNet::Messages::Server::GpioDigitalInInitResult* gpio_digital_in_init_result_;
  const ::LabNet::Messages::Server::GpioDigitalOutInitResult* gpio_digital_out_init_result_;
  const ::LabNet::Messages::Server::GpioDigitalOutState* gpio_digital_out_state_;
  const ::LabNet::Messages::Server::GpioDigitalInState* gpio_digital_in_state_;
  const ::LabNet::Messages::Server::Sam32InitResult* sam32_init_result_;
  const ::LabNet::Messages::Server::UartInitResult* uart_init_result_;
  const ::LabNet::Messages::Server::UartNewData* uart_new_data_;
  const ::LabNet::Messages::Server::UartWriteDataComplete* uart_write_data_complete_;
  const ::LabNet::Messages::Server::OnlyOneConnectionAllowed* only_one_connection_;
} _ServerWrappedMessage_default_instance_;
}  // namespace Server
}  // namespace Messages
}  // namespace LabNet
namespace protobuf_LabNetServerMessages_2eproto {
static void InitDefaultsGpioInitResult() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LabNet::Messages::Server::_GpioInitResult_default_instance_;
    new (ptr) ::LabNet::Messages::Server::GpioInitResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LabNet::Messages::Server::GpioInitResult::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GpioInitResult =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGpioInitResult}, {}};

static void InitDefaultsGpioDigitalInInitResult() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LabNet::Messages::Server::_GpioDigitalInInitResult_default_instance_;
    new (ptr) ::LabNet::Messages::Server::GpioDigitalInInitResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LabNet::Messages::Server::GpioDigitalInInitResult::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GpioDigitalInInitResult =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGpioDigitalInInitResult}, {}};

static void InitDefaultsGpioDigitalOutInitResult() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LabNet::Messages::Server::_GpioDigitalOutInitResult_default_instance_;
    new (ptr) ::LabNet::Messages::Server::GpioDigitalOutInitResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LabNet::Messages::Server::GpioDigitalOutInitResult::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GpioDigitalOutInitResult =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGpioDigitalOutInitResult}, {}};

static void InitDefaultsGpioDigitalOutState() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LabNet::Messages::Server::_GpioDigitalOutState_default_instance_;
    new (ptr) ::LabNet::Messages::Server::GpioDigitalOutState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LabNet::Messages::Server::GpioDigitalOutState::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GpioDigitalOutState =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGpioDigitalOutState}, {}};

static void InitDefaultsGpioDigitalInState() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LabNet::Messages::Server::_GpioDigitalInState_default_instance_;
    new (ptr) ::LabNet::Messages::Server::GpioDigitalInState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LabNet::Messages::Server::GpioDigitalInState::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GpioDigitalInState =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGpioDigitalInState}, {}};

static void InitDefaultsSam32InitResult() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LabNet::Messages::Server::_Sam32InitResult_default_instance_;
    new (ptr) ::LabNet::Messages::Server::Sam32InitResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LabNet::Messages::Server::Sam32InitResult::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Sam32InitResult =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSam32InitResult}, {}};

static void InitDefaultsUartInitResult() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LabNet::Messages::Server::_UartInitResult_default_instance_;
    new (ptr) ::LabNet::Messages::Server::UartInitResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LabNet::Messages::Server::UartInitResult::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UartInitResult =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUartInitResult}, {}};

static void InitDefaultsUartNewData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LabNet::Messages::Server::_UartNewData_default_instance_;
    new (ptr) ::LabNet::Messages::Server::UartNewData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LabNet::Messages::Server::UartNewData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UartNewData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUartNewData}, {}};

static void InitDefaultsUartWriteDataComplete() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LabNet::Messages::Server::_UartWriteDataComplete_default_instance_;
    new (ptr) ::LabNet::Messages::Server::UartWriteDataComplete();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LabNet::Messages::Server::UartWriteDataComplete::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UartWriteDataComplete =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUartWriteDataComplete}, {}};

static void InitDefaultsOnlyOneConnectionAllowed() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LabNet::Messages::Server::_OnlyOneConnectionAllowed_default_instance_;
    new (ptr) ::LabNet::Messages::Server::OnlyOneConnectionAllowed();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LabNet::Messages::Server::OnlyOneConnectionAllowed::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_OnlyOneConnectionAllowed =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOnlyOneConnectionAllowed}, {}};

static void InitDefaultsServerWrappedMessage() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LabNet::Messages::Server::_ServerWrappedMessage_default_instance_;
    new (ptr) ::LabNet::Messages::Server::ServerWrappedMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LabNet::Messages::Server::ServerWrappedMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<10> scc_info_ServerWrappedMessage =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 10, InitDefaultsServerWrappedMessage}, {
      &protobuf_LabNetServerMessages_2eproto::scc_info_GpioInitResult.base,
      &protobuf_LabNetServerMessages_2eproto::scc_info_GpioDigitalInInitResult.base,
      &protobuf_LabNetServerMessages_2eproto::scc_info_GpioDigitalOutInitResult.base,
      &protobuf_LabNetServerMessages_2eproto::scc_info_GpioDigitalOutState.base,
      &protobuf_LabNetServerMessages_2eproto::scc_info_GpioDigitalInState.base,
      &protobuf_LabNetServerMessages_2eproto::scc_info_Sam32InitResult.base,
      &protobuf_LabNetServerMessages_2eproto::scc_info_UartInitResult.base,
      &protobuf_LabNetServerMessages_2eproto::scc_info_UartNewData.base,
      &protobuf_LabNetServerMessages_2eproto::scc_info_UartWriteDataComplete.base,
      &protobuf_LabNetServerMessages_2eproto::scc_info_OnlyOneConnectionAllowed.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_GpioInitResult.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GpioDigitalInInitResult.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GpioDigitalOutInitResult.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GpioDigitalOutState.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GpioDigitalInState.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Sam32InitResult.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UartInitResult.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UartNewData.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UartWriteDataComplete.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OnlyOneConnectionAllowed.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ServerWrappedMessage.base);
}

::google::protobuf::Metadata file_level_metadata[11];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LabNet::Messages::Server::GpioInitResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LabNet::Messages::Server::GpioInitResult, is_succeed_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LabNet::Messages::Server::GpioDigitalInInitResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LabNet::Messages::Server::GpioDigitalInInitResult, pin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LabNet::Messages::Server::GpioDigitalInInitResult, is_succeed_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LabNet::Messages::Server::GpioDigitalOutInitResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LabNet::Messages::Server::GpioDigitalOutInitResult, pin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LabNet::Messages::Server::GpioDigitalOutInitResult, is_succeed_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LabNet::Messages::Server::GpioDigitalOutState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LabNet::Messages::Server::GpioDigitalOutState, pin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LabNet::Messages::Server::GpioDigitalOutState, state_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LabNet::Messages::Server::GpioDigitalInState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LabNet::Messages::Server::GpioDigitalInState, pin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LabNet::Messages::Server::GpioDigitalInState, state_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LabNet::Messages::Server::Sam32InitResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LabNet::Messages::Server::Sam32InitResult, is_succeed_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LabNet::Messages::Server::UartInitResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LabNet::Messages::Server::UartInitResult, port_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LabNet::Messages::Server::UartInitResult, is_succeed_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LabNet::Messages::Server::UartNewData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LabNet::Messages::Server::UartNewData, port_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LabNet::Messages::Server::UartNewData, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LabNet::Messages::Server::UartWriteDataComplete, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LabNet::Messages::Server::UartWriteDataComplete, portid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LabNet::Messages::Server::OnlyOneConnectionAllowed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LabNet::Messages::Server::ServerWrappedMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LabNet::Messages::Server::ServerWrappedMessage, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::LabNet::Messages::Server::ServerWrappedMessageDefaultTypeInternal, gpio_init_result_),
  offsetof(::LabNet::Messages::Server::ServerWrappedMessageDefaultTypeInternal, gpio_digital_in_init_result_),
  offsetof(::LabNet::Messages::Server::ServerWrappedMessageDefaultTypeInternal, gpio_digital_out_init_result_),
  offsetof(::LabNet::Messages::Server::ServerWrappedMessageDefaultTypeInternal, gpio_digital_out_state_),
  offsetof(::LabNet::Messages::Server::ServerWrappedMessageDefaultTypeInternal, gpio_digital_in_state_),
  offsetof(::LabNet::Messages::Server::ServerWrappedMessageDefaultTypeInternal, sam32_init_result_),
  offsetof(::LabNet::Messages::Server::ServerWrappedMessageDefaultTypeInternal, uart_init_result_),
  offsetof(::LabNet::Messages::Server::ServerWrappedMessageDefaultTypeInternal, uart_new_data_),
  offsetof(::LabNet::Messages::Server::ServerWrappedMessageDefaultTypeInternal, uart_write_data_complete_),
  offsetof(::LabNet::Messages::Server::ServerWrappedMessageDefaultTypeInternal, only_one_connection_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LabNet::Messages::Server::ServerWrappedMessage, server_message_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::LabNet::Messages::Server::GpioInitResult)},
  { 6, -1, sizeof(::LabNet::Messages::Server::GpioDigitalInInitResult)},
  { 13, -1, sizeof(::LabNet::Messages::Server::GpioDigitalOutInitResult)},
  { 20, -1, sizeof(::LabNet::Messages::Server::GpioDigitalOutState)},
  { 27, -1, sizeof(::LabNet::Messages::Server::GpioDigitalInState)},
  { 34, -1, sizeof(::LabNet::Messages::Server::Sam32InitResult)},
  { 40, -1, sizeof(::LabNet::Messages::Server::UartInitResult)},
  { 47, -1, sizeof(::LabNet::Messages::Server::UartNewData)},
  { 54, -1, sizeof(::LabNet::Messages::Server::UartWriteDataComplete)},
  { 60, -1, sizeof(::LabNet::Messages::Server::OnlyOneConnectionAllowed)},
  { 65, -1, sizeof(::LabNet::Messages::Server::ServerWrappedMessage)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::LabNet::Messages::Server::_GpioInitResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::LabNet::Messages::Server::_GpioDigitalInInitResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::LabNet::Messages::Server::_GpioDigitalOutInitResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::LabNet::Messages::Server::_GpioDigitalOutState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::LabNet::Messages::Server::_GpioDigitalInState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::LabNet::Messages::Server::_Sam32InitResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::LabNet::Messages::Server::_UartInitResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::LabNet::Messages::Server::_UartNewData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::LabNet::Messages::Server::_UartWriteDataComplete_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::LabNet::Messages::Server::_OnlyOneConnectionAllowed_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::LabNet::Messages::Server::_ServerWrappedMessage_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "LabNetServerMessages.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 11);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\032LabNetServerMessages.proto\022\026LabNet.Mes"
      "sages.Server\"$\n\016GpioInitResult\022\022\n\nis_suc"
      "ceed\030\001 \001(\010\":\n\027GpioDigitalInInitResult\022\013\n"
      "\003pin\030\001 \001(\r\022\022\n\nis_succeed\030\002 \001(\010\";\n\030GpioDi"
      "gitalOutInitResult\022\013\n\003pin\030\001 \001(\r\022\022\n\nis_su"
      "cceed\030\002 \001(\010\"1\n\023GpioDigitalOutState\022\013\n\003pi"
      "n\030\001 \001(\r\022\r\n\005state\030\002 \001(\010\"0\n\022GpioDigitalInS"
      "tate\022\013\n\003pin\030\001 \001(\r\022\r\n\005state\030\002 \001(\010\"%\n\017Sam3"
      "2InitResult\022\022\n\nis_succeed\030\001 \001(\010\"5\n\016UartI"
      "nitResult\022\017\n\007port_id\030\001 \001(\r\022\022\n\nis_succeed"
      "\030\002 \001(\010\",\n\013UartNewData\022\017\n\007port_id\030\001 \001(\r\022\014"
      "\n\004data\030\002 \001(\014\"\'\n\025UartWriteDataComplete\022\016\n"
      "\006portId\030\001 \001(\r\"\032\n\030OnlyOneConnectionAllowe"
      "d\"\246\006\n\024ServerWrappedMessage\022B\n\020gpio_init_"
      "result\030\001 \001(\0132&.LabNet.Messages.Server.Gp"
      "ioInitResultH\000\022V\n\033gpio_digital_in_init_r"
      "esult\030\002 \001(\0132/.LabNet.Messages.Server.Gpi"
      "oDigitalInInitResultH\000\022X\n\034gpio_digital_o"
      "ut_init_result\030\003 \001(\01320.LabNet.Messages.S"
      "erver.GpioDigitalOutInitResultH\000\022M\n\026gpio"
      "_digital_out_state\030\004 \001(\0132+.LabNet.Messag"
      "es.Server.GpioDigitalOutStateH\000\022K\n\025gpio_"
      "digital_in_state\030\005 \001(\0132*.LabNet.Messages"
      ".Server.GpioDigitalInStateH\000\022D\n\021sam32_in"
      "it_result\030\006 \001(\0132\'.LabNet.Messages.Server"
      ".Sam32InitResultH\000\022B\n\020uart_init_result\030\007"
      " \001(\0132&.LabNet.Messages.Server.UartInitRe"
      "sultH\000\022<\n\ruart_new_data\030\010 \001(\0132#.LabNet.M"
      "essages.Server.UartNewDataH\000\022Q\n\030uart_wri"
      "te_data_complete\030\t \001(\0132-.LabNet.Messages"
      ".Server.UartWriteDataCompleteH\000\022O\n\023only_"
      "one_connection\030\n \001(\01320.LabNet.Messages.S"
      "erver.OnlyOneConnectionAllowedH\000B\020\n\016serv"
      "er_messageb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1338);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "LabNetServerMessages.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_LabNetServerMessages_2eproto
namespace LabNet {
namespace Messages {
namespace Server {

// ===================================================================

void GpioInitResult::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GpioInitResult::kIsSucceedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GpioInitResult::GpioInitResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_LabNetServerMessages_2eproto::scc_info_GpioInitResult.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:LabNet.Messages.Server.GpioInitResult)
}
GpioInitResult::GpioInitResult(const GpioInitResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  is_succeed_ = from.is_succeed_;
  // @@protoc_insertion_point(copy_constructor:LabNet.Messages.Server.GpioInitResult)
}

void GpioInitResult::SharedCtor() {
  is_succeed_ = false;
}

GpioInitResult::~GpioInitResult() {
  // @@protoc_insertion_point(destructor:LabNet.Messages.Server.GpioInitResult)
  SharedDtor();
}

void GpioInitResult::SharedDtor() {
}

void GpioInitResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GpioInitResult::descriptor() {
  ::protobuf_LabNetServerMessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_LabNetServerMessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GpioInitResult& GpioInitResult::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_LabNetServerMessages_2eproto::scc_info_GpioInitResult.base);
  return *internal_default_instance();
}


void GpioInitResult::Clear() {
// @@protoc_insertion_point(message_clear_start:LabNet.Messages.Server.GpioInitResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  is_succeed_ = false;
  _internal_metadata_.Clear();
}

bool GpioInitResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LabNet.Messages.Server.GpioInitResult)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool is_succeed = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_succeed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LabNet.Messages.Server.GpioInitResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LabNet.Messages.Server.GpioInitResult)
  return false;
#undef DO_
}

void GpioInitResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LabNet.Messages.Server.GpioInitResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_succeed = 1;
  if (this->is_succeed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_succeed(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:LabNet.Messages.Server.GpioInitResult)
}

::google::protobuf::uint8* GpioInitResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:LabNet.Messages.Server.GpioInitResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_succeed = 1;
  if (this->is_succeed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_succeed(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LabNet.Messages.Server.GpioInitResult)
  return target;
}

size_t GpioInitResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LabNet.Messages.Server.GpioInitResult)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bool is_succeed = 1;
  if (this->is_succeed() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GpioInitResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LabNet.Messages.Server.GpioInitResult)
  GOOGLE_DCHECK_NE(&from, this);
  const GpioInitResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GpioInitResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LabNet.Messages.Server.GpioInitResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LabNet.Messages.Server.GpioInitResult)
    MergeFrom(*source);
  }
}

void GpioInitResult::MergeFrom(const GpioInitResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LabNet.Messages.Server.GpioInitResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.is_succeed() != 0) {
    set_is_succeed(from.is_succeed());
  }
}

void GpioInitResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LabNet.Messages.Server.GpioInitResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GpioInitResult::CopyFrom(const GpioInitResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LabNet.Messages.Server.GpioInitResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GpioInitResult::IsInitialized() const {
  return true;
}

void GpioInitResult::Swap(GpioInitResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GpioInitResult::InternalSwap(GpioInitResult* other) {
  using std::swap;
  swap(is_succeed_, other->is_succeed_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GpioInitResult::GetMetadata() const {
  protobuf_LabNetServerMessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_LabNetServerMessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GpioDigitalInInitResult::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GpioDigitalInInitResult::kPinFieldNumber;
const int GpioDigitalInInitResult::kIsSucceedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GpioDigitalInInitResult::GpioDigitalInInitResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_LabNetServerMessages_2eproto::scc_info_GpioDigitalInInitResult.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:LabNet.Messages.Server.GpioDigitalInInitResult)
}
GpioDigitalInInitResult::GpioDigitalInInitResult(const GpioDigitalInInitResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&pin_, &from.pin_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_succeed_) -
    reinterpret_cast<char*>(&pin_)) + sizeof(is_succeed_));
  // @@protoc_insertion_point(copy_constructor:LabNet.Messages.Server.GpioDigitalInInitResult)
}

void GpioDigitalInInitResult::SharedCtor() {
  ::memset(&pin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_succeed_) -
      reinterpret_cast<char*>(&pin_)) + sizeof(is_succeed_));
}

GpioDigitalInInitResult::~GpioDigitalInInitResult() {
  // @@protoc_insertion_point(destructor:LabNet.Messages.Server.GpioDigitalInInitResult)
  SharedDtor();
}

void GpioDigitalInInitResult::SharedDtor() {
}

void GpioDigitalInInitResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GpioDigitalInInitResult::descriptor() {
  ::protobuf_LabNetServerMessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_LabNetServerMessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GpioDigitalInInitResult& GpioDigitalInInitResult::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_LabNetServerMessages_2eproto::scc_info_GpioDigitalInInitResult.base);
  return *internal_default_instance();
}


void GpioDigitalInInitResult::Clear() {
// @@protoc_insertion_point(message_clear_start:LabNet.Messages.Server.GpioDigitalInInitResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&pin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_succeed_) -
      reinterpret_cast<char*>(&pin_)) + sizeof(is_succeed_));
  _internal_metadata_.Clear();
}

bool GpioDigitalInInitResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LabNet.Messages.Server.GpioDigitalInInitResult)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 pin = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_succeed = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_succeed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LabNet.Messages.Server.GpioDigitalInInitResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LabNet.Messages.Server.GpioDigitalInInitResult)
  return false;
#undef DO_
}

void GpioDigitalInInitResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LabNet.Messages.Server.GpioDigitalInInitResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pin = 1;
  if (this->pin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pin(), output);
  }

  // bool is_succeed = 2;
  if (this->is_succeed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_succeed(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:LabNet.Messages.Server.GpioDigitalInInitResult)
}

::google::protobuf::uint8* GpioDigitalInInitResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:LabNet.Messages.Server.GpioDigitalInInitResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pin = 1;
  if (this->pin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pin(), target);
  }

  // bool is_succeed = 2;
  if (this->is_succeed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_succeed(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LabNet.Messages.Server.GpioDigitalInInitResult)
  return target;
}

size_t GpioDigitalInInitResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LabNet.Messages.Server.GpioDigitalInInitResult)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 pin = 1;
  if (this->pin() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->pin());
  }

  // bool is_succeed = 2;
  if (this->is_succeed() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GpioDigitalInInitResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LabNet.Messages.Server.GpioDigitalInInitResult)
  GOOGLE_DCHECK_NE(&from, this);
  const GpioDigitalInInitResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GpioDigitalInInitResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LabNet.Messages.Server.GpioDigitalInInitResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LabNet.Messages.Server.GpioDigitalInInitResult)
    MergeFrom(*source);
  }
}

void GpioDigitalInInitResult::MergeFrom(const GpioDigitalInInitResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LabNet.Messages.Server.GpioDigitalInInitResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pin() != 0) {
    set_pin(from.pin());
  }
  if (from.is_succeed() != 0) {
    set_is_succeed(from.is_succeed());
  }
}

void GpioDigitalInInitResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LabNet.Messages.Server.GpioDigitalInInitResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GpioDigitalInInitResult::CopyFrom(const GpioDigitalInInitResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LabNet.Messages.Server.GpioDigitalInInitResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GpioDigitalInInitResult::IsInitialized() const {
  return true;
}

void GpioDigitalInInitResult::Swap(GpioDigitalInInitResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GpioDigitalInInitResult::InternalSwap(GpioDigitalInInitResult* other) {
  using std::swap;
  swap(pin_, other->pin_);
  swap(is_succeed_, other->is_succeed_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GpioDigitalInInitResult::GetMetadata() const {
  protobuf_LabNetServerMessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_LabNetServerMessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GpioDigitalOutInitResult::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GpioDigitalOutInitResult::kPinFieldNumber;
const int GpioDigitalOutInitResult::kIsSucceedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GpioDigitalOutInitResult::GpioDigitalOutInitResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_LabNetServerMessages_2eproto::scc_info_GpioDigitalOutInitResult.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:LabNet.Messages.Server.GpioDigitalOutInitResult)
}
GpioDigitalOutInitResult::GpioDigitalOutInitResult(const GpioDigitalOutInitResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&pin_, &from.pin_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_succeed_) -
    reinterpret_cast<char*>(&pin_)) + sizeof(is_succeed_));
  // @@protoc_insertion_point(copy_constructor:LabNet.Messages.Server.GpioDigitalOutInitResult)
}

void GpioDigitalOutInitResult::SharedCtor() {
  ::memset(&pin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_succeed_) -
      reinterpret_cast<char*>(&pin_)) + sizeof(is_succeed_));
}

GpioDigitalOutInitResult::~GpioDigitalOutInitResult() {
  // @@protoc_insertion_point(destructor:LabNet.Messages.Server.GpioDigitalOutInitResult)
  SharedDtor();
}

void GpioDigitalOutInitResult::SharedDtor() {
}

void GpioDigitalOutInitResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GpioDigitalOutInitResult::descriptor() {
  ::protobuf_LabNetServerMessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_LabNetServerMessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GpioDigitalOutInitResult& GpioDigitalOutInitResult::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_LabNetServerMessages_2eproto::scc_info_GpioDigitalOutInitResult.base);
  return *internal_default_instance();
}


void GpioDigitalOutInitResult::Clear() {
// @@protoc_insertion_point(message_clear_start:LabNet.Messages.Server.GpioDigitalOutInitResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&pin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_succeed_) -
      reinterpret_cast<char*>(&pin_)) + sizeof(is_succeed_));
  _internal_metadata_.Clear();
}

bool GpioDigitalOutInitResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LabNet.Messages.Server.GpioDigitalOutInitResult)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 pin = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_succeed = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_succeed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LabNet.Messages.Server.GpioDigitalOutInitResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LabNet.Messages.Server.GpioDigitalOutInitResult)
  return false;
#undef DO_
}

void GpioDigitalOutInitResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LabNet.Messages.Server.GpioDigitalOutInitResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pin = 1;
  if (this->pin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pin(), output);
  }

  // bool is_succeed = 2;
  if (this->is_succeed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_succeed(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:LabNet.Messages.Server.GpioDigitalOutInitResult)
}

::google::protobuf::uint8* GpioDigitalOutInitResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:LabNet.Messages.Server.GpioDigitalOutInitResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pin = 1;
  if (this->pin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pin(), target);
  }

  // bool is_succeed = 2;
  if (this->is_succeed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_succeed(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LabNet.Messages.Server.GpioDigitalOutInitResult)
  return target;
}

size_t GpioDigitalOutInitResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LabNet.Messages.Server.GpioDigitalOutInitResult)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 pin = 1;
  if (this->pin() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->pin());
  }

  // bool is_succeed = 2;
  if (this->is_succeed() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GpioDigitalOutInitResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LabNet.Messages.Server.GpioDigitalOutInitResult)
  GOOGLE_DCHECK_NE(&from, this);
  const GpioDigitalOutInitResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GpioDigitalOutInitResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LabNet.Messages.Server.GpioDigitalOutInitResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LabNet.Messages.Server.GpioDigitalOutInitResult)
    MergeFrom(*source);
  }
}

void GpioDigitalOutInitResult::MergeFrom(const GpioDigitalOutInitResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LabNet.Messages.Server.GpioDigitalOutInitResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pin() != 0) {
    set_pin(from.pin());
  }
  if (from.is_succeed() != 0) {
    set_is_succeed(from.is_succeed());
  }
}

void GpioDigitalOutInitResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LabNet.Messages.Server.GpioDigitalOutInitResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GpioDigitalOutInitResult::CopyFrom(const GpioDigitalOutInitResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LabNet.Messages.Server.GpioDigitalOutInitResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GpioDigitalOutInitResult::IsInitialized() const {
  return true;
}

void GpioDigitalOutInitResult::Swap(GpioDigitalOutInitResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GpioDigitalOutInitResult::InternalSwap(GpioDigitalOutInitResult* other) {
  using std::swap;
  swap(pin_, other->pin_);
  swap(is_succeed_, other->is_succeed_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GpioDigitalOutInitResult::GetMetadata() const {
  protobuf_LabNetServerMessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_LabNetServerMessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GpioDigitalOutState::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GpioDigitalOutState::kPinFieldNumber;
const int GpioDigitalOutState::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GpioDigitalOutState::GpioDigitalOutState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_LabNetServerMessages_2eproto::scc_info_GpioDigitalOutState.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:LabNet.Messages.Server.GpioDigitalOutState)
}
GpioDigitalOutState::GpioDigitalOutState(const GpioDigitalOutState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&pin_, &from.pin_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&pin_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:LabNet.Messages.Server.GpioDigitalOutState)
}

void GpioDigitalOutState::SharedCtor() {
  ::memset(&pin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&pin_)) + sizeof(state_));
}

GpioDigitalOutState::~GpioDigitalOutState() {
  // @@protoc_insertion_point(destructor:LabNet.Messages.Server.GpioDigitalOutState)
  SharedDtor();
}

void GpioDigitalOutState::SharedDtor() {
}

void GpioDigitalOutState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GpioDigitalOutState::descriptor() {
  ::protobuf_LabNetServerMessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_LabNetServerMessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GpioDigitalOutState& GpioDigitalOutState::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_LabNetServerMessages_2eproto::scc_info_GpioDigitalOutState.base);
  return *internal_default_instance();
}


void GpioDigitalOutState::Clear() {
// @@protoc_insertion_point(message_clear_start:LabNet.Messages.Server.GpioDigitalOutState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&pin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&pin_)) + sizeof(state_));
  _internal_metadata_.Clear();
}

bool GpioDigitalOutState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LabNet.Messages.Server.GpioDigitalOutState)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 pin = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool state = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LabNet.Messages.Server.GpioDigitalOutState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LabNet.Messages.Server.GpioDigitalOutState)
  return false;
#undef DO_
}

void GpioDigitalOutState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LabNet.Messages.Server.GpioDigitalOutState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pin = 1;
  if (this->pin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pin(), output);
  }

  // bool state = 2;
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->state(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:LabNet.Messages.Server.GpioDigitalOutState)
}

::google::protobuf::uint8* GpioDigitalOutState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:LabNet.Messages.Server.GpioDigitalOutState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pin = 1;
  if (this->pin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pin(), target);
  }

  // bool state = 2;
  if (this->state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->state(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LabNet.Messages.Server.GpioDigitalOutState)
  return target;
}

size_t GpioDigitalOutState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LabNet.Messages.Server.GpioDigitalOutState)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 pin = 1;
  if (this->pin() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->pin());
  }

  // bool state = 2;
  if (this->state() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GpioDigitalOutState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LabNet.Messages.Server.GpioDigitalOutState)
  GOOGLE_DCHECK_NE(&from, this);
  const GpioDigitalOutState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GpioDigitalOutState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LabNet.Messages.Server.GpioDigitalOutState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LabNet.Messages.Server.GpioDigitalOutState)
    MergeFrom(*source);
  }
}

void GpioDigitalOutState::MergeFrom(const GpioDigitalOutState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LabNet.Messages.Server.GpioDigitalOutState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pin() != 0) {
    set_pin(from.pin());
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
}

void GpioDigitalOutState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LabNet.Messages.Server.GpioDigitalOutState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GpioDigitalOutState::CopyFrom(const GpioDigitalOutState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LabNet.Messages.Server.GpioDigitalOutState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GpioDigitalOutState::IsInitialized() const {
  return true;
}

void GpioDigitalOutState::Swap(GpioDigitalOutState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GpioDigitalOutState::InternalSwap(GpioDigitalOutState* other) {
  using std::swap;
  swap(pin_, other->pin_);
  swap(state_, other->state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GpioDigitalOutState::GetMetadata() const {
  protobuf_LabNetServerMessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_LabNetServerMessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GpioDigitalInState::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GpioDigitalInState::kPinFieldNumber;
const int GpioDigitalInState::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GpioDigitalInState::GpioDigitalInState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_LabNetServerMessages_2eproto::scc_info_GpioDigitalInState.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:LabNet.Messages.Server.GpioDigitalInState)
}
GpioDigitalInState::GpioDigitalInState(const GpioDigitalInState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&pin_, &from.pin_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&pin_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:LabNet.Messages.Server.GpioDigitalInState)
}

void GpioDigitalInState::SharedCtor() {
  ::memset(&pin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&pin_)) + sizeof(state_));
}

GpioDigitalInState::~GpioDigitalInState() {
  // @@protoc_insertion_point(destructor:LabNet.Messages.Server.GpioDigitalInState)
  SharedDtor();
}

void GpioDigitalInState::SharedDtor() {
}

void GpioDigitalInState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GpioDigitalInState::descriptor() {
  ::protobuf_LabNetServerMessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_LabNetServerMessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GpioDigitalInState& GpioDigitalInState::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_LabNetServerMessages_2eproto::scc_info_GpioDigitalInState.base);
  return *internal_default_instance();
}


void GpioDigitalInState::Clear() {
// @@protoc_insertion_point(message_clear_start:LabNet.Messages.Server.GpioDigitalInState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&pin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&pin_)) + sizeof(state_));
  _internal_metadata_.Clear();
}

bool GpioDigitalInState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LabNet.Messages.Server.GpioDigitalInState)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 pin = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool state = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LabNet.Messages.Server.GpioDigitalInState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LabNet.Messages.Server.GpioDigitalInState)
  return false;
#undef DO_
}

void GpioDigitalInState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LabNet.Messages.Server.GpioDigitalInState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pin = 1;
  if (this->pin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pin(), output);
  }

  // bool state = 2;
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->state(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:LabNet.Messages.Server.GpioDigitalInState)
}

::google::protobuf::uint8* GpioDigitalInState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:LabNet.Messages.Server.GpioDigitalInState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pin = 1;
  if (this->pin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pin(), target);
  }

  // bool state = 2;
  if (this->state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->state(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LabNet.Messages.Server.GpioDigitalInState)
  return target;
}

size_t GpioDigitalInState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LabNet.Messages.Server.GpioDigitalInState)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 pin = 1;
  if (this->pin() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->pin());
  }

  // bool state = 2;
  if (this->state() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GpioDigitalInState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LabNet.Messages.Server.GpioDigitalInState)
  GOOGLE_DCHECK_NE(&from, this);
  const GpioDigitalInState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GpioDigitalInState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LabNet.Messages.Server.GpioDigitalInState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LabNet.Messages.Server.GpioDigitalInState)
    MergeFrom(*source);
  }
}

void GpioDigitalInState::MergeFrom(const GpioDigitalInState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LabNet.Messages.Server.GpioDigitalInState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pin() != 0) {
    set_pin(from.pin());
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
}

void GpioDigitalInState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LabNet.Messages.Server.GpioDigitalInState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GpioDigitalInState::CopyFrom(const GpioDigitalInState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LabNet.Messages.Server.GpioDigitalInState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GpioDigitalInState::IsInitialized() const {
  return true;
}

void GpioDigitalInState::Swap(GpioDigitalInState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GpioDigitalInState::InternalSwap(GpioDigitalInState* other) {
  using std::swap;
  swap(pin_, other->pin_);
  swap(state_, other->state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GpioDigitalInState::GetMetadata() const {
  protobuf_LabNetServerMessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_LabNetServerMessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Sam32InitResult::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Sam32InitResult::kIsSucceedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Sam32InitResult::Sam32InitResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_LabNetServerMessages_2eproto::scc_info_Sam32InitResult.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:LabNet.Messages.Server.Sam32InitResult)
}
Sam32InitResult::Sam32InitResult(const Sam32InitResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  is_succeed_ = from.is_succeed_;
  // @@protoc_insertion_point(copy_constructor:LabNet.Messages.Server.Sam32InitResult)
}

void Sam32InitResult::SharedCtor() {
  is_succeed_ = false;
}

Sam32InitResult::~Sam32InitResult() {
  // @@protoc_insertion_point(destructor:LabNet.Messages.Server.Sam32InitResult)
  SharedDtor();
}

void Sam32InitResult::SharedDtor() {
}

void Sam32InitResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Sam32InitResult::descriptor() {
  ::protobuf_LabNetServerMessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_LabNetServerMessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Sam32InitResult& Sam32InitResult::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_LabNetServerMessages_2eproto::scc_info_Sam32InitResult.base);
  return *internal_default_instance();
}


void Sam32InitResult::Clear() {
// @@protoc_insertion_point(message_clear_start:LabNet.Messages.Server.Sam32InitResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  is_succeed_ = false;
  _internal_metadata_.Clear();
}

bool Sam32InitResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LabNet.Messages.Server.Sam32InitResult)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool is_succeed = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_succeed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LabNet.Messages.Server.Sam32InitResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LabNet.Messages.Server.Sam32InitResult)
  return false;
#undef DO_
}

void Sam32InitResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LabNet.Messages.Server.Sam32InitResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_succeed = 1;
  if (this->is_succeed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_succeed(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:LabNet.Messages.Server.Sam32InitResult)
}

::google::protobuf::uint8* Sam32InitResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:LabNet.Messages.Server.Sam32InitResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_succeed = 1;
  if (this->is_succeed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_succeed(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LabNet.Messages.Server.Sam32InitResult)
  return target;
}

size_t Sam32InitResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LabNet.Messages.Server.Sam32InitResult)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bool is_succeed = 1;
  if (this->is_succeed() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Sam32InitResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LabNet.Messages.Server.Sam32InitResult)
  GOOGLE_DCHECK_NE(&from, this);
  const Sam32InitResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Sam32InitResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LabNet.Messages.Server.Sam32InitResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LabNet.Messages.Server.Sam32InitResult)
    MergeFrom(*source);
  }
}

void Sam32InitResult::MergeFrom(const Sam32InitResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LabNet.Messages.Server.Sam32InitResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.is_succeed() != 0) {
    set_is_succeed(from.is_succeed());
  }
}

void Sam32InitResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LabNet.Messages.Server.Sam32InitResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sam32InitResult::CopyFrom(const Sam32InitResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LabNet.Messages.Server.Sam32InitResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sam32InitResult::IsInitialized() const {
  return true;
}

void Sam32InitResult::Swap(Sam32InitResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Sam32InitResult::InternalSwap(Sam32InitResult* other) {
  using std::swap;
  swap(is_succeed_, other->is_succeed_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Sam32InitResult::GetMetadata() const {
  protobuf_LabNetServerMessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_LabNetServerMessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UartInitResult::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UartInitResult::kPortIdFieldNumber;
const int UartInitResult::kIsSucceedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UartInitResult::UartInitResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_LabNetServerMessages_2eproto::scc_info_UartInitResult.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:LabNet.Messages.Server.UartInitResult)
}
UartInitResult::UartInitResult(const UartInitResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&port_id_, &from.port_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_succeed_) -
    reinterpret_cast<char*>(&port_id_)) + sizeof(is_succeed_));
  // @@protoc_insertion_point(copy_constructor:LabNet.Messages.Server.UartInitResult)
}

void UartInitResult::SharedCtor() {
  ::memset(&port_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_succeed_) -
      reinterpret_cast<char*>(&port_id_)) + sizeof(is_succeed_));
}

UartInitResult::~UartInitResult() {
  // @@protoc_insertion_point(destructor:LabNet.Messages.Server.UartInitResult)
  SharedDtor();
}

void UartInitResult::SharedDtor() {
}

void UartInitResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UartInitResult::descriptor() {
  ::protobuf_LabNetServerMessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_LabNetServerMessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UartInitResult& UartInitResult::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_LabNetServerMessages_2eproto::scc_info_UartInitResult.base);
  return *internal_default_instance();
}


void UartInitResult::Clear() {
// @@protoc_insertion_point(message_clear_start:LabNet.Messages.Server.UartInitResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&port_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_succeed_) -
      reinterpret_cast<char*>(&port_id_)) + sizeof(is_succeed_));
  _internal_metadata_.Clear();
}

bool UartInitResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LabNet.Messages.Server.UartInitResult)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 port_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_succeed = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_succeed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LabNet.Messages.Server.UartInitResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LabNet.Messages.Server.UartInitResult)
  return false;
#undef DO_
}

void UartInitResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LabNet.Messages.Server.UartInitResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 port_id = 1;
  if (this->port_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->port_id(), output);
  }

  // bool is_succeed = 2;
  if (this->is_succeed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_succeed(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:LabNet.Messages.Server.UartInitResult)
}

::google::protobuf::uint8* UartInitResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:LabNet.Messages.Server.UartInitResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 port_id = 1;
  if (this->port_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->port_id(), target);
  }

  // bool is_succeed = 2;
  if (this->is_succeed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_succeed(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LabNet.Messages.Server.UartInitResult)
  return target;
}

size_t UartInitResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LabNet.Messages.Server.UartInitResult)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 port_id = 1;
  if (this->port_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->port_id());
  }

  // bool is_succeed = 2;
  if (this->is_succeed() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UartInitResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LabNet.Messages.Server.UartInitResult)
  GOOGLE_DCHECK_NE(&from, this);
  const UartInitResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UartInitResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LabNet.Messages.Server.UartInitResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LabNet.Messages.Server.UartInitResult)
    MergeFrom(*source);
  }
}

void UartInitResult::MergeFrom(const UartInitResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LabNet.Messages.Server.UartInitResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.port_id() != 0) {
    set_port_id(from.port_id());
  }
  if (from.is_succeed() != 0) {
    set_is_succeed(from.is_succeed());
  }
}

void UartInitResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LabNet.Messages.Server.UartInitResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UartInitResult::CopyFrom(const UartInitResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LabNet.Messages.Server.UartInitResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UartInitResult::IsInitialized() const {
  return true;
}

void UartInitResult::Swap(UartInitResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UartInitResult::InternalSwap(UartInitResult* other) {
  using std::swap;
  swap(port_id_, other->port_id_);
  swap(is_succeed_, other->is_succeed_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UartInitResult::GetMetadata() const {
  protobuf_LabNetServerMessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_LabNetServerMessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UartNewData::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UartNewData::kPortIdFieldNumber;
const int UartNewData::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UartNewData::UartNewData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_LabNetServerMessages_2eproto::scc_info_UartNewData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:LabNet.Messages.Server.UartNewData)
}
UartNewData::UartNewData(const UartNewData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  port_id_ = from.port_id_;
  // @@protoc_insertion_point(copy_constructor:LabNet.Messages.Server.UartNewData)
}

void UartNewData::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_id_ = 0u;
}

UartNewData::~UartNewData() {
  // @@protoc_insertion_point(destructor:LabNet.Messages.Server.UartNewData)
  SharedDtor();
}

void UartNewData::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UartNewData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UartNewData::descriptor() {
  ::protobuf_LabNetServerMessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_LabNetServerMessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UartNewData& UartNewData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_LabNetServerMessages_2eproto::scc_info_UartNewData.base);
  return *internal_default_instance();
}


void UartNewData::Clear() {
// @@protoc_insertion_point(message_clear_start:LabNet.Messages.Server.UartNewData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_id_ = 0u;
  _internal_metadata_.Clear();
}

bool UartNewData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LabNet.Messages.Server.UartNewData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 port_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LabNet.Messages.Server.UartNewData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LabNet.Messages.Server.UartNewData)
  return false;
#undef DO_
}

void UartNewData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LabNet.Messages.Server.UartNewData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 port_id = 1;
  if (this->port_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->port_id(), output);
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:LabNet.Messages.Server.UartNewData)
}

::google::protobuf::uint8* UartNewData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:LabNet.Messages.Server.UartNewData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 port_id = 1;
  if (this->port_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->port_id(), target);
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LabNet.Messages.Server.UartNewData)
  return target;
}

size_t UartNewData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LabNet.Messages.Server.UartNewData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes data = 2;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // uint32 port_id = 1;
  if (this->port_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->port_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UartNewData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LabNet.Messages.Server.UartNewData)
  GOOGLE_DCHECK_NE(&from, this);
  const UartNewData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UartNewData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LabNet.Messages.Server.UartNewData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LabNet.Messages.Server.UartNewData)
    MergeFrom(*source);
  }
}

void UartNewData::MergeFrom(const UartNewData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LabNet.Messages.Server.UartNewData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.port_id() != 0) {
    set_port_id(from.port_id());
  }
}

void UartNewData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LabNet.Messages.Server.UartNewData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UartNewData::CopyFrom(const UartNewData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LabNet.Messages.Server.UartNewData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UartNewData::IsInitialized() const {
  return true;
}

void UartNewData::Swap(UartNewData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UartNewData::InternalSwap(UartNewData* other) {
  using std::swap;
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(port_id_, other->port_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UartNewData::GetMetadata() const {
  protobuf_LabNetServerMessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_LabNetServerMessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UartWriteDataComplete::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UartWriteDataComplete::kPortIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UartWriteDataComplete::UartWriteDataComplete()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_LabNetServerMessages_2eproto::scc_info_UartWriteDataComplete.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:LabNet.Messages.Server.UartWriteDataComplete)
}
UartWriteDataComplete::UartWriteDataComplete(const UartWriteDataComplete& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  portid_ = from.portid_;
  // @@protoc_insertion_point(copy_constructor:LabNet.Messages.Server.UartWriteDataComplete)
}

void UartWriteDataComplete::SharedCtor() {
  portid_ = 0u;
}

UartWriteDataComplete::~UartWriteDataComplete() {
  // @@protoc_insertion_point(destructor:LabNet.Messages.Server.UartWriteDataComplete)
  SharedDtor();
}

void UartWriteDataComplete::SharedDtor() {
}

void UartWriteDataComplete::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UartWriteDataComplete::descriptor() {
  ::protobuf_LabNetServerMessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_LabNetServerMessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UartWriteDataComplete& UartWriteDataComplete::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_LabNetServerMessages_2eproto::scc_info_UartWriteDataComplete.base);
  return *internal_default_instance();
}


void UartWriteDataComplete::Clear() {
// @@protoc_insertion_point(message_clear_start:LabNet.Messages.Server.UartWriteDataComplete)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  portid_ = 0u;
  _internal_metadata_.Clear();
}

bool UartWriteDataComplete::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LabNet.Messages.Server.UartWriteDataComplete)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 portId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &portid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LabNet.Messages.Server.UartWriteDataComplete)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LabNet.Messages.Server.UartWriteDataComplete)
  return false;
#undef DO_
}

void UartWriteDataComplete::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LabNet.Messages.Server.UartWriteDataComplete)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 portId = 1;
  if (this->portid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->portid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:LabNet.Messages.Server.UartWriteDataComplete)
}

::google::protobuf::uint8* UartWriteDataComplete::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:LabNet.Messages.Server.UartWriteDataComplete)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 portId = 1;
  if (this->portid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->portid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LabNet.Messages.Server.UartWriteDataComplete)
  return target;
}

size_t UartWriteDataComplete::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LabNet.Messages.Server.UartWriteDataComplete)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 portId = 1;
  if (this->portid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->portid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UartWriteDataComplete::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LabNet.Messages.Server.UartWriteDataComplete)
  GOOGLE_DCHECK_NE(&from, this);
  const UartWriteDataComplete* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UartWriteDataComplete>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LabNet.Messages.Server.UartWriteDataComplete)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LabNet.Messages.Server.UartWriteDataComplete)
    MergeFrom(*source);
  }
}

void UartWriteDataComplete::MergeFrom(const UartWriteDataComplete& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LabNet.Messages.Server.UartWriteDataComplete)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.portid() != 0) {
    set_portid(from.portid());
  }
}

void UartWriteDataComplete::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LabNet.Messages.Server.UartWriteDataComplete)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UartWriteDataComplete::CopyFrom(const UartWriteDataComplete& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LabNet.Messages.Server.UartWriteDataComplete)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UartWriteDataComplete::IsInitialized() const {
  return true;
}

void UartWriteDataComplete::Swap(UartWriteDataComplete* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UartWriteDataComplete::InternalSwap(UartWriteDataComplete* other) {
  using std::swap;
  swap(portid_, other->portid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UartWriteDataComplete::GetMetadata() const {
  protobuf_LabNetServerMessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_LabNetServerMessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void OnlyOneConnectionAllowed::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OnlyOneConnectionAllowed::OnlyOneConnectionAllowed()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_LabNetServerMessages_2eproto::scc_info_OnlyOneConnectionAllowed.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:LabNet.Messages.Server.OnlyOneConnectionAllowed)
}
OnlyOneConnectionAllowed::OnlyOneConnectionAllowed(const OnlyOneConnectionAllowed& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:LabNet.Messages.Server.OnlyOneConnectionAllowed)
}

void OnlyOneConnectionAllowed::SharedCtor() {
}

OnlyOneConnectionAllowed::~OnlyOneConnectionAllowed() {
  // @@protoc_insertion_point(destructor:LabNet.Messages.Server.OnlyOneConnectionAllowed)
  SharedDtor();
}

void OnlyOneConnectionAllowed::SharedDtor() {
}

void OnlyOneConnectionAllowed::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* OnlyOneConnectionAllowed::descriptor() {
  ::protobuf_LabNetServerMessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_LabNetServerMessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OnlyOneConnectionAllowed& OnlyOneConnectionAllowed::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_LabNetServerMessages_2eproto::scc_info_OnlyOneConnectionAllowed.base);
  return *internal_default_instance();
}


void OnlyOneConnectionAllowed::Clear() {
// @@protoc_insertion_point(message_clear_start:LabNet.Messages.Server.OnlyOneConnectionAllowed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool OnlyOneConnectionAllowed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LabNet.Messages.Server.OnlyOneConnectionAllowed)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:LabNet.Messages.Server.OnlyOneConnectionAllowed)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LabNet.Messages.Server.OnlyOneConnectionAllowed)
  return false;
#undef DO_
}

void OnlyOneConnectionAllowed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LabNet.Messages.Server.OnlyOneConnectionAllowed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:LabNet.Messages.Server.OnlyOneConnectionAllowed)
}

::google::protobuf::uint8* OnlyOneConnectionAllowed::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:LabNet.Messages.Server.OnlyOneConnectionAllowed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LabNet.Messages.Server.OnlyOneConnectionAllowed)
  return target;
}

size_t OnlyOneConnectionAllowed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LabNet.Messages.Server.OnlyOneConnectionAllowed)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OnlyOneConnectionAllowed::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LabNet.Messages.Server.OnlyOneConnectionAllowed)
  GOOGLE_DCHECK_NE(&from, this);
  const OnlyOneConnectionAllowed* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OnlyOneConnectionAllowed>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LabNet.Messages.Server.OnlyOneConnectionAllowed)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LabNet.Messages.Server.OnlyOneConnectionAllowed)
    MergeFrom(*source);
  }
}

void OnlyOneConnectionAllowed::MergeFrom(const OnlyOneConnectionAllowed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LabNet.Messages.Server.OnlyOneConnectionAllowed)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void OnlyOneConnectionAllowed::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LabNet.Messages.Server.OnlyOneConnectionAllowed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OnlyOneConnectionAllowed::CopyFrom(const OnlyOneConnectionAllowed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LabNet.Messages.Server.OnlyOneConnectionAllowed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OnlyOneConnectionAllowed::IsInitialized() const {
  return true;
}

void OnlyOneConnectionAllowed::Swap(OnlyOneConnectionAllowed* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OnlyOneConnectionAllowed::InternalSwap(OnlyOneConnectionAllowed* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata OnlyOneConnectionAllowed::GetMetadata() const {
  protobuf_LabNetServerMessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_LabNetServerMessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ServerWrappedMessage::InitAsDefaultInstance() {
  ::LabNet::Messages::Server::_ServerWrappedMessage_default_instance_.gpio_init_result_ = const_cast< ::LabNet::Messages::Server::GpioInitResult*>(
      ::LabNet::Messages::Server::GpioInitResult::internal_default_instance());
  ::LabNet::Messages::Server::_ServerWrappedMessage_default_instance_.gpio_digital_in_init_result_ = const_cast< ::LabNet::Messages::Server::GpioDigitalInInitResult*>(
      ::LabNet::Messages::Server::GpioDigitalInInitResult::internal_default_instance());
  ::LabNet::Messages::Server::_ServerWrappedMessage_default_instance_.gpio_digital_out_init_result_ = const_cast< ::LabNet::Messages::Server::GpioDigitalOutInitResult*>(
      ::LabNet::Messages::Server::GpioDigitalOutInitResult::internal_default_instance());
  ::LabNet::Messages::Server::_ServerWrappedMessage_default_instance_.gpio_digital_out_state_ = const_cast< ::LabNet::Messages::Server::GpioDigitalOutState*>(
      ::LabNet::Messages::Server::GpioDigitalOutState::internal_default_instance());
  ::LabNet::Messages::Server::_ServerWrappedMessage_default_instance_.gpio_digital_in_state_ = const_cast< ::LabNet::Messages::Server::GpioDigitalInState*>(
      ::LabNet::Messages::Server::GpioDigitalInState::internal_default_instance());
  ::LabNet::Messages::Server::_ServerWrappedMessage_default_instance_.sam32_init_result_ = const_cast< ::LabNet::Messages::Server::Sam32InitResult*>(
      ::LabNet::Messages::Server::Sam32InitResult::internal_default_instance());
  ::LabNet::Messages::Server::_ServerWrappedMessage_default_instance_.uart_init_result_ = const_cast< ::LabNet::Messages::Server::UartInitResult*>(
      ::LabNet::Messages::Server::UartInitResult::internal_default_instance());
  ::LabNet::Messages::Server::_ServerWrappedMessage_default_instance_.uart_new_data_ = const_cast< ::LabNet::Messages::Server::UartNewData*>(
      ::LabNet::Messages::Server::UartNewData::internal_default_instance());
  ::LabNet::Messages::Server::_ServerWrappedMessage_default_instance_.uart_write_data_complete_ = const_cast< ::LabNet::Messages::Server::UartWriteDataComplete*>(
      ::LabNet::Messages::Server::UartWriteDataComplete::internal_default_instance());
  ::LabNet::Messages::Server::_ServerWrappedMessage_default_instance_.only_one_connection_ = const_cast< ::LabNet::Messages::Server::OnlyOneConnectionAllowed*>(
      ::LabNet::Messages::Server::OnlyOneConnectionAllowed::internal_default_instance());
}
void ServerWrappedMessage::set_allocated_gpio_init_result(::LabNet::Messages::Server::GpioInitResult* gpio_init_result) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_server_message();
  if (gpio_init_result) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      gpio_init_result = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, gpio_init_result, submessage_arena);
    }
    set_has_gpio_init_result();
    server_message_.gpio_init_result_ = gpio_init_result;
  }
  // @@protoc_insertion_point(field_set_allocated:LabNet.Messages.Server.ServerWrappedMessage.gpio_init_result)
}
void ServerWrappedMessage::set_allocated_gpio_digital_in_init_result(::LabNet::Messages::Server::GpioDigitalInInitResult* gpio_digital_in_init_result) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_server_message();
  if (gpio_digital_in_init_result) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      gpio_digital_in_init_result = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, gpio_digital_in_init_result, submessage_arena);
    }
    set_has_gpio_digital_in_init_result();
    server_message_.gpio_digital_in_init_result_ = gpio_digital_in_init_result;
  }
  // @@protoc_insertion_point(field_set_allocated:LabNet.Messages.Server.ServerWrappedMessage.gpio_digital_in_init_result)
}
void ServerWrappedMessage::set_allocated_gpio_digital_out_init_result(::LabNet::Messages::Server::GpioDigitalOutInitResult* gpio_digital_out_init_result) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_server_message();
  if (gpio_digital_out_init_result) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      gpio_digital_out_init_result = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, gpio_digital_out_init_result, submessage_arena);
    }
    set_has_gpio_digital_out_init_result();
    server_message_.gpio_digital_out_init_result_ = gpio_digital_out_init_result;
  }
  // @@protoc_insertion_point(field_set_allocated:LabNet.Messages.Server.ServerWrappedMessage.gpio_digital_out_init_result)
}
void ServerWrappedMessage::set_allocated_gpio_digital_out_state(::LabNet::Messages::Server::GpioDigitalOutState* gpio_digital_out_state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_server_message();
  if (gpio_digital_out_state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      gpio_digital_out_state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, gpio_digital_out_state, submessage_arena);
    }
    set_has_gpio_digital_out_state();
    server_message_.gpio_digital_out_state_ = gpio_digital_out_state;
  }
  // @@protoc_insertion_point(field_set_allocated:LabNet.Messages.Server.ServerWrappedMessage.gpio_digital_out_state)
}
void ServerWrappedMessage::set_allocated_gpio_digital_in_state(::LabNet::Messages::Server::GpioDigitalInState* gpio_digital_in_state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_server_message();
  if (gpio_digital_in_state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      gpio_digital_in_state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, gpio_digital_in_state, submessage_arena);
    }
    set_has_gpio_digital_in_state();
    server_message_.gpio_digital_in_state_ = gpio_digital_in_state;
  }
  // @@protoc_insertion_point(field_set_allocated:LabNet.Messages.Server.ServerWrappedMessage.gpio_digital_in_state)
}
void ServerWrappedMessage::set_allocated_sam32_init_result(::LabNet::Messages::Server::Sam32InitResult* sam32_init_result) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_server_message();
  if (sam32_init_result) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      sam32_init_result = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sam32_init_result, submessage_arena);
    }
    set_has_sam32_init_result();
    server_message_.sam32_init_result_ = sam32_init_result;
  }
  // @@protoc_insertion_point(field_set_allocated:LabNet.Messages.Server.ServerWrappedMessage.sam32_init_result)
}
void ServerWrappedMessage::set_allocated_uart_init_result(::LabNet::Messages::Server::UartInitResult* uart_init_result) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_server_message();
  if (uart_init_result) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      uart_init_result = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, uart_init_result, submessage_arena);
    }
    set_has_uart_init_result();
    server_message_.uart_init_result_ = uart_init_result;
  }
  // @@protoc_insertion_point(field_set_allocated:LabNet.Messages.Server.ServerWrappedMessage.uart_init_result)
}
void ServerWrappedMessage::set_allocated_uart_new_data(::LabNet::Messages::Server::UartNewData* uart_new_data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_server_message();
  if (uart_new_data) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      uart_new_data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, uart_new_data, submessage_arena);
    }
    set_has_uart_new_data();
    server_message_.uart_new_data_ = uart_new_data;
  }
  // @@protoc_insertion_point(field_set_allocated:LabNet.Messages.Server.ServerWrappedMessage.uart_new_data)
}
void ServerWrappedMessage::set_allocated_uart_write_data_complete(::LabNet::Messages::Server::UartWriteDataComplete* uart_write_data_complete) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_server_message();
  if (uart_write_data_complete) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      uart_write_data_complete = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, uart_write_data_complete, submessage_arena);
    }
    set_has_uart_write_data_complete();
    server_message_.uart_write_data_complete_ = uart_write_data_complete;
  }
  // @@protoc_insertion_point(field_set_allocated:LabNet.Messages.Server.ServerWrappedMessage.uart_write_data_complete)
}
void ServerWrappedMessage::set_allocated_only_one_connection(::LabNet::Messages::Server::OnlyOneConnectionAllowed* only_one_connection) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_server_message();
  if (only_one_connection) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      only_one_connection = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, only_one_connection, submessage_arena);
    }
    set_has_only_one_connection();
    server_message_.only_one_connection_ = only_one_connection;
  }
  // @@protoc_insertion_point(field_set_allocated:LabNet.Messages.Server.ServerWrappedMessage.only_one_connection)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerWrappedMessage::kGpioInitResultFieldNumber;
const int ServerWrappedMessage::kGpioDigitalInInitResultFieldNumber;
const int ServerWrappedMessage::kGpioDigitalOutInitResultFieldNumber;
const int ServerWrappedMessage::kGpioDigitalOutStateFieldNumber;
const int ServerWrappedMessage::kGpioDigitalInStateFieldNumber;
const int ServerWrappedMessage::kSam32InitResultFieldNumber;
const int ServerWrappedMessage::kUartInitResultFieldNumber;
const int ServerWrappedMessage::kUartNewDataFieldNumber;
const int ServerWrappedMessage::kUartWriteDataCompleteFieldNumber;
const int ServerWrappedMessage::kOnlyOneConnectionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerWrappedMessage::ServerWrappedMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_LabNetServerMessages_2eproto::scc_info_ServerWrappedMessage.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:LabNet.Messages.Server.ServerWrappedMessage)
}
ServerWrappedMessage::ServerWrappedMessage(const ServerWrappedMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_server_message();
  switch (from.server_message_case()) {
    case kGpioInitResult: {
      mutable_gpio_init_result()->::LabNet::Messages::Server::GpioInitResult::MergeFrom(from.gpio_init_result());
      break;
    }
    case kGpioDigitalInInitResult: {
      mutable_gpio_digital_in_init_result()->::LabNet::Messages::Server::GpioDigitalInInitResult::MergeFrom(from.gpio_digital_in_init_result());
      break;
    }
    case kGpioDigitalOutInitResult: {
      mutable_gpio_digital_out_init_result()->::LabNet::Messages::Server::GpioDigitalOutInitResult::MergeFrom(from.gpio_digital_out_init_result());
      break;
    }
    case kGpioDigitalOutState: {
      mutable_gpio_digital_out_state()->::LabNet::Messages::Server::GpioDigitalOutState::MergeFrom(from.gpio_digital_out_state());
      break;
    }
    case kGpioDigitalInState: {
      mutable_gpio_digital_in_state()->::LabNet::Messages::Server::GpioDigitalInState::MergeFrom(from.gpio_digital_in_state());
      break;
    }
    case kSam32InitResult: {
      mutable_sam32_init_result()->::LabNet::Messages::Server::Sam32InitResult::MergeFrom(from.sam32_init_result());
      break;
    }
    case kUartInitResult: {
      mutable_uart_init_result()->::LabNet::Messages::Server::UartInitResult::MergeFrom(from.uart_init_result());
      break;
    }
    case kUartNewData: {
      mutable_uart_new_data()->::LabNet::Messages::Server::UartNewData::MergeFrom(from.uart_new_data());
      break;
    }
    case kUartWriteDataComplete: {
      mutable_uart_write_data_complete()->::LabNet::Messages::Server::UartWriteDataComplete::MergeFrom(from.uart_write_data_complete());
      break;
    }
    case kOnlyOneConnection: {
      mutable_only_one_connection()->::LabNet::Messages::Server::OnlyOneConnectionAllowed::MergeFrom(from.only_one_connection());
      break;
    }
    case SERVER_MESSAGE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:LabNet.Messages.Server.ServerWrappedMessage)
}

void ServerWrappedMessage::SharedCtor() {
  clear_has_server_message();
}

ServerWrappedMessage::~ServerWrappedMessage() {
  // @@protoc_insertion_point(destructor:LabNet.Messages.Server.ServerWrappedMessage)
  SharedDtor();
}

void ServerWrappedMessage::SharedDtor() {
  if (has_server_message()) {
    clear_server_message();
  }
}

void ServerWrappedMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ServerWrappedMessage::descriptor() {
  ::protobuf_LabNetServerMessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_LabNetServerMessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ServerWrappedMessage& ServerWrappedMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_LabNetServerMessages_2eproto::scc_info_ServerWrappedMessage.base);
  return *internal_default_instance();
}


void ServerWrappedMessage::clear_server_message() {
// @@protoc_insertion_point(one_of_clear_start:LabNet.Messages.Server.ServerWrappedMessage)
  switch (server_message_case()) {
    case kGpioInitResult: {
      delete server_message_.gpio_init_result_;
      break;
    }
    case kGpioDigitalInInitResult: {
      delete server_message_.gpio_digital_in_init_result_;
      break;
    }
    case kGpioDigitalOutInitResult: {
      delete server_message_.gpio_digital_out_init_result_;
      break;
    }
    case kGpioDigitalOutState: {
      delete server_message_.gpio_digital_out_state_;
      break;
    }
    case kGpioDigitalInState: {
      delete server_message_.gpio_digital_in_state_;
      break;
    }
    case kSam32InitResult: {
      delete server_message_.sam32_init_result_;
      break;
    }
    case kUartInitResult: {
      delete server_message_.uart_init_result_;
      break;
    }
    case kUartNewData: {
      delete server_message_.uart_new_data_;
      break;
    }
    case kUartWriteDataComplete: {
      delete server_message_.uart_write_data_complete_;
      break;
    }
    case kOnlyOneConnection: {
      delete server_message_.only_one_connection_;
      break;
    }
    case SERVER_MESSAGE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SERVER_MESSAGE_NOT_SET;
}


void ServerWrappedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:LabNet.Messages.Server.ServerWrappedMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_server_message();
  _internal_metadata_.Clear();
}

bool ServerWrappedMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LabNet.Messages.Server.ServerWrappedMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .LabNet.Messages.Server.GpioInitResult gpio_init_result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_gpio_init_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .LabNet.Messages.Server.GpioDigitalInInitResult gpio_digital_in_init_result = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_gpio_digital_in_init_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .LabNet.Messages.Server.GpioDigitalOutInitResult gpio_digital_out_init_result = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_gpio_digital_out_init_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .LabNet.Messages.Server.GpioDigitalOutState gpio_digital_out_state = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_gpio_digital_out_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .LabNet.Messages.Server.GpioDigitalInState gpio_digital_in_state = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_gpio_digital_in_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .LabNet.Messages.Server.Sam32InitResult sam32_init_result = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sam32_init_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .LabNet.Messages.Server.UartInitResult uart_init_result = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_uart_init_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .LabNet.Messages.Server.UartNewData uart_new_data = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_uart_new_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .LabNet.Messages.Server.UartWriteDataComplete uart_write_data_complete = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_uart_write_data_complete()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .LabNet.Messages.Server.OnlyOneConnectionAllowed only_one_connection = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_only_one_connection()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LabNet.Messages.Server.ServerWrappedMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LabNet.Messages.Server.ServerWrappedMessage)
  return false;
#undef DO_
}

void ServerWrappedMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LabNet.Messages.Server.ServerWrappedMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .LabNet.Messages.Server.GpioInitResult gpio_init_result = 1;
  if (has_gpio_init_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_gpio_init_result(), output);
  }

  // .LabNet.Messages.Server.GpioDigitalInInitResult gpio_digital_in_init_result = 2;
  if (has_gpio_digital_in_init_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_gpio_digital_in_init_result(), output);
  }

  // .LabNet.Messages.Server.GpioDigitalOutInitResult gpio_digital_out_init_result = 3;
  if (has_gpio_digital_out_init_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_gpio_digital_out_init_result(), output);
  }

  // .LabNet.Messages.Server.GpioDigitalOutState gpio_digital_out_state = 4;
  if (has_gpio_digital_out_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_gpio_digital_out_state(), output);
  }

  // .LabNet.Messages.Server.GpioDigitalInState gpio_digital_in_state = 5;
  if (has_gpio_digital_in_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_gpio_digital_in_state(), output);
  }

  // .LabNet.Messages.Server.Sam32InitResult sam32_init_result = 6;
  if (has_sam32_init_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_sam32_init_result(), output);
  }

  // .LabNet.Messages.Server.UartInitResult uart_init_result = 7;
  if (has_uart_init_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_uart_init_result(), output);
  }

  // .LabNet.Messages.Server.UartNewData uart_new_data = 8;
  if (has_uart_new_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_internal_uart_new_data(), output);
  }

  // .LabNet.Messages.Server.UartWriteDataComplete uart_write_data_complete = 9;
  if (has_uart_write_data_complete()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->_internal_uart_write_data_complete(), output);
  }

  // .LabNet.Messages.Server.OnlyOneConnectionAllowed only_one_connection = 10;
  if (has_only_one_connection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->_internal_only_one_connection(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:LabNet.Messages.Server.ServerWrappedMessage)
}

::google::protobuf::uint8* ServerWrappedMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:LabNet.Messages.Server.ServerWrappedMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .LabNet.Messages.Server.GpioInitResult gpio_init_result = 1;
  if (has_gpio_init_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_gpio_init_result(), deterministic, target);
  }

  // .LabNet.Messages.Server.GpioDigitalInInitResult gpio_digital_in_init_result = 2;
  if (has_gpio_digital_in_init_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_gpio_digital_in_init_result(), deterministic, target);
  }

  // .LabNet.Messages.Server.GpioDigitalOutInitResult gpio_digital_out_init_result = 3;
  if (has_gpio_digital_out_init_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_gpio_digital_out_init_result(), deterministic, target);
  }

  // .LabNet.Messages.Server.GpioDigitalOutState gpio_digital_out_state = 4;
  if (has_gpio_digital_out_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_gpio_digital_out_state(), deterministic, target);
  }

  // .LabNet.Messages.Server.GpioDigitalInState gpio_digital_in_state = 5;
  if (has_gpio_digital_in_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_gpio_digital_in_state(), deterministic, target);
  }

  // .LabNet.Messages.Server.Sam32InitResult sam32_init_result = 6;
  if (has_sam32_init_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_sam32_init_result(), deterministic, target);
  }

  // .LabNet.Messages.Server.UartInitResult uart_init_result = 7;
  if (has_uart_init_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_uart_init_result(), deterministic, target);
  }

  // .LabNet.Messages.Server.UartNewData uart_new_data = 8;
  if (has_uart_new_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->_internal_uart_new_data(), deterministic, target);
  }

  // .LabNet.Messages.Server.UartWriteDataComplete uart_write_data_complete = 9;
  if (has_uart_write_data_complete()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->_internal_uart_write_data_complete(), deterministic, target);
  }

  // .LabNet.Messages.Server.OnlyOneConnectionAllowed only_one_connection = 10;
  if (has_only_one_connection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->_internal_only_one_connection(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LabNet.Messages.Server.ServerWrappedMessage)
  return target;
}

size_t ServerWrappedMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LabNet.Messages.Server.ServerWrappedMessage)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  switch (server_message_case()) {
    // .LabNet.Messages.Server.GpioInitResult gpio_init_result = 1;
    case kGpioInitResult: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *server_message_.gpio_init_result_);
      break;
    }
    // .LabNet.Messages.Server.GpioDigitalInInitResult gpio_digital_in_init_result = 2;
    case kGpioDigitalInInitResult: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *server_message_.gpio_digital_in_init_result_);
      break;
    }
    // .LabNet.Messages.Server.GpioDigitalOutInitResult gpio_digital_out_init_result = 3;
    case kGpioDigitalOutInitResult: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *server_message_.gpio_digital_out_init_result_);
      break;
    }
    // .LabNet.Messages.Server.GpioDigitalOutState gpio_digital_out_state = 4;
    case kGpioDigitalOutState: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *server_message_.gpio_digital_out_state_);
      break;
    }
    // .LabNet.Messages.Server.GpioDigitalInState gpio_digital_in_state = 5;
    case kGpioDigitalInState: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *server_message_.gpio_digital_in_state_);
      break;
    }
    // .LabNet.Messages.Server.Sam32InitResult sam32_init_result = 6;
    case kSam32InitResult: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *server_message_.sam32_init_result_);
      break;
    }
    // .LabNet.Messages.Server.UartInitResult uart_init_result = 7;
    case kUartInitResult: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *server_message_.uart_init_result_);
      break;
    }
    // .LabNet.Messages.Server.UartNewData uart_new_data = 8;
    case kUartNewData: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *server_message_.uart_new_data_);
      break;
    }
    // .LabNet.Messages.Server.UartWriteDataComplete uart_write_data_complete = 9;
    case kUartWriteDataComplete: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *server_message_.uart_write_data_complete_);
      break;
    }
    // .LabNet.Messages.Server.OnlyOneConnectionAllowed only_one_connection = 10;
    case kOnlyOneConnection: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *server_message_.only_one_connection_);
      break;
    }
    case SERVER_MESSAGE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerWrappedMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LabNet.Messages.Server.ServerWrappedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerWrappedMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServerWrappedMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LabNet.Messages.Server.ServerWrappedMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LabNet.Messages.Server.ServerWrappedMessage)
    MergeFrom(*source);
  }
}

void ServerWrappedMessage::MergeFrom(const ServerWrappedMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LabNet.Messages.Server.ServerWrappedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.server_message_case()) {
    case kGpioInitResult: {
      mutable_gpio_init_result()->::LabNet::Messages::Server::GpioInitResult::MergeFrom(from.gpio_init_result());
      break;
    }
    case kGpioDigitalInInitResult: {
      mutable_gpio_digital_in_init_result()->::LabNet::Messages::Server::GpioDigitalInInitResult::MergeFrom(from.gpio_digital_in_init_result());
      break;
    }
    case kGpioDigitalOutInitResult: {
      mutable_gpio_digital_out_init_result()->::LabNet::Messages::Server::GpioDigitalOutInitResult::MergeFrom(from.gpio_digital_out_init_result());
      break;
    }
    case kGpioDigitalOutState: {
      mutable_gpio_digital_out_state()->::LabNet::Messages::Server::GpioDigitalOutState::MergeFrom(from.gpio_digital_out_state());
      break;
    }
    case kGpioDigitalInState: {
      mutable_gpio_digital_in_state()->::LabNet::Messages::Server::GpioDigitalInState::MergeFrom(from.gpio_digital_in_state());
      break;
    }
    case kSam32InitResult: {
      mutable_sam32_init_result()->::LabNet::Messages::Server::Sam32InitResult::MergeFrom(from.sam32_init_result());
      break;
    }
    case kUartInitResult: {
      mutable_uart_init_result()->::LabNet::Messages::Server::UartInitResult::MergeFrom(from.uart_init_result());
      break;
    }
    case kUartNewData: {
      mutable_uart_new_data()->::LabNet::Messages::Server::UartNewData::MergeFrom(from.uart_new_data());
      break;
    }
    case kUartWriteDataComplete: {
      mutable_uart_write_data_complete()->::LabNet::Messages::Server::UartWriteDataComplete::MergeFrom(from.uart_write_data_complete());
      break;
    }
    case kOnlyOneConnection: {
      mutable_only_one_connection()->::LabNet::Messages::Server::OnlyOneConnectionAllowed::MergeFrom(from.only_one_connection());
      break;
    }
    case SERVER_MESSAGE_NOT_SET: {
      break;
    }
  }
}

void ServerWrappedMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LabNet.Messages.Server.ServerWrappedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerWrappedMessage::CopyFrom(const ServerWrappedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LabNet.Messages.Server.ServerWrappedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerWrappedMessage::IsInitialized() const {
  return true;
}

void ServerWrappedMessage::Swap(ServerWrappedMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerWrappedMessage::InternalSwap(ServerWrappedMessage* other) {
  using std::swap;
  swap(server_message_, other->server_message_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ServerWrappedMessage::GetMetadata() const {
  protobuf_LabNetServerMessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_LabNetServerMessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Server
}  // namespace Messages
}  // namespace LabNet
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::LabNet::Messages::Server::GpioInitResult* Arena::CreateMaybeMessage< ::LabNet::Messages::Server::GpioInitResult >(Arena* arena) {
  return Arena::CreateInternal< ::LabNet::Messages::Server::GpioInitResult >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::LabNet::Messages::Server::GpioDigitalInInitResult* Arena::CreateMaybeMessage< ::LabNet::Messages::Server::GpioDigitalInInitResult >(Arena* arena) {
  return Arena::CreateInternal< ::LabNet::Messages::Server::GpioDigitalInInitResult >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::LabNet::Messages::Server::GpioDigitalOutInitResult* Arena::CreateMaybeMessage< ::LabNet::Messages::Server::GpioDigitalOutInitResult >(Arena* arena) {
  return Arena::CreateInternal< ::LabNet::Messages::Server::GpioDigitalOutInitResult >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::LabNet::Messages::Server::GpioDigitalOutState* Arena::CreateMaybeMessage< ::LabNet::Messages::Server::GpioDigitalOutState >(Arena* arena) {
  return Arena::CreateInternal< ::LabNet::Messages::Server::GpioDigitalOutState >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::LabNet::Messages::Server::GpioDigitalInState* Arena::CreateMaybeMessage< ::LabNet::Messages::Server::GpioDigitalInState >(Arena* arena) {
  return Arena::CreateInternal< ::LabNet::Messages::Server::GpioDigitalInState >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::LabNet::Messages::Server::Sam32InitResult* Arena::CreateMaybeMessage< ::LabNet::Messages::Server::Sam32InitResult >(Arena* arena) {
  return Arena::CreateInternal< ::LabNet::Messages::Server::Sam32InitResult >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::LabNet::Messages::Server::UartInitResult* Arena::CreateMaybeMessage< ::LabNet::Messages::Server::UartInitResult >(Arena* arena) {
  return Arena::CreateInternal< ::LabNet::Messages::Server::UartInitResult >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::LabNet::Messages::Server::UartNewData* Arena::CreateMaybeMessage< ::LabNet::Messages::Server::UartNewData >(Arena* arena) {
  return Arena::CreateInternal< ::LabNet::Messages::Server::UartNewData >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::LabNet::Messages::Server::UartWriteDataComplete* Arena::CreateMaybeMessage< ::LabNet::Messages::Server::UartWriteDataComplete >(Arena* arena) {
  return Arena::CreateInternal< ::LabNet::Messages::Server::UartWriteDataComplete >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::LabNet::Messages::Server::OnlyOneConnectionAllowed* Arena::CreateMaybeMessage< ::LabNet::Messages::Server::OnlyOneConnectionAllowed >(Arena* arena) {
  return Arena::CreateInternal< ::LabNet::Messages::Server::OnlyOneConnectionAllowed >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::LabNet::Messages::Server::ServerWrappedMessage* Arena::CreateMaybeMessage< ::LabNet::Messages::Server::ServerWrappedMessage >(Arena* arena) {
  return Arena::CreateInternal< ::LabNet::Messages::Server::ServerWrappedMessage >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
