// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LabNetClientMessages.proto

#ifndef PROTOBUF_INCLUDED_LabNetClientMessages_2eproto
#define PROTOBUF_INCLUDED_LabNetClientMessages_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_LabNetClientMessages_2eproto 

namespace protobuf_LabNetClientMessages_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[10];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_LabNetClientMessages_2eproto
namespace LabNet {
namespace Messages {
namespace Client {
class ClientWrappedMessage;
class ClientWrappedMessageDefaultTypeInternal;
extern ClientWrappedMessageDefaultTypeInternal _ClientWrappedMessage_default_instance_;
class GpioInit;
class GpioInitDefaultTypeInternal;
extern GpioInitDefaultTypeInternal _GpioInit_default_instance_;
class GpioInitDigitalIn;
class GpioInitDigitalInDefaultTypeInternal;
extern GpioInitDigitalInDefaultTypeInternal _GpioInitDigitalIn_default_instance_;
class GpioInitDigitalOut;
class GpioInitDigitalOutDefaultTypeInternal;
extern GpioInitDigitalOutDefaultTypeInternal _GpioInitDigitalOut_default_instance_;
class GpioSetDigitalOut;
class GpioSetDigitalOutDefaultTypeInternal;
extern GpioSetDigitalOutDefaultTypeInternal _GpioSetDigitalOut_default_instance_;
class Sam32Init;
class Sam32InitDefaultTypeInternal;
extern Sam32InitDefaultTypeInternal _Sam32Init_default_instance_;
class Sam32SetPhaseMatrix;
class Sam32SetPhaseMatrixDefaultTypeInternal;
extern Sam32SetPhaseMatrixDefaultTypeInternal _Sam32SetPhaseMatrix_default_instance_;
class Sam32SetSignalInversion;
class Sam32SetSignalInversionDefaultTypeInternal;
extern Sam32SetSignalInversionDefaultTypeInternal _Sam32SetSignalInversion_default_instance_;
class UartInit;
class UartInitDefaultTypeInternal;
extern UartInitDefaultTypeInternal _UartInit_default_instance_;
class UartWriteData;
class UartWriteDataDefaultTypeInternal;
extern UartWriteDataDefaultTypeInternal _UartWriteData_default_instance_;
}  // namespace Client
}  // namespace Messages
}  // namespace LabNet
namespace google {
namespace protobuf {
template<> ::LabNet::Messages::Client::ClientWrappedMessage* Arena::CreateMaybeMessage<::LabNet::Messages::Client::ClientWrappedMessage>(Arena*);
template<> ::LabNet::Messages::Client::GpioInit* Arena::CreateMaybeMessage<::LabNet::Messages::Client::GpioInit>(Arena*);
template<> ::LabNet::Messages::Client::GpioInitDigitalIn* Arena::CreateMaybeMessage<::LabNet::Messages::Client::GpioInitDigitalIn>(Arena*);
template<> ::LabNet::Messages::Client::GpioInitDigitalOut* Arena::CreateMaybeMessage<::LabNet::Messages::Client::GpioInitDigitalOut>(Arena*);
template<> ::LabNet::Messages::Client::GpioSetDigitalOut* Arena::CreateMaybeMessage<::LabNet::Messages::Client::GpioSetDigitalOut>(Arena*);
template<> ::LabNet::Messages::Client::Sam32Init* Arena::CreateMaybeMessage<::LabNet::Messages::Client::Sam32Init>(Arena*);
template<> ::LabNet::Messages::Client::Sam32SetPhaseMatrix* Arena::CreateMaybeMessage<::LabNet::Messages::Client::Sam32SetPhaseMatrix>(Arena*);
template<> ::LabNet::Messages::Client::Sam32SetSignalInversion* Arena::CreateMaybeMessage<::LabNet::Messages::Client::Sam32SetSignalInversion>(Arena*);
template<> ::LabNet::Messages::Client::UartInit* Arena::CreateMaybeMessage<::LabNet::Messages::Client::UartInit>(Arena*);
template<> ::LabNet::Messages::Client::UartWriteData* Arena::CreateMaybeMessage<::LabNet::Messages::Client::UartWriteData>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace LabNet {
namespace Messages {
namespace Client {

enum GpioInitDigitalIn_Resistor {
  GpioInitDigitalIn_Resistor_OFF = 0,
  GpioInitDigitalIn_Resistor_PULL_DOWN = 1,
  GpioInitDigitalIn_Resistor_PULL_UP = 2,
  GpioInitDigitalIn_Resistor_GpioInitDigitalIn_Resistor_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  GpioInitDigitalIn_Resistor_GpioInitDigitalIn_Resistor_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool GpioInitDigitalIn_Resistor_IsValid(int value);
const GpioInitDigitalIn_Resistor GpioInitDigitalIn_Resistor_Resistor_MIN = GpioInitDigitalIn_Resistor_OFF;
const GpioInitDigitalIn_Resistor GpioInitDigitalIn_Resistor_Resistor_MAX = GpioInitDigitalIn_Resistor_PULL_UP;
const int GpioInitDigitalIn_Resistor_Resistor_ARRAYSIZE = GpioInitDigitalIn_Resistor_Resistor_MAX + 1;

const ::google::protobuf::EnumDescriptor* GpioInitDigitalIn_Resistor_descriptor();
inline const ::std::string& GpioInitDigitalIn_Resistor_Name(GpioInitDigitalIn_Resistor value) {
  return ::google::protobuf::internal::NameOfEnum(
    GpioInitDigitalIn_Resistor_descriptor(), value);
}
inline bool GpioInitDigitalIn_Resistor_Parse(
    const ::std::string& name, GpioInitDigitalIn_Resistor* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GpioInitDigitalIn_Resistor>(
    GpioInitDigitalIn_Resistor_descriptor(), name, value);
}
// ===================================================================

class GpioInit : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LabNet.Messages.Client.GpioInit) */ {
 public:
  GpioInit();
  virtual ~GpioInit();

  GpioInit(const GpioInit& from);

  inline GpioInit& operator=(const GpioInit& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GpioInit(GpioInit&& from) noexcept
    : GpioInit() {
    *this = ::std::move(from);
  }

  inline GpioInit& operator=(GpioInit&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GpioInit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GpioInit* internal_default_instance() {
    return reinterpret_cast<const GpioInit*>(
               &_GpioInit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(GpioInit* other);
  friend void swap(GpioInit& a, GpioInit& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GpioInit* New() const final {
    return CreateMaybeMessage<GpioInit>(NULL);
  }

  GpioInit* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GpioInit>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GpioInit& from);
  void MergeFrom(const GpioInit& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GpioInit* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:LabNet.Messages.Client.GpioInit)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_LabNetClientMessages_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GpioInitDigitalIn : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LabNet.Messages.Client.GpioInitDigitalIn) */ {
 public:
  GpioInitDigitalIn();
  virtual ~GpioInitDigitalIn();

  GpioInitDigitalIn(const GpioInitDigitalIn& from);

  inline GpioInitDigitalIn& operator=(const GpioInitDigitalIn& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GpioInitDigitalIn(GpioInitDigitalIn&& from) noexcept
    : GpioInitDigitalIn() {
    *this = ::std::move(from);
  }

  inline GpioInitDigitalIn& operator=(GpioInitDigitalIn&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GpioInitDigitalIn& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GpioInitDigitalIn* internal_default_instance() {
    return reinterpret_cast<const GpioInitDigitalIn*>(
               &_GpioInitDigitalIn_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(GpioInitDigitalIn* other);
  friend void swap(GpioInitDigitalIn& a, GpioInitDigitalIn& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GpioInitDigitalIn* New() const final {
    return CreateMaybeMessage<GpioInitDigitalIn>(NULL);
  }

  GpioInitDigitalIn* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GpioInitDigitalIn>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GpioInitDigitalIn& from);
  void MergeFrom(const GpioInitDigitalIn& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GpioInitDigitalIn* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GpioInitDigitalIn_Resistor Resistor;
  static const Resistor OFF =
    GpioInitDigitalIn_Resistor_OFF;
  static const Resistor PULL_DOWN =
    GpioInitDigitalIn_Resistor_PULL_DOWN;
  static const Resistor PULL_UP =
    GpioInitDigitalIn_Resistor_PULL_UP;
  static inline bool Resistor_IsValid(int value) {
    return GpioInitDigitalIn_Resistor_IsValid(value);
  }
  static const Resistor Resistor_MIN =
    GpioInitDigitalIn_Resistor_Resistor_MIN;
  static const Resistor Resistor_MAX =
    GpioInitDigitalIn_Resistor_Resistor_MAX;
  static const int Resistor_ARRAYSIZE =
    GpioInitDigitalIn_Resistor_Resistor_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Resistor_descriptor() {
    return GpioInitDigitalIn_Resistor_descriptor();
  }
  static inline const ::std::string& Resistor_Name(Resistor value) {
    return GpioInitDigitalIn_Resistor_Name(value);
  }
  static inline bool Resistor_Parse(const ::std::string& name,
      Resistor* value) {
    return GpioInitDigitalIn_Resistor_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // uint32 pin = 1;
  void clear_pin();
  static const int kPinFieldNumber = 1;
  ::google::protobuf::uint32 pin() const;
  void set_pin(::google::protobuf::uint32 value);

  // .LabNet.Messages.Client.GpioInitDigitalIn.Resistor resistor_state = 2;
  void clear_resistor_state();
  static const int kResistorStateFieldNumber = 2;
  ::LabNet::Messages::Client::GpioInitDigitalIn_Resistor resistor_state() const;
  void set_resistor_state(::LabNet::Messages::Client::GpioInitDigitalIn_Resistor value);

  // bool is_inverted = 3;
  void clear_is_inverted();
  static const int kIsInvertedFieldNumber = 3;
  bool is_inverted() const;
  void set_is_inverted(bool value);

  // @@protoc_insertion_point(class_scope:LabNet.Messages.Client.GpioInitDigitalIn)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 pin_;
  int resistor_state_;
  bool is_inverted_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_LabNetClientMessages_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GpioInitDigitalOut : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LabNet.Messages.Client.GpioInitDigitalOut) */ {
 public:
  GpioInitDigitalOut();
  virtual ~GpioInitDigitalOut();

  GpioInitDigitalOut(const GpioInitDigitalOut& from);

  inline GpioInitDigitalOut& operator=(const GpioInitDigitalOut& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GpioInitDigitalOut(GpioInitDigitalOut&& from) noexcept
    : GpioInitDigitalOut() {
    *this = ::std::move(from);
  }

  inline GpioInitDigitalOut& operator=(GpioInitDigitalOut&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GpioInitDigitalOut& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GpioInitDigitalOut* internal_default_instance() {
    return reinterpret_cast<const GpioInitDigitalOut*>(
               &_GpioInitDigitalOut_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(GpioInitDigitalOut* other);
  friend void swap(GpioInitDigitalOut& a, GpioInitDigitalOut& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GpioInitDigitalOut* New() const final {
    return CreateMaybeMessage<GpioInitDigitalOut>(NULL);
  }

  GpioInitDigitalOut* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GpioInitDigitalOut>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GpioInitDigitalOut& from);
  void MergeFrom(const GpioInitDigitalOut& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GpioInitDigitalOut* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 pin = 1;
  void clear_pin();
  static const int kPinFieldNumber = 1;
  ::google::protobuf::uint32 pin() const;
  void set_pin(::google::protobuf::uint32 value);

  // bool is_inverted = 2;
  void clear_is_inverted();
  static const int kIsInvertedFieldNumber = 2;
  bool is_inverted() const;
  void set_is_inverted(bool value);

  // @@protoc_insertion_point(class_scope:LabNet.Messages.Client.GpioInitDigitalOut)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 pin_;
  bool is_inverted_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_LabNetClientMessages_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GpioSetDigitalOut : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LabNet.Messages.Client.GpioSetDigitalOut) */ {
 public:
  GpioSetDigitalOut();
  virtual ~GpioSetDigitalOut();

  GpioSetDigitalOut(const GpioSetDigitalOut& from);

  inline GpioSetDigitalOut& operator=(const GpioSetDigitalOut& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GpioSetDigitalOut(GpioSetDigitalOut&& from) noexcept
    : GpioSetDigitalOut() {
    *this = ::std::move(from);
  }

  inline GpioSetDigitalOut& operator=(GpioSetDigitalOut&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GpioSetDigitalOut& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GpioSetDigitalOut* internal_default_instance() {
    return reinterpret_cast<const GpioSetDigitalOut*>(
               &_GpioSetDigitalOut_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(GpioSetDigitalOut* other);
  friend void swap(GpioSetDigitalOut& a, GpioSetDigitalOut& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GpioSetDigitalOut* New() const final {
    return CreateMaybeMessage<GpioSetDigitalOut>(NULL);
  }

  GpioSetDigitalOut* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GpioSetDigitalOut>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GpioSetDigitalOut& from);
  void MergeFrom(const GpioSetDigitalOut& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GpioSetDigitalOut* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 pin = 1;
  void clear_pin();
  static const int kPinFieldNumber = 1;
  ::google::protobuf::uint32 pin() const;
  void set_pin(::google::protobuf::uint32 value);

  // bool state = 2;
  void clear_state();
  static const int kStateFieldNumber = 2;
  bool state() const;
  void set_state(bool value);

  // @@protoc_insertion_point(class_scope:LabNet.Messages.Client.GpioSetDigitalOut)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 pin_;
  bool state_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_LabNetClientMessages_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Sam32Init : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LabNet.Messages.Client.Sam32Init) */ {
 public:
  Sam32Init();
  virtual ~Sam32Init();

  Sam32Init(const Sam32Init& from);

  inline Sam32Init& operator=(const Sam32Init& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Sam32Init(Sam32Init&& from) noexcept
    : Sam32Init() {
    *this = ::std::move(from);
  }

  inline Sam32Init& operator=(Sam32Init&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Sam32Init& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Sam32Init* internal_default_instance() {
    return reinterpret_cast<const Sam32Init*>(
               &_Sam32Init_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(Sam32Init* other);
  friend void swap(Sam32Init& a, Sam32Init& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Sam32Init* New() const final {
    return CreateMaybeMessage<Sam32Init>(NULL);
  }

  Sam32Init* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Sam32Init>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Sam32Init& from);
  void MergeFrom(const Sam32Init& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Sam32Init* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 antenna_phase1 = 1;
  void clear_antenna_phase1();
  static const int kAntennaPhase1FieldNumber = 1;
  ::google::protobuf::uint32 antenna_phase1() const;
  void set_antenna_phase1(::google::protobuf::uint32 value);

  // uint32 antenna_phase2 = 2;
  void clear_antenna_phase2();
  static const int kAntennaPhase2FieldNumber = 2;
  ::google::protobuf::uint32 antenna_phase2() const;
  void set_antenna_phase2(::google::protobuf::uint32 value);

  // uint32 phase_duration = 3;
  void clear_phase_duration();
  static const int kPhaseDurationFieldNumber = 3;
  ::google::protobuf::uint32 phase_duration() const;
  void set_phase_duration(::google::protobuf::uint32 value);

  // bool inverted = 4;
  void clear_inverted();
  static const int kInvertedFieldNumber = 4;
  bool inverted() const;
  void set_inverted(bool value);

  // @@protoc_insertion_point(class_scope:LabNet.Messages.Client.Sam32Init)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 antenna_phase1_;
  ::google::protobuf::uint32 antenna_phase2_;
  ::google::protobuf::uint32 phase_duration_;
  bool inverted_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_LabNetClientMessages_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Sam32SetPhaseMatrix : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LabNet.Messages.Client.Sam32SetPhaseMatrix) */ {
 public:
  Sam32SetPhaseMatrix();
  virtual ~Sam32SetPhaseMatrix();

  Sam32SetPhaseMatrix(const Sam32SetPhaseMatrix& from);

  inline Sam32SetPhaseMatrix& operator=(const Sam32SetPhaseMatrix& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Sam32SetPhaseMatrix(Sam32SetPhaseMatrix&& from) noexcept
    : Sam32SetPhaseMatrix() {
    *this = ::std::move(from);
  }

  inline Sam32SetPhaseMatrix& operator=(Sam32SetPhaseMatrix&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Sam32SetPhaseMatrix& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Sam32SetPhaseMatrix* internal_default_instance() {
    return reinterpret_cast<const Sam32SetPhaseMatrix*>(
               &_Sam32SetPhaseMatrix_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(Sam32SetPhaseMatrix* other);
  friend void swap(Sam32SetPhaseMatrix& a, Sam32SetPhaseMatrix& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Sam32SetPhaseMatrix* New() const final {
    return CreateMaybeMessage<Sam32SetPhaseMatrix>(NULL);
  }

  Sam32SetPhaseMatrix* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Sam32SetPhaseMatrix>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Sam32SetPhaseMatrix& from);
  void MergeFrom(const Sam32SetPhaseMatrix& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Sam32SetPhaseMatrix* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 antenna_phase1 = 1;
  void clear_antenna_phase1();
  static const int kAntennaPhase1FieldNumber = 1;
  ::google::protobuf::uint32 antenna_phase1() const;
  void set_antenna_phase1(::google::protobuf::uint32 value);

  // uint32 antenna_phase2 = 2;
  void clear_antenna_phase2();
  static const int kAntennaPhase2FieldNumber = 2;
  ::google::protobuf::uint32 antenna_phase2() const;
  void set_antenna_phase2(::google::protobuf::uint32 value);

  // uint32 phase_duration = 3;
  void clear_phase_duration();
  static const int kPhaseDurationFieldNumber = 3;
  ::google::protobuf::uint32 phase_duration() const;
  void set_phase_duration(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:LabNet.Messages.Client.Sam32SetPhaseMatrix)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 antenna_phase1_;
  ::google::protobuf::uint32 antenna_phase2_;
  ::google::protobuf::uint32 phase_duration_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_LabNetClientMessages_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Sam32SetSignalInversion : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LabNet.Messages.Client.Sam32SetSignalInversion) */ {
 public:
  Sam32SetSignalInversion();
  virtual ~Sam32SetSignalInversion();

  Sam32SetSignalInversion(const Sam32SetSignalInversion& from);

  inline Sam32SetSignalInversion& operator=(const Sam32SetSignalInversion& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Sam32SetSignalInversion(Sam32SetSignalInversion&& from) noexcept
    : Sam32SetSignalInversion() {
    *this = ::std::move(from);
  }

  inline Sam32SetSignalInversion& operator=(Sam32SetSignalInversion&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Sam32SetSignalInversion& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Sam32SetSignalInversion* internal_default_instance() {
    return reinterpret_cast<const Sam32SetSignalInversion*>(
               &_Sam32SetSignalInversion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(Sam32SetSignalInversion* other);
  friend void swap(Sam32SetSignalInversion& a, Sam32SetSignalInversion& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Sam32SetSignalInversion* New() const final {
    return CreateMaybeMessage<Sam32SetSignalInversion>(NULL);
  }

  Sam32SetSignalInversion* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Sam32SetSignalInversion>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Sam32SetSignalInversion& from);
  void MergeFrom(const Sam32SetSignalInversion& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Sam32SetSignalInversion* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool inverted = 1;
  void clear_inverted();
  static const int kInvertedFieldNumber = 1;
  bool inverted() const;
  void set_inverted(bool value);

  // @@protoc_insertion_point(class_scope:LabNet.Messages.Client.Sam32SetSignalInversion)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool inverted_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_LabNetClientMessages_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UartInit : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LabNet.Messages.Client.UartInit) */ {
 public:
  UartInit();
  virtual ~UartInit();

  UartInit(const UartInit& from);

  inline UartInit& operator=(const UartInit& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UartInit(UartInit&& from) noexcept
    : UartInit() {
    *this = ::std::move(from);
  }

  inline UartInit& operator=(UartInit&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UartInit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UartInit* internal_default_instance() {
    return reinterpret_cast<const UartInit*>(
               &_UartInit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(UartInit* other);
  friend void swap(UartInit& a, UartInit& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UartInit* New() const final {
    return CreateMaybeMessage<UartInit>(NULL);
  }

  UartInit* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UartInit>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UartInit& from);
  void MergeFrom(const UartInit& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UartInit* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 port_id = 1;
  void clear_port_id();
  static const int kPortIdFieldNumber = 1;
  ::google::protobuf::uint32 port_id() const;
  void set_port_id(::google::protobuf::uint32 value);

  // uint32 baud = 2;
  void clear_baud();
  static const int kBaudFieldNumber = 2;
  ::google::protobuf::uint32 baud() const;
  void set_baud(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:LabNet.Messages.Client.UartInit)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 port_id_;
  ::google::protobuf::uint32 baud_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_LabNetClientMessages_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UartWriteData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LabNet.Messages.Client.UartWriteData) */ {
 public:
  UartWriteData();
  virtual ~UartWriteData();

  UartWriteData(const UartWriteData& from);

  inline UartWriteData& operator=(const UartWriteData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UartWriteData(UartWriteData&& from) noexcept
    : UartWriteData() {
    *this = ::std::move(from);
  }

  inline UartWriteData& operator=(UartWriteData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UartWriteData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UartWriteData* internal_default_instance() {
    return reinterpret_cast<const UartWriteData*>(
               &_UartWriteData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(UartWriteData* other);
  friend void swap(UartWriteData& a, UartWriteData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UartWriteData* New() const final {
    return CreateMaybeMessage<UartWriteData>(NULL);
  }

  UartWriteData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UartWriteData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UartWriteData& from);
  void MergeFrom(const UartWriteData& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UartWriteData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes data = 2;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // uint32 portId = 1;
  void clear_portid();
  static const int kPortIdFieldNumber = 1;
  ::google::protobuf::uint32 portid() const;
  void set_portid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:LabNet.Messages.Client.UartWriteData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::uint32 portid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_LabNetClientMessages_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ClientWrappedMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LabNet.Messages.Client.ClientWrappedMessage) */ {
 public:
  ClientWrappedMessage();
  virtual ~ClientWrappedMessage();

  ClientWrappedMessage(const ClientWrappedMessage& from);

  inline ClientWrappedMessage& operator=(const ClientWrappedMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ClientWrappedMessage(ClientWrappedMessage&& from) noexcept
    : ClientWrappedMessage() {
    *this = ::std::move(from);
  }

  inline ClientWrappedMessage& operator=(ClientWrappedMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientWrappedMessage& default_instance();

  enum ClientMessageCase {
    kGpioInit = 1,
    kGpioInitDigitalIn = 2,
    kGpioInitDigitalOut = 3,
    kGpioSetDigitalOut = 4,
    kSam32Init = 5,
    kSam32SetPhaseMatrix = 6,
    kSam32SetSignalInversion = 7,
    kUartInit = 8,
    kUartWriteData = 9,
    CLIENT_MESSAGE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientWrappedMessage* internal_default_instance() {
    return reinterpret_cast<const ClientWrappedMessage*>(
               &_ClientWrappedMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(ClientWrappedMessage* other);
  friend void swap(ClientWrappedMessage& a, ClientWrappedMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClientWrappedMessage* New() const final {
    return CreateMaybeMessage<ClientWrappedMessage>(NULL);
  }

  ClientWrappedMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ClientWrappedMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ClientWrappedMessage& from);
  void MergeFrom(const ClientWrappedMessage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientWrappedMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .LabNet.Messages.Client.GpioInit gpio_init = 1;
  bool has_gpio_init() const;
  void clear_gpio_init();
  static const int kGpioInitFieldNumber = 1;
  private:
  const ::LabNet::Messages::Client::GpioInit& _internal_gpio_init() const;
  public:
  const ::LabNet::Messages::Client::GpioInit& gpio_init() const;
  ::LabNet::Messages::Client::GpioInit* release_gpio_init();
  ::LabNet::Messages::Client::GpioInit* mutable_gpio_init();
  void set_allocated_gpio_init(::LabNet::Messages::Client::GpioInit* gpio_init);

  // .LabNet.Messages.Client.GpioInitDigitalIn gpio_init_digital_in = 2;
  bool has_gpio_init_digital_in() const;
  void clear_gpio_init_digital_in();
  static const int kGpioInitDigitalInFieldNumber = 2;
  private:
  const ::LabNet::Messages::Client::GpioInitDigitalIn& _internal_gpio_init_digital_in() const;
  public:
  const ::LabNet::Messages::Client::GpioInitDigitalIn& gpio_init_digital_in() const;
  ::LabNet::Messages::Client::GpioInitDigitalIn* release_gpio_init_digital_in();
  ::LabNet::Messages::Client::GpioInitDigitalIn* mutable_gpio_init_digital_in();
  void set_allocated_gpio_init_digital_in(::LabNet::Messages::Client::GpioInitDigitalIn* gpio_init_digital_in);

  // .LabNet.Messages.Client.GpioInitDigitalOut gpio_init_digital_out = 3;
  bool has_gpio_init_digital_out() const;
  void clear_gpio_init_digital_out();
  static const int kGpioInitDigitalOutFieldNumber = 3;
  private:
  const ::LabNet::Messages::Client::GpioInitDigitalOut& _internal_gpio_init_digital_out() const;
  public:
  const ::LabNet::Messages::Client::GpioInitDigitalOut& gpio_init_digital_out() const;
  ::LabNet::Messages::Client::GpioInitDigitalOut* release_gpio_init_digital_out();
  ::LabNet::Messages::Client::GpioInitDigitalOut* mutable_gpio_init_digital_out();
  void set_allocated_gpio_init_digital_out(::LabNet::Messages::Client::GpioInitDigitalOut* gpio_init_digital_out);

  // .LabNet.Messages.Client.GpioSetDigitalOut gpio_set_digital_out = 4;
  bool has_gpio_set_digital_out() const;
  void clear_gpio_set_digital_out();
  static const int kGpioSetDigitalOutFieldNumber = 4;
  private:
  const ::LabNet::Messages::Client::GpioSetDigitalOut& _internal_gpio_set_digital_out() const;
  public:
  const ::LabNet::Messages::Client::GpioSetDigitalOut& gpio_set_digital_out() const;
  ::LabNet::Messages::Client::GpioSetDigitalOut* release_gpio_set_digital_out();
  ::LabNet::Messages::Client::GpioSetDigitalOut* mutable_gpio_set_digital_out();
  void set_allocated_gpio_set_digital_out(::LabNet::Messages::Client::GpioSetDigitalOut* gpio_set_digital_out);

  // .LabNet.Messages.Client.Sam32Init sam32_init = 5;
  bool has_sam32_init() const;
  void clear_sam32_init();
  static const int kSam32InitFieldNumber = 5;
  private:
  const ::LabNet::Messages::Client::Sam32Init& _internal_sam32_init() const;
  public:
  const ::LabNet::Messages::Client::Sam32Init& sam32_init() const;
  ::LabNet::Messages::Client::Sam32Init* release_sam32_init();
  ::LabNet::Messages::Client::Sam32Init* mutable_sam32_init();
  void set_allocated_sam32_init(::LabNet::Messages::Client::Sam32Init* sam32_init);

  // .LabNet.Messages.Client.Sam32SetPhaseMatrix sam32_set_phase_matrix = 6;
  bool has_sam32_set_phase_matrix() const;
  void clear_sam32_set_phase_matrix();
  static const int kSam32SetPhaseMatrixFieldNumber = 6;
  private:
  const ::LabNet::Messages::Client::Sam32SetPhaseMatrix& _internal_sam32_set_phase_matrix() const;
  public:
  const ::LabNet::Messages::Client::Sam32SetPhaseMatrix& sam32_set_phase_matrix() const;
  ::LabNet::Messages::Client::Sam32SetPhaseMatrix* release_sam32_set_phase_matrix();
  ::LabNet::Messages::Client::Sam32SetPhaseMatrix* mutable_sam32_set_phase_matrix();
  void set_allocated_sam32_set_phase_matrix(::LabNet::Messages::Client::Sam32SetPhaseMatrix* sam32_set_phase_matrix);

  // .LabNet.Messages.Client.Sam32SetSignalInversion sam32_set_signal_inversion = 7;
  bool has_sam32_set_signal_inversion() const;
  void clear_sam32_set_signal_inversion();
  static const int kSam32SetSignalInversionFieldNumber = 7;
  private:
  const ::LabNet::Messages::Client::Sam32SetSignalInversion& _internal_sam32_set_signal_inversion() const;
  public:
  const ::LabNet::Messages::Client::Sam32SetSignalInversion& sam32_set_signal_inversion() const;
  ::LabNet::Messages::Client::Sam32SetSignalInversion* release_sam32_set_signal_inversion();
  ::LabNet::Messages::Client::Sam32SetSignalInversion* mutable_sam32_set_signal_inversion();
  void set_allocated_sam32_set_signal_inversion(::LabNet::Messages::Client::Sam32SetSignalInversion* sam32_set_signal_inversion);

  // .LabNet.Messages.Client.UartInit uart_init = 8;
  bool has_uart_init() const;
  void clear_uart_init();
  static const int kUartInitFieldNumber = 8;
  private:
  const ::LabNet::Messages::Client::UartInit& _internal_uart_init() const;
  public:
  const ::LabNet::Messages::Client::UartInit& uart_init() const;
  ::LabNet::Messages::Client::UartInit* release_uart_init();
  ::LabNet::Messages::Client::UartInit* mutable_uart_init();
  void set_allocated_uart_init(::LabNet::Messages::Client::UartInit* uart_init);

  // .LabNet.Messages.Client.UartWriteData uart_write_data = 9;
  bool has_uart_write_data() const;
  void clear_uart_write_data();
  static const int kUartWriteDataFieldNumber = 9;
  private:
  const ::LabNet::Messages::Client::UartWriteData& _internal_uart_write_data() const;
  public:
  const ::LabNet::Messages::Client::UartWriteData& uart_write_data() const;
  ::LabNet::Messages::Client::UartWriteData* release_uart_write_data();
  ::LabNet::Messages::Client::UartWriteData* mutable_uart_write_data();
  void set_allocated_uart_write_data(::LabNet::Messages::Client::UartWriteData* uart_write_data);

  void clear_client_message();
  ClientMessageCase client_message_case() const;
  // @@protoc_insertion_point(class_scope:LabNet.Messages.Client.ClientWrappedMessage)
 private:
  void set_has_gpio_init();
  void set_has_gpio_init_digital_in();
  void set_has_gpio_init_digital_out();
  void set_has_gpio_set_digital_out();
  void set_has_sam32_init();
  void set_has_sam32_set_phase_matrix();
  void set_has_sam32_set_signal_inversion();
  void set_has_uart_init();
  void set_has_uart_write_data();

  inline bool has_client_message() const;
  inline void clear_has_client_message();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union ClientMessageUnion {
    ClientMessageUnion() {}
    ::LabNet::Messages::Client::GpioInit* gpio_init_;
    ::LabNet::Messages::Client::GpioInitDigitalIn* gpio_init_digital_in_;
    ::LabNet::Messages::Client::GpioInitDigitalOut* gpio_init_digital_out_;
    ::LabNet::Messages::Client::GpioSetDigitalOut* gpio_set_digital_out_;
    ::LabNet::Messages::Client::Sam32Init* sam32_init_;
    ::LabNet::Messages::Client::Sam32SetPhaseMatrix* sam32_set_phase_matrix_;
    ::LabNet::Messages::Client::Sam32SetSignalInversion* sam32_set_signal_inversion_;
    ::LabNet::Messages::Client::UartInit* uart_init_;
    ::LabNet::Messages::Client::UartWriteData* uart_write_data_;
  } client_message_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_LabNetClientMessages_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GpioInit

// -------------------------------------------------------------------

// GpioInitDigitalIn

// uint32 pin = 1;
inline void GpioInitDigitalIn::clear_pin() {
  pin_ = 0u;
}
inline ::google::protobuf::uint32 GpioInitDigitalIn::pin() const {
  // @@protoc_insertion_point(field_get:LabNet.Messages.Client.GpioInitDigitalIn.pin)
  return pin_;
}
inline void GpioInitDigitalIn::set_pin(::google::protobuf::uint32 value) {
  
  pin_ = value;
  // @@protoc_insertion_point(field_set:LabNet.Messages.Client.GpioInitDigitalIn.pin)
}

// .LabNet.Messages.Client.GpioInitDigitalIn.Resistor resistor_state = 2;
inline void GpioInitDigitalIn::clear_resistor_state() {
  resistor_state_ = 0;
}
inline ::LabNet::Messages::Client::GpioInitDigitalIn_Resistor GpioInitDigitalIn::resistor_state() const {
  // @@protoc_insertion_point(field_get:LabNet.Messages.Client.GpioInitDigitalIn.resistor_state)
  return static_cast< ::LabNet::Messages::Client::GpioInitDigitalIn_Resistor >(resistor_state_);
}
inline void GpioInitDigitalIn::set_resistor_state(::LabNet::Messages::Client::GpioInitDigitalIn_Resistor value) {
  
  resistor_state_ = value;
  // @@protoc_insertion_point(field_set:LabNet.Messages.Client.GpioInitDigitalIn.resistor_state)
}

// bool is_inverted = 3;
inline void GpioInitDigitalIn::clear_is_inverted() {
  is_inverted_ = false;
}
inline bool GpioInitDigitalIn::is_inverted() const {
  // @@protoc_insertion_point(field_get:LabNet.Messages.Client.GpioInitDigitalIn.is_inverted)
  return is_inverted_;
}
inline void GpioInitDigitalIn::set_is_inverted(bool value) {
  
  is_inverted_ = value;
  // @@protoc_insertion_point(field_set:LabNet.Messages.Client.GpioInitDigitalIn.is_inverted)
}

// -------------------------------------------------------------------

// GpioInitDigitalOut

// uint32 pin = 1;
inline void GpioInitDigitalOut::clear_pin() {
  pin_ = 0u;
}
inline ::google::protobuf::uint32 GpioInitDigitalOut::pin() const {
  // @@protoc_insertion_point(field_get:LabNet.Messages.Client.GpioInitDigitalOut.pin)
  return pin_;
}
inline void GpioInitDigitalOut::set_pin(::google::protobuf::uint32 value) {
  
  pin_ = value;
  // @@protoc_insertion_point(field_set:LabNet.Messages.Client.GpioInitDigitalOut.pin)
}

// bool is_inverted = 2;
inline void GpioInitDigitalOut::clear_is_inverted() {
  is_inverted_ = false;
}
inline bool GpioInitDigitalOut::is_inverted() const {
  // @@protoc_insertion_point(field_get:LabNet.Messages.Client.GpioInitDigitalOut.is_inverted)
  return is_inverted_;
}
inline void GpioInitDigitalOut::set_is_inverted(bool value) {
  
  is_inverted_ = value;
  // @@protoc_insertion_point(field_set:LabNet.Messages.Client.GpioInitDigitalOut.is_inverted)
}

// -------------------------------------------------------------------

// GpioSetDigitalOut

// uint32 pin = 1;
inline void GpioSetDigitalOut::clear_pin() {
  pin_ = 0u;
}
inline ::google::protobuf::uint32 GpioSetDigitalOut::pin() const {
  // @@protoc_insertion_point(field_get:LabNet.Messages.Client.GpioSetDigitalOut.pin)
  return pin_;
}
inline void GpioSetDigitalOut::set_pin(::google::protobuf::uint32 value) {
  
  pin_ = value;
  // @@protoc_insertion_point(field_set:LabNet.Messages.Client.GpioSetDigitalOut.pin)
}

// bool state = 2;
inline void GpioSetDigitalOut::clear_state() {
  state_ = false;
}
inline bool GpioSetDigitalOut::state() const {
  // @@protoc_insertion_point(field_get:LabNet.Messages.Client.GpioSetDigitalOut.state)
  return state_;
}
inline void GpioSetDigitalOut::set_state(bool value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:LabNet.Messages.Client.GpioSetDigitalOut.state)
}

// -------------------------------------------------------------------

// Sam32Init

// uint32 antenna_phase1 = 1;
inline void Sam32Init::clear_antenna_phase1() {
  antenna_phase1_ = 0u;
}
inline ::google::protobuf::uint32 Sam32Init::antenna_phase1() const {
  // @@protoc_insertion_point(field_get:LabNet.Messages.Client.Sam32Init.antenna_phase1)
  return antenna_phase1_;
}
inline void Sam32Init::set_antenna_phase1(::google::protobuf::uint32 value) {
  
  antenna_phase1_ = value;
  // @@protoc_insertion_point(field_set:LabNet.Messages.Client.Sam32Init.antenna_phase1)
}

// uint32 antenna_phase2 = 2;
inline void Sam32Init::clear_antenna_phase2() {
  antenna_phase2_ = 0u;
}
inline ::google::protobuf::uint32 Sam32Init::antenna_phase2() const {
  // @@protoc_insertion_point(field_get:LabNet.Messages.Client.Sam32Init.antenna_phase2)
  return antenna_phase2_;
}
inline void Sam32Init::set_antenna_phase2(::google::protobuf::uint32 value) {
  
  antenna_phase2_ = value;
  // @@protoc_insertion_point(field_set:LabNet.Messages.Client.Sam32Init.antenna_phase2)
}

// uint32 phase_duration = 3;
inline void Sam32Init::clear_phase_duration() {
  phase_duration_ = 0u;
}
inline ::google::protobuf::uint32 Sam32Init::phase_duration() const {
  // @@protoc_insertion_point(field_get:LabNet.Messages.Client.Sam32Init.phase_duration)
  return phase_duration_;
}
inline void Sam32Init::set_phase_duration(::google::protobuf::uint32 value) {
  
  phase_duration_ = value;
  // @@protoc_insertion_point(field_set:LabNet.Messages.Client.Sam32Init.phase_duration)
}

// bool inverted = 4;
inline void Sam32Init::clear_inverted() {
  inverted_ = false;
}
inline bool Sam32Init::inverted() const {
  // @@protoc_insertion_point(field_get:LabNet.Messages.Client.Sam32Init.inverted)
  return inverted_;
}
inline void Sam32Init::set_inverted(bool value) {
  
  inverted_ = value;
  // @@protoc_insertion_point(field_set:LabNet.Messages.Client.Sam32Init.inverted)
}

// -------------------------------------------------------------------

// Sam32SetPhaseMatrix

// uint32 antenna_phase1 = 1;
inline void Sam32SetPhaseMatrix::clear_antenna_phase1() {
  antenna_phase1_ = 0u;
}
inline ::google::protobuf::uint32 Sam32SetPhaseMatrix::antenna_phase1() const {
  // @@protoc_insertion_point(field_get:LabNet.Messages.Client.Sam32SetPhaseMatrix.antenna_phase1)
  return antenna_phase1_;
}
inline void Sam32SetPhaseMatrix::set_antenna_phase1(::google::protobuf::uint32 value) {
  
  antenna_phase1_ = value;
  // @@protoc_insertion_point(field_set:LabNet.Messages.Client.Sam32SetPhaseMatrix.antenna_phase1)
}

// uint32 antenna_phase2 = 2;
inline void Sam32SetPhaseMatrix::clear_antenna_phase2() {
  antenna_phase2_ = 0u;
}
inline ::google::protobuf::uint32 Sam32SetPhaseMatrix::antenna_phase2() const {
  // @@protoc_insertion_point(field_get:LabNet.Messages.Client.Sam32SetPhaseMatrix.antenna_phase2)
  return antenna_phase2_;
}
inline void Sam32SetPhaseMatrix::set_antenna_phase2(::google::protobuf::uint32 value) {
  
  antenna_phase2_ = value;
  // @@protoc_insertion_point(field_set:LabNet.Messages.Client.Sam32SetPhaseMatrix.antenna_phase2)
}

// uint32 phase_duration = 3;
inline void Sam32SetPhaseMatrix::clear_phase_duration() {
  phase_duration_ = 0u;
}
inline ::google::protobuf::uint32 Sam32SetPhaseMatrix::phase_duration() const {
  // @@protoc_insertion_point(field_get:LabNet.Messages.Client.Sam32SetPhaseMatrix.phase_duration)
  return phase_duration_;
}
inline void Sam32SetPhaseMatrix::set_phase_duration(::google::protobuf::uint32 value) {
  
  phase_duration_ = value;
  // @@protoc_insertion_point(field_set:LabNet.Messages.Client.Sam32SetPhaseMatrix.phase_duration)
}

// -------------------------------------------------------------------

// Sam32SetSignalInversion

// bool inverted = 1;
inline void Sam32SetSignalInversion::clear_inverted() {
  inverted_ = false;
}
inline bool Sam32SetSignalInversion::inverted() const {
  // @@protoc_insertion_point(field_get:LabNet.Messages.Client.Sam32SetSignalInversion.inverted)
  return inverted_;
}
inline void Sam32SetSignalInversion::set_inverted(bool value) {
  
  inverted_ = value;
  // @@protoc_insertion_point(field_set:LabNet.Messages.Client.Sam32SetSignalInversion.inverted)
}

// -------------------------------------------------------------------

// UartInit

// uint32 port_id = 1;
inline void UartInit::clear_port_id() {
  port_id_ = 0u;
}
inline ::google::protobuf::uint32 UartInit::port_id() const {
  // @@protoc_insertion_point(field_get:LabNet.Messages.Client.UartInit.port_id)
  return port_id_;
}
inline void UartInit::set_port_id(::google::protobuf::uint32 value) {
  
  port_id_ = value;
  // @@protoc_insertion_point(field_set:LabNet.Messages.Client.UartInit.port_id)
}

// uint32 baud = 2;
inline void UartInit::clear_baud() {
  baud_ = 0u;
}
inline ::google::protobuf::uint32 UartInit::baud() const {
  // @@protoc_insertion_point(field_get:LabNet.Messages.Client.UartInit.baud)
  return baud_;
}
inline void UartInit::set_baud(::google::protobuf::uint32 value) {
  
  baud_ = value;
  // @@protoc_insertion_point(field_set:LabNet.Messages.Client.UartInit.baud)
}

// -------------------------------------------------------------------

// UartWriteData

// uint32 portId = 1;
inline void UartWriteData::clear_portid() {
  portid_ = 0u;
}
inline ::google::protobuf::uint32 UartWriteData::portid() const {
  // @@protoc_insertion_point(field_get:LabNet.Messages.Client.UartWriteData.portId)
  return portid_;
}
inline void UartWriteData::set_portid(::google::protobuf::uint32 value) {
  
  portid_ = value;
  // @@protoc_insertion_point(field_set:LabNet.Messages.Client.UartWriteData.portId)
}

// bytes data = 2;
inline void UartWriteData::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UartWriteData::data() const {
  // @@protoc_insertion_point(field_get:LabNet.Messages.Client.UartWriteData.data)
  return data_.GetNoArena();
}
inline void UartWriteData::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LabNet.Messages.Client.UartWriteData.data)
}
#if LANG_CXX11
inline void UartWriteData::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LabNet.Messages.Client.UartWriteData.data)
}
#endif
inline void UartWriteData::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LabNet.Messages.Client.UartWriteData.data)
}
inline void UartWriteData::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LabNet.Messages.Client.UartWriteData.data)
}
inline ::std::string* UartWriteData::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:LabNet.Messages.Client.UartWriteData.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UartWriteData::release_data() {
  // @@protoc_insertion_point(field_release:LabNet.Messages.Client.UartWriteData.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UartWriteData::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:LabNet.Messages.Client.UartWriteData.data)
}

// -------------------------------------------------------------------

// ClientWrappedMessage

// .LabNet.Messages.Client.GpioInit gpio_init = 1;
inline bool ClientWrappedMessage::has_gpio_init() const {
  return client_message_case() == kGpioInit;
}
inline void ClientWrappedMessage::set_has_gpio_init() {
  _oneof_case_[0] = kGpioInit;
}
inline void ClientWrappedMessage::clear_gpio_init() {
  if (has_gpio_init()) {
    delete client_message_.gpio_init_;
    clear_has_client_message();
  }
}
inline const ::LabNet::Messages::Client::GpioInit& ClientWrappedMessage::_internal_gpio_init() const {
  return *client_message_.gpio_init_;
}
inline ::LabNet::Messages::Client::GpioInit* ClientWrappedMessage::release_gpio_init() {
  // @@protoc_insertion_point(field_release:LabNet.Messages.Client.ClientWrappedMessage.gpio_init)
  if (has_gpio_init()) {
    clear_has_client_message();
      ::LabNet::Messages::Client::GpioInit* temp = client_message_.gpio_init_;
    client_message_.gpio_init_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::LabNet::Messages::Client::GpioInit& ClientWrappedMessage::gpio_init() const {
  // @@protoc_insertion_point(field_get:LabNet.Messages.Client.ClientWrappedMessage.gpio_init)
  return has_gpio_init()
      ? *client_message_.gpio_init_
      : *reinterpret_cast< ::LabNet::Messages::Client::GpioInit*>(&::LabNet::Messages::Client::_GpioInit_default_instance_);
}
inline ::LabNet::Messages::Client::GpioInit* ClientWrappedMessage::mutable_gpio_init() {
  if (!has_gpio_init()) {
    clear_client_message();
    set_has_gpio_init();
    client_message_.gpio_init_ = CreateMaybeMessage< ::LabNet::Messages::Client::GpioInit >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:LabNet.Messages.Client.ClientWrappedMessage.gpio_init)
  return client_message_.gpio_init_;
}

// .LabNet.Messages.Client.GpioInitDigitalIn gpio_init_digital_in = 2;
inline bool ClientWrappedMessage::has_gpio_init_digital_in() const {
  return client_message_case() == kGpioInitDigitalIn;
}
inline void ClientWrappedMessage::set_has_gpio_init_digital_in() {
  _oneof_case_[0] = kGpioInitDigitalIn;
}
inline void ClientWrappedMessage::clear_gpio_init_digital_in() {
  if (has_gpio_init_digital_in()) {
    delete client_message_.gpio_init_digital_in_;
    clear_has_client_message();
  }
}
inline const ::LabNet::Messages::Client::GpioInitDigitalIn& ClientWrappedMessage::_internal_gpio_init_digital_in() const {
  return *client_message_.gpio_init_digital_in_;
}
inline ::LabNet::Messages::Client::GpioInitDigitalIn* ClientWrappedMessage::release_gpio_init_digital_in() {
  // @@protoc_insertion_point(field_release:LabNet.Messages.Client.ClientWrappedMessage.gpio_init_digital_in)
  if (has_gpio_init_digital_in()) {
    clear_has_client_message();
      ::LabNet::Messages::Client::GpioInitDigitalIn* temp = client_message_.gpio_init_digital_in_;
    client_message_.gpio_init_digital_in_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::LabNet::Messages::Client::GpioInitDigitalIn& ClientWrappedMessage::gpio_init_digital_in() const {
  // @@protoc_insertion_point(field_get:LabNet.Messages.Client.ClientWrappedMessage.gpio_init_digital_in)
  return has_gpio_init_digital_in()
      ? *client_message_.gpio_init_digital_in_
      : *reinterpret_cast< ::LabNet::Messages::Client::GpioInitDigitalIn*>(&::LabNet::Messages::Client::_GpioInitDigitalIn_default_instance_);
}
inline ::LabNet::Messages::Client::GpioInitDigitalIn* ClientWrappedMessage::mutable_gpio_init_digital_in() {
  if (!has_gpio_init_digital_in()) {
    clear_client_message();
    set_has_gpio_init_digital_in();
    client_message_.gpio_init_digital_in_ = CreateMaybeMessage< ::LabNet::Messages::Client::GpioInitDigitalIn >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:LabNet.Messages.Client.ClientWrappedMessage.gpio_init_digital_in)
  return client_message_.gpio_init_digital_in_;
}

// .LabNet.Messages.Client.GpioInitDigitalOut gpio_init_digital_out = 3;
inline bool ClientWrappedMessage::has_gpio_init_digital_out() const {
  return client_message_case() == kGpioInitDigitalOut;
}
inline void ClientWrappedMessage::set_has_gpio_init_digital_out() {
  _oneof_case_[0] = kGpioInitDigitalOut;
}
inline void ClientWrappedMessage::clear_gpio_init_digital_out() {
  if (has_gpio_init_digital_out()) {
    delete client_message_.gpio_init_digital_out_;
    clear_has_client_message();
  }
}
inline const ::LabNet::Messages::Client::GpioInitDigitalOut& ClientWrappedMessage::_internal_gpio_init_digital_out() const {
  return *client_message_.gpio_init_digital_out_;
}
inline ::LabNet::Messages::Client::GpioInitDigitalOut* ClientWrappedMessage::release_gpio_init_digital_out() {
  // @@protoc_insertion_point(field_release:LabNet.Messages.Client.ClientWrappedMessage.gpio_init_digital_out)
  if (has_gpio_init_digital_out()) {
    clear_has_client_message();
      ::LabNet::Messages::Client::GpioInitDigitalOut* temp = client_message_.gpio_init_digital_out_;
    client_message_.gpio_init_digital_out_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::LabNet::Messages::Client::GpioInitDigitalOut& ClientWrappedMessage::gpio_init_digital_out() const {
  // @@protoc_insertion_point(field_get:LabNet.Messages.Client.ClientWrappedMessage.gpio_init_digital_out)
  return has_gpio_init_digital_out()
      ? *client_message_.gpio_init_digital_out_
      : *reinterpret_cast< ::LabNet::Messages::Client::GpioInitDigitalOut*>(&::LabNet::Messages::Client::_GpioInitDigitalOut_default_instance_);
}
inline ::LabNet::Messages::Client::GpioInitDigitalOut* ClientWrappedMessage::mutable_gpio_init_digital_out() {
  if (!has_gpio_init_digital_out()) {
    clear_client_message();
    set_has_gpio_init_digital_out();
    client_message_.gpio_init_digital_out_ = CreateMaybeMessage< ::LabNet::Messages::Client::GpioInitDigitalOut >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:LabNet.Messages.Client.ClientWrappedMessage.gpio_init_digital_out)
  return client_message_.gpio_init_digital_out_;
}

// .LabNet.Messages.Client.GpioSetDigitalOut gpio_set_digital_out = 4;
inline bool ClientWrappedMessage::has_gpio_set_digital_out() const {
  return client_message_case() == kGpioSetDigitalOut;
}
inline void ClientWrappedMessage::set_has_gpio_set_digital_out() {
  _oneof_case_[0] = kGpioSetDigitalOut;
}
inline void ClientWrappedMessage::clear_gpio_set_digital_out() {
  if (has_gpio_set_digital_out()) {
    delete client_message_.gpio_set_digital_out_;
    clear_has_client_message();
  }
}
inline const ::LabNet::Messages::Client::GpioSetDigitalOut& ClientWrappedMessage::_internal_gpio_set_digital_out() const {
  return *client_message_.gpio_set_digital_out_;
}
inline ::LabNet::Messages::Client::GpioSetDigitalOut* ClientWrappedMessage::release_gpio_set_digital_out() {
  // @@protoc_insertion_point(field_release:LabNet.Messages.Client.ClientWrappedMessage.gpio_set_digital_out)
  if (has_gpio_set_digital_out()) {
    clear_has_client_message();
      ::LabNet::Messages::Client::GpioSetDigitalOut* temp = client_message_.gpio_set_digital_out_;
    client_message_.gpio_set_digital_out_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::LabNet::Messages::Client::GpioSetDigitalOut& ClientWrappedMessage::gpio_set_digital_out() const {
  // @@protoc_insertion_point(field_get:LabNet.Messages.Client.ClientWrappedMessage.gpio_set_digital_out)
  return has_gpio_set_digital_out()
      ? *client_message_.gpio_set_digital_out_
      : *reinterpret_cast< ::LabNet::Messages::Client::GpioSetDigitalOut*>(&::LabNet::Messages::Client::_GpioSetDigitalOut_default_instance_);
}
inline ::LabNet::Messages::Client::GpioSetDigitalOut* ClientWrappedMessage::mutable_gpio_set_digital_out() {
  if (!has_gpio_set_digital_out()) {
    clear_client_message();
    set_has_gpio_set_digital_out();
    client_message_.gpio_set_digital_out_ = CreateMaybeMessage< ::LabNet::Messages::Client::GpioSetDigitalOut >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:LabNet.Messages.Client.ClientWrappedMessage.gpio_set_digital_out)
  return client_message_.gpio_set_digital_out_;
}

// .LabNet.Messages.Client.Sam32Init sam32_init = 5;
inline bool ClientWrappedMessage::has_sam32_init() const {
  return client_message_case() == kSam32Init;
}
inline void ClientWrappedMessage::set_has_sam32_init() {
  _oneof_case_[0] = kSam32Init;
}
inline void ClientWrappedMessage::clear_sam32_init() {
  if (has_sam32_init()) {
    delete client_message_.sam32_init_;
    clear_has_client_message();
  }
}
inline const ::LabNet::Messages::Client::Sam32Init& ClientWrappedMessage::_internal_sam32_init() const {
  return *client_message_.sam32_init_;
}
inline ::LabNet::Messages::Client::Sam32Init* ClientWrappedMessage::release_sam32_init() {
  // @@protoc_insertion_point(field_release:LabNet.Messages.Client.ClientWrappedMessage.sam32_init)
  if (has_sam32_init()) {
    clear_has_client_message();
      ::LabNet::Messages::Client::Sam32Init* temp = client_message_.sam32_init_;
    client_message_.sam32_init_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::LabNet::Messages::Client::Sam32Init& ClientWrappedMessage::sam32_init() const {
  // @@protoc_insertion_point(field_get:LabNet.Messages.Client.ClientWrappedMessage.sam32_init)
  return has_sam32_init()
      ? *client_message_.sam32_init_
      : *reinterpret_cast< ::LabNet::Messages::Client::Sam32Init*>(&::LabNet::Messages::Client::_Sam32Init_default_instance_);
}
inline ::LabNet::Messages::Client::Sam32Init* ClientWrappedMessage::mutable_sam32_init() {
  if (!has_sam32_init()) {
    clear_client_message();
    set_has_sam32_init();
    client_message_.sam32_init_ = CreateMaybeMessage< ::LabNet::Messages::Client::Sam32Init >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:LabNet.Messages.Client.ClientWrappedMessage.sam32_init)
  return client_message_.sam32_init_;
}

// .LabNet.Messages.Client.Sam32SetPhaseMatrix sam32_set_phase_matrix = 6;
inline bool ClientWrappedMessage::has_sam32_set_phase_matrix() const {
  return client_message_case() == kSam32SetPhaseMatrix;
}
inline void ClientWrappedMessage::set_has_sam32_set_phase_matrix() {
  _oneof_case_[0] = kSam32SetPhaseMatrix;
}
inline void ClientWrappedMessage::clear_sam32_set_phase_matrix() {
  if (has_sam32_set_phase_matrix()) {
    delete client_message_.sam32_set_phase_matrix_;
    clear_has_client_message();
  }
}
inline const ::LabNet::Messages::Client::Sam32SetPhaseMatrix& ClientWrappedMessage::_internal_sam32_set_phase_matrix() const {
  return *client_message_.sam32_set_phase_matrix_;
}
inline ::LabNet::Messages::Client::Sam32SetPhaseMatrix* ClientWrappedMessage::release_sam32_set_phase_matrix() {
  // @@protoc_insertion_point(field_release:LabNet.Messages.Client.ClientWrappedMessage.sam32_set_phase_matrix)
  if (has_sam32_set_phase_matrix()) {
    clear_has_client_message();
      ::LabNet::Messages::Client::Sam32SetPhaseMatrix* temp = client_message_.sam32_set_phase_matrix_;
    client_message_.sam32_set_phase_matrix_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::LabNet::Messages::Client::Sam32SetPhaseMatrix& ClientWrappedMessage::sam32_set_phase_matrix() const {
  // @@protoc_insertion_point(field_get:LabNet.Messages.Client.ClientWrappedMessage.sam32_set_phase_matrix)
  return has_sam32_set_phase_matrix()
      ? *client_message_.sam32_set_phase_matrix_
      : *reinterpret_cast< ::LabNet::Messages::Client::Sam32SetPhaseMatrix*>(&::LabNet::Messages::Client::_Sam32SetPhaseMatrix_default_instance_);
}
inline ::LabNet::Messages::Client::Sam32SetPhaseMatrix* ClientWrappedMessage::mutable_sam32_set_phase_matrix() {
  if (!has_sam32_set_phase_matrix()) {
    clear_client_message();
    set_has_sam32_set_phase_matrix();
    client_message_.sam32_set_phase_matrix_ = CreateMaybeMessage< ::LabNet::Messages::Client::Sam32SetPhaseMatrix >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:LabNet.Messages.Client.ClientWrappedMessage.sam32_set_phase_matrix)
  return client_message_.sam32_set_phase_matrix_;
}

// .LabNet.Messages.Client.Sam32SetSignalInversion sam32_set_signal_inversion = 7;
inline bool ClientWrappedMessage::has_sam32_set_signal_inversion() const {
  return client_message_case() == kSam32SetSignalInversion;
}
inline void ClientWrappedMessage::set_has_sam32_set_signal_inversion() {
  _oneof_case_[0] = kSam32SetSignalInversion;
}
inline void ClientWrappedMessage::clear_sam32_set_signal_inversion() {
  if (has_sam32_set_signal_inversion()) {
    delete client_message_.sam32_set_signal_inversion_;
    clear_has_client_message();
  }
}
inline const ::LabNet::Messages::Client::Sam32SetSignalInversion& ClientWrappedMessage::_internal_sam32_set_signal_inversion() const {
  return *client_message_.sam32_set_signal_inversion_;
}
inline ::LabNet::Messages::Client::Sam32SetSignalInversion* ClientWrappedMessage::release_sam32_set_signal_inversion() {
  // @@protoc_insertion_point(field_release:LabNet.Messages.Client.ClientWrappedMessage.sam32_set_signal_inversion)
  if (has_sam32_set_signal_inversion()) {
    clear_has_client_message();
      ::LabNet::Messages::Client::Sam32SetSignalInversion* temp = client_message_.sam32_set_signal_inversion_;
    client_message_.sam32_set_signal_inversion_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::LabNet::Messages::Client::Sam32SetSignalInversion& ClientWrappedMessage::sam32_set_signal_inversion() const {
  // @@protoc_insertion_point(field_get:LabNet.Messages.Client.ClientWrappedMessage.sam32_set_signal_inversion)
  return has_sam32_set_signal_inversion()
      ? *client_message_.sam32_set_signal_inversion_
      : *reinterpret_cast< ::LabNet::Messages::Client::Sam32SetSignalInversion*>(&::LabNet::Messages::Client::_Sam32SetSignalInversion_default_instance_);
}
inline ::LabNet::Messages::Client::Sam32SetSignalInversion* ClientWrappedMessage::mutable_sam32_set_signal_inversion() {
  if (!has_sam32_set_signal_inversion()) {
    clear_client_message();
    set_has_sam32_set_signal_inversion();
    client_message_.sam32_set_signal_inversion_ = CreateMaybeMessage< ::LabNet::Messages::Client::Sam32SetSignalInversion >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:LabNet.Messages.Client.ClientWrappedMessage.sam32_set_signal_inversion)
  return client_message_.sam32_set_signal_inversion_;
}

// .LabNet.Messages.Client.UartInit uart_init = 8;
inline bool ClientWrappedMessage::has_uart_init() const {
  return client_message_case() == kUartInit;
}
inline void ClientWrappedMessage::set_has_uart_init() {
  _oneof_case_[0] = kUartInit;
}
inline void ClientWrappedMessage::clear_uart_init() {
  if (has_uart_init()) {
    delete client_message_.uart_init_;
    clear_has_client_message();
  }
}
inline const ::LabNet::Messages::Client::UartInit& ClientWrappedMessage::_internal_uart_init() const {
  return *client_message_.uart_init_;
}
inline ::LabNet::Messages::Client::UartInit* ClientWrappedMessage::release_uart_init() {
  // @@protoc_insertion_point(field_release:LabNet.Messages.Client.ClientWrappedMessage.uart_init)
  if (has_uart_init()) {
    clear_has_client_message();
      ::LabNet::Messages::Client::UartInit* temp = client_message_.uart_init_;
    client_message_.uart_init_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::LabNet::Messages::Client::UartInit& ClientWrappedMessage::uart_init() const {
  // @@protoc_insertion_point(field_get:LabNet.Messages.Client.ClientWrappedMessage.uart_init)
  return has_uart_init()
      ? *client_message_.uart_init_
      : *reinterpret_cast< ::LabNet::Messages::Client::UartInit*>(&::LabNet::Messages::Client::_UartInit_default_instance_);
}
inline ::LabNet::Messages::Client::UartInit* ClientWrappedMessage::mutable_uart_init() {
  if (!has_uart_init()) {
    clear_client_message();
    set_has_uart_init();
    client_message_.uart_init_ = CreateMaybeMessage< ::LabNet::Messages::Client::UartInit >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:LabNet.Messages.Client.ClientWrappedMessage.uart_init)
  return client_message_.uart_init_;
}

// .LabNet.Messages.Client.UartWriteData uart_write_data = 9;
inline bool ClientWrappedMessage::has_uart_write_data() const {
  return client_message_case() == kUartWriteData;
}
inline void ClientWrappedMessage::set_has_uart_write_data() {
  _oneof_case_[0] = kUartWriteData;
}
inline void ClientWrappedMessage::clear_uart_write_data() {
  if (has_uart_write_data()) {
    delete client_message_.uart_write_data_;
    clear_has_client_message();
  }
}
inline const ::LabNet::Messages::Client::UartWriteData& ClientWrappedMessage::_internal_uart_write_data() const {
  return *client_message_.uart_write_data_;
}
inline ::LabNet::Messages::Client::UartWriteData* ClientWrappedMessage::release_uart_write_data() {
  // @@protoc_insertion_point(field_release:LabNet.Messages.Client.ClientWrappedMessage.uart_write_data)
  if (has_uart_write_data()) {
    clear_has_client_message();
      ::LabNet::Messages::Client::UartWriteData* temp = client_message_.uart_write_data_;
    client_message_.uart_write_data_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::LabNet::Messages::Client::UartWriteData& ClientWrappedMessage::uart_write_data() const {
  // @@protoc_insertion_point(field_get:LabNet.Messages.Client.ClientWrappedMessage.uart_write_data)
  return has_uart_write_data()
      ? *client_message_.uart_write_data_
      : *reinterpret_cast< ::LabNet::Messages::Client::UartWriteData*>(&::LabNet::Messages::Client::_UartWriteData_default_instance_);
}
inline ::LabNet::Messages::Client::UartWriteData* ClientWrappedMessage::mutable_uart_write_data() {
  if (!has_uart_write_data()) {
    clear_client_message();
    set_has_uart_write_data();
    client_message_.uart_write_data_ = CreateMaybeMessage< ::LabNet::Messages::Client::UartWriteData >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:LabNet.Messages.Client.ClientWrappedMessage.uart_write_data)
  return client_message_.uart_write_data_;
}

inline bool ClientWrappedMessage::has_client_message() const {
  return client_message_case() != CLIENT_MESSAGE_NOT_SET;
}
inline void ClientWrappedMessage::clear_has_client_message() {
  _oneof_case_[0] = CLIENT_MESSAGE_NOT_SET;
}
inline ClientWrappedMessage::ClientMessageCase ClientWrappedMessage::client_message_case() const {
  return ClientWrappedMessage::ClientMessageCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Client
}  // namespace Messages
}  // namespace LabNet

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::LabNet::Messages::Client::GpioInitDigitalIn_Resistor> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::LabNet::Messages::Client::GpioInitDigitalIn_Resistor>() {
  return ::LabNet::Messages::Client::GpioInitDigitalIn_Resistor_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_LabNetClientMessages_2eproto
