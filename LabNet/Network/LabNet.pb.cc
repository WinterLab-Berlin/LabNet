// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LabNet.proto

#include "LabNet.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace LabNetProt {
class PinIdDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PinId>
      _instance;
} _PinId_default_instance_;
}  // namespace LabNetProt
namespace protobuf_LabNet_2eproto {
static void InitDefaultsPinId() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LabNetProt::_PinId_default_instance_;
    new (ptr) ::LabNetProt::PinId();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LabNetProt::PinId::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PinId =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPinId}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_PinId.base);
}

::google::protobuf::Metadata file_level_metadata[1];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LabNetProt::PinId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LabNetProt::PinId, interface_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LabNetProt::PinId, pin_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::LabNetProt::PinId)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::LabNetProt::_PinId_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "LabNet.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\014LabNet.proto\022\nLabNetProt\"\?\n\005PinId\022)\n\ti"
      "nterface\030\001 \001(\0162\026.LabNetProt.Interfaces\022\013"
      "\n\003pin\030\002 \001(\r*\305\001\n\nInterfaces\022\022\n\016INTERFACE_"
      "NONE\020\000\022\034\n\030INTERFACE_GPIO_TOP_PLANE\020\001\022\034\n\030"
      "INTERFACE_RFID_TOP_PLANE\020\002\022\023\n\017INTERFACE_"
      "UART0\020d\022\023\n\017INTERFACE_UART1\020e\022\023\n\017INTERFAC"
      "E_UART2\020f\022\023\n\017INTERFACE_UART3\020g\022\023\n\017INTERF"
      "ACE_UART4\020h*f\n\005Uarts\022\r\n\tUART_NONE\020\000\022\016\n\nU"
      "ART_PORT0\020d\022\016\n\nUART_PORT1\020e\022\016\n\nUART_PORT"
      "2\020f\022\016\n\nUART_PORT3\020g\022\016\n\nUART_PORT4\020hb\006pro"
      "to3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 403);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "LabNet.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_LabNet_2eproto
namespace LabNetProt {
const ::google::protobuf::EnumDescriptor* Interfaces_descriptor() {
  protobuf_LabNet_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_LabNet_2eproto::file_level_enum_descriptors[0];
}
bool Interfaces_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Uarts_descriptor() {
  protobuf_LabNet_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_LabNet_2eproto::file_level_enum_descriptors[1];
}
bool Uarts_IsValid(int value) {
  switch (value) {
    case 0:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void PinId::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PinId::kInterfaceFieldNumber;
const int PinId::kPinFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PinId::PinId()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_LabNet_2eproto::scc_info_PinId.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:LabNetProt.PinId)
}
PinId::PinId(const PinId& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&interface_, &from.interface_,
    static_cast<size_t>(reinterpret_cast<char*>(&pin_) -
    reinterpret_cast<char*>(&interface_)) + sizeof(pin_));
  // @@protoc_insertion_point(copy_constructor:LabNetProt.PinId)
}

void PinId::SharedCtor() {
  ::memset(&interface_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pin_) -
      reinterpret_cast<char*>(&interface_)) + sizeof(pin_));
}

PinId::~PinId() {
  // @@protoc_insertion_point(destructor:LabNetProt.PinId)
  SharedDtor();
}

void PinId::SharedDtor() {
}

void PinId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PinId::descriptor() {
  ::protobuf_LabNet_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_LabNet_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PinId& PinId::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_LabNet_2eproto::scc_info_PinId.base);
  return *internal_default_instance();
}


void PinId::Clear() {
// @@protoc_insertion_point(message_clear_start:LabNetProt.PinId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&interface_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pin_) -
      reinterpret_cast<char*>(&interface_)) + sizeof(pin_));
  _internal_metadata_.Clear();
}

bool PinId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LabNetProt.PinId)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .LabNetProt.Interfaces interface = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_interface(static_cast< ::LabNetProt::Interfaces >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 pin = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LabNetProt.PinId)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LabNetProt.PinId)
  return false;
#undef DO_
}

void PinId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LabNetProt.PinId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .LabNetProt.Interfaces interface = 1;
  if (this->interface() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->interface(), output);
  }

  // uint32 pin = 2;
  if (this->pin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pin(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:LabNetProt.PinId)
}

::google::protobuf::uint8* PinId::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:LabNetProt.PinId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .LabNetProt.Interfaces interface = 1;
  if (this->interface() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->interface(), target);
  }

  // uint32 pin = 2;
  if (this->pin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pin(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LabNetProt.PinId)
  return target;
}

size_t PinId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LabNetProt.PinId)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .LabNetProt.Interfaces interface = 1;
  if (this->interface() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->interface());
  }

  // uint32 pin = 2;
  if (this->pin() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->pin());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PinId::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LabNetProt.PinId)
  GOOGLE_DCHECK_NE(&from, this);
  const PinId* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PinId>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LabNetProt.PinId)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LabNetProt.PinId)
    MergeFrom(*source);
  }
}

void PinId::MergeFrom(const PinId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LabNetProt.PinId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.interface() != 0) {
    set_interface(from.interface());
  }
  if (from.pin() != 0) {
    set_pin(from.pin());
  }
}

void PinId::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LabNetProt.PinId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PinId::CopyFrom(const PinId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LabNetProt.PinId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PinId::IsInitialized() const {
  return true;
}

void PinId::Swap(PinId* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PinId::InternalSwap(PinId* other) {
  using std::swap;
  swap(interface_, other->interface_);
  swap(pin_, other->pin_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PinId::GetMetadata() const {
  protobuf_LabNet_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_LabNet_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace LabNetProt
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::LabNetProt::PinId* Arena::CreateMaybeMessage< ::LabNetProt::PinId >(Arena* arena) {
  return Arena::CreateInternal< ::LabNetProt::PinId >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
