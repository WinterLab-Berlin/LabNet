// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LabNetServer.proto

#ifndef PROTOBUF_INCLUDED_LabNetServer_2eproto
#define PROTOBUF_INCLUDED_LabNetServer_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "LabNet.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_LabNetServer_2eproto 

namespace protobuf_LabNetServer_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[15];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_LabNetServer_2eproto
namespace LabNet {
namespace Server {
class DataWriteComplete;
class DataWriteCompleteDefaultTypeInternal;
extern DataWriteCompleteDefaultTypeInternal _DataWriteComplete_default_instance_;
class DigitalInInitResult;
class DigitalInInitResultDefaultTypeInternal;
extern DigitalInInitResultDefaultTypeInternal _DigitalInInitResult_default_instance_;
class DigitalInState;
class DigitalInStateDefaultTypeInternal;
extern DigitalInStateDefaultTypeInternal _DigitalInState_default_instance_;
class DigitalOutInitResult;
class DigitalOutInitResultDefaultTypeInternal;
extern DigitalOutInitResultDefaultTypeInternal _DigitalOutInitResult_default_instance_;
class DigitalOutLoopStartResult;
class DigitalOutLoopStartResultDefaultTypeInternal;
extern DigitalOutLoopStartResultDefaultTypeInternal _DigitalOutLoopStartResult_default_instance_;
class DigitalOutLoopStopped;
class DigitalOutLoopStoppedDefaultTypeInternal;
extern DigitalOutLoopStoppedDefaultTypeInternal _DigitalOutLoopStopped_default_instance_;
class DigitalOutState;
class DigitalOutStateDefaultTypeInternal;
extern DigitalOutStateDefaultTypeInternal _DigitalOutState_default_instance_;
class InterfaceInitResult;
class InterfaceInitResultDefaultTypeInternal;
extern InterfaceInitResultDefaultTypeInternal _InterfaceInitResult_default_instance_;
class InterfaceLost;
class InterfaceLostDefaultTypeInternal;
extern InterfaceLostDefaultTypeInternal _InterfaceLost_default_instance_;
class InterfaceReconnected;
class InterfaceReconnectedDefaultTypeInternal;
extern InterfaceReconnectedDefaultTypeInternal _InterfaceReconnected_default_instance_;
class LabNetIdReply;
class LabNetIdReplyDefaultTypeInternal;
extern LabNetIdReplyDefaultTypeInternal _LabNetIdReply_default_instance_;
class LabNetResetReply;
class LabNetResetReplyDefaultTypeInternal;
extern LabNetResetReplyDefaultTypeInternal _LabNetResetReply_default_instance_;
class NewByteData;
class NewByteDataDefaultTypeInternal;
extern NewByteDataDefaultTypeInternal _NewByteData_default_instance_;
class OnlyOneConnectionAllowed;
class OnlyOneConnectionAllowedDefaultTypeInternal;
extern OnlyOneConnectionAllowedDefaultTypeInternal _OnlyOneConnectionAllowed_default_instance_;
class ServerWrappedMessage;
class ServerWrappedMessageDefaultTypeInternal;
extern ServerWrappedMessageDefaultTypeInternal _ServerWrappedMessage_default_instance_;
}  // namespace Server
}  // namespace LabNet
namespace google {
namespace protobuf {
template<> ::LabNet::Server::DataWriteComplete* Arena::CreateMaybeMessage<::LabNet::Server::DataWriteComplete>(Arena*);
template<> ::LabNet::Server::DigitalInInitResult* Arena::CreateMaybeMessage<::LabNet::Server::DigitalInInitResult>(Arena*);
template<> ::LabNet::Server::DigitalInState* Arena::CreateMaybeMessage<::LabNet::Server::DigitalInState>(Arena*);
template<> ::LabNet::Server::DigitalOutInitResult* Arena::CreateMaybeMessage<::LabNet::Server::DigitalOutInitResult>(Arena*);
template<> ::LabNet::Server::DigitalOutLoopStartResult* Arena::CreateMaybeMessage<::LabNet::Server::DigitalOutLoopStartResult>(Arena*);
template<> ::LabNet::Server::DigitalOutLoopStopped* Arena::CreateMaybeMessage<::LabNet::Server::DigitalOutLoopStopped>(Arena*);
template<> ::LabNet::Server::DigitalOutState* Arena::CreateMaybeMessage<::LabNet::Server::DigitalOutState>(Arena*);
template<> ::LabNet::Server::InterfaceInitResult* Arena::CreateMaybeMessage<::LabNet::Server::InterfaceInitResult>(Arena*);
template<> ::LabNet::Server::InterfaceLost* Arena::CreateMaybeMessage<::LabNet::Server::InterfaceLost>(Arena*);
template<> ::LabNet::Server::InterfaceReconnected* Arena::CreateMaybeMessage<::LabNet::Server::InterfaceReconnected>(Arena*);
template<> ::LabNet::Server::LabNetIdReply* Arena::CreateMaybeMessage<::LabNet::Server::LabNetIdReply>(Arena*);
template<> ::LabNet::Server::LabNetResetReply* Arena::CreateMaybeMessage<::LabNet::Server::LabNetResetReply>(Arena*);
template<> ::LabNet::Server::NewByteData* Arena::CreateMaybeMessage<::LabNet::Server::NewByteData>(Arena*);
template<> ::LabNet::Server::OnlyOneConnectionAllowed* Arena::CreateMaybeMessage<::LabNet::Server::OnlyOneConnectionAllowed>(Arena*);
template<> ::LabNet::Server::ServerWrappedMessage* Arena::CreateMaybeMessage<::LabNet::Server::ServerWrappedMessage>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace LabNet {
namespace Server {

// ===================================================================

class DigitalOutState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LabNet.Server.DigitalOutState) */ {
 public:
  DigitalOutState();
  virtual ~DigitalOutState();

  DigitalOutState(const DigitalOutState& from);

  inline DigitalOutState& operator=(const DigitalOutState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DigitalOutState(DigitalOutState&& from) noexcept
    : DigitalOutState() {
    *this = ::std::move(from);
  }

  inline DigitalOutState& operator=(DigitalOutState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DigitalOutState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DigitalOutState* internal_default_instance() {
    return reinterpret_cast<const DigitalOutState*>(
               &_DigitalOutState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(DigitalOutState* other);
  friend void swap(DigitalOutState& a, DigitalOutState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DigitalOutState* New() const final {
    return CreateMaybeMessage<DigitalOutState>(NULL);
  }

  DigitalOutState* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DigitalOutState>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DigitalOutState& from);
  void MergeFrom(const DigitalOutState& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DigitalOutState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .LabNet.PinId pin = 1;
  bool has_pin() const;
  void clear_pin();
  static const int kPinFieldNumber = 1;
  private:
  const ::LabNet::PinId& _internal_pin() const;
  public:
  const ::LabNet::PinId& pin() const;
  ::LabNet::PinId* release_pin();
  ::LabNet::PinId* mutable_pin();
  void set_allocated_pin(::LabNet::PinId* pin);

  // bool state = 2;
  void clear_state();
  static const int kStateFieldNumber = 2;
  bool state() const;
  void set_state(bool value);

  // uint32 time = 3;
  void clear_time();
  static const int kTimeFieldNumber = 3;
  ::google::protobuf::uint32 time() const;
  void set_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:LabNet.Server.DigitalOutState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::LabNet::PinId* pin_;
  bool state_;
  ::google::protobuf::uint32 time_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_LabNetServer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DigitalInState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LabNet.Server.DigitalInState) */ {
 public:
  DigitalInState();
  virtual ~DigitalInState();

  DigitalInState(const DigitalInState& from);

  inline DigitalInState& operator=(const DigitalInState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DigitalInState(DigitalInState&& from) noexcept
    : DigitalInState() {
    *this = ::std::move(from);
  }

  inline DigitalInState& operator=(DigitalInState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DigitalInState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DigitalInState* internal_default_instance() {
    return reinterpret_cast<const DigitalInState*>(
               &_DigitalInState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(DigitalInState* other);
  friend void swap(DigitalInState& a, DigitalInState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DigitalInState* New() const final {
    return CreateMaybeMessage<DigitalInState>(NULL);
  }

  DigitalInState* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DigitalInState>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DigitalInState& from);
  void MergeFrom(const DigitalInState& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DigitalInState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .LabNet.PinId pin = 1;
  bool has_pin() const;
  void clear_pin();
  static const int kPinFieldNumber = 1;
  private:
  const ::LabNet::PinId& _internal_pin() const;
  public:
  const ::LabNet::PinId& pin() const;
  ::LabNet::PinId* release_pin();
  ::LabNet::PinId* mutable_pin();
  void set_allocated_pin(::LabNet::PinId* pin);

  // bool state = 2;
  void clear_state();
  static const int kStateFieldNumber = 2;
  bool state() const;
  void set_state(bool value);

  // uint32 time = 3;
  void clear_time();
  static const int kTimeFieldNumber = 3;
  ::google::protobuf::uint32 time() const;
  void set_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:LabNet.Server.DigitalInState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::LabNet::PinId* pin_;
  bool state_;
  ::google::protobuf::uint32 time_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_LabNetServer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NewByteData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LabNet.Server.NewByteData) */ {
 public:
  NewByteData();
  virtual ~NewByteData();

  NewByteData(const NewByteData& from);

  inline NewByteData& operator=(const NewByteData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NewByteData(NewByteData&& from) noexcept
    : NewByteData() {
    *this = ::std::move(from);
  }

  inline NewByteData& operator=(NewByteData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const NewByteData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NewByteData* internal_default_instance() {
    return reinterpret_cast<const NewByteData*>(
               &_NewByteData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(NewByteData* other);
  friend void swap(NewByteData& a, NewByteData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NewByteData* New() const final {
    return CreateMaybeMessage<NewByteData>(NULL);
  }

  NewByteData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NewByteData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NewByteData& from);
  void MergeFrom(const NewByteData& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NewByteData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes data = 2;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // .LabNet.PinId pin = 1;
  bool has_pin() const;
  void clear_pin();
  static const int kPinFieldNumber = 1;
  private:
  const ::LabNet::PinId& _internal_pin() const;
  public:
  const ::LabNet::PinId& pin() const;
  ::LabNet::PinId* release_pin();
  ::LabNet::PinId* mutable_pin();
  void set_allocated_pin(::LabNet::PinId* pin);

  // uint32 time = 3;
  void clear_time();
  static const int kTimeFieldNumber = 3;
  ::google::protobuf::uint32 time() const;
  void set_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:LabNet.Server.NewByteData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::LabNet::PinId* pin_;
  ::google::protobuf::uint32 time_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_LabNetServer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DataWriteComplete : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LabNet.Server.DataWriteComplete) */ {
 public:
  DataWriteComplete();
  virtual ~DataWriteComplete();

  DataWriteComplete(const DataWriteComplete& from);

  inline DataWriteComplete& operator=(const DataWriteComplete& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DataWriteComplete(DataWriteComplete&& from) noexcept
    : DataWriteComplete() {
    *this = ::std::move(from);
  }

  inline DataWriteComplete& operator=(DataWriteComplete&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DataWriteComplete& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataWriteComplete* internal_default_instance() {
    return reinterpret_cast<const DataWriteComplete*>(
               &_DataWriteComplete_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(DataWriteComplete* other);
  friend void swap(DataWriteComplete& a, DataWriteComplete& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DataWriteComplete* New() const final {
    return CreateMaybeMessage<DataWriteComplete>(NULL);
  }

  DataWriteComplete* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DataWriteComplete>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DataWriteComplete& from);
  void MergeFrom(const DataWriteComplete& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataWriteComplete* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .LabNet.PinId pin = 1;
  bool has_pin() const;
  void clear_pin();
  static const int kPinFieldNumber = 1;
  private:
  const ::LabNet::PinId& _internal_pin() const;
  public:
  const ::LabNet::PinId& pin() const;
  ::LabNet::PinId* release_pin();
  ::LabNet::PinId* mutable_pin();
  void set_allocated_pin(::LabNet::PinId* pin);

  // @@protoc_insertion_point(class_scope:LabNet.Server.DataWriteComplete)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::LabNet::PinId* pin_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_LabNetServer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class InterfaceInitResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LabNet.Server.InterfaceInitResult) */ {
 public:
  InterfaceInitResult();
  virtual ~InterfaceInitResult();

  InterfaceInitResult(const InterfaceInitResult& from);

  inline InterfaceInitResult& operator=(const InterfaceInitResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InterfaceInitResult(InterfaceInitResult&& from) noexcept
    : InterfaceInitResult() {
    *this = ::std::move(from);
  }

  inline InterfaceInitResult& operator=(InterfaceInitResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const InterfaceInitResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InterfaceInitResult* internal_default_instance() {
    return reinterpret_cast<const InterfaceInitResult*>(
               &_InterfaceInitResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(InterfaceInitResult* other);
  friend void swap(InterfaceInitResult& a, InterfaceInitResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InterfaceInitResult* New() const final {
    return CreateMaybeMessage<InterfaceInitResult>(NULL);
  }

  InterfaceInitResult* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<InterfaceInitResult>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const InterfaceInitResult& from);
  void MergeFrom(const InterfaceInitResult& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InterfaceInitResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .LabNet.Interfaces interface = 1;
  void clear_interface();
  static const int kInterfaceFieldNumber = 1;
  ::LabNet::Interfaces interface() const;
  void set_interface(::LabNet::Interfaces value);

  // bool is_succeed = 2;
  void clear_is_succeed();
  static const int kIsSucceedFieldNumber = 2;
  bool is_succeed() const;
  void set_is_succeed(bool value);

  // @@protoc_insertion_point(class_scope:LabNet.Server.InterfaceInitResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int interface_;
  bool is_succeed_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_LabNetServer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class InterfaceLost : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LabNet.Server.InterfaceLost) */ {
 public:
  InterfaceLost();
  virtual ~InterfaceLost();

  InterfaceLost(const InterfaceLost& from);

  inline InterfaceLost& operator=(const InterfaceLost& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InterfaceLost(InterfaceLost&& from) noexcept
    : InterfaceLost() {
    *this = ::std::move(from);
  }

  inline InterfaceLost& operator=(InterfaceLost&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const InterfaceLost& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InterfaceLost* internal_default_instance() {
    return reinterpret_cast<const InterfaceLost*>(
               &_InterfaceLost_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(InterfaceLost* other);
  friend void swap(InterfaceLost& a, InterfaceLost& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InterfaceLost* New() const final {
    return CreateMaybeMessage<InterfaceLost>(NULL);
  }

  InterfaceLost* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<InterfaceLost>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const InterfaceLost& from);
  void MergeFrom(const InterfaceLost& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InterfaceLost* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .LabNet.Interfaces interface = 1;
  void clear_interface();
  static const int kInterfaceFieldNumber = 1;
  ::LabNet::Interfaces interface() const;
  void set_interface(::LabNet::Interfaces value);

  // @@protoc_insertion_point(class_scope:LabNet.Server.InterfaceLost)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int interface_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_LabNetServer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class InterfaceReconnected : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LabNet.Server.InterfaceReconnected) */ {
 public:
  InterfaceReconnected();
  virtual ~InterfaceReconnected();

  InterfaceReconnected(const InterfaceReconnected& from);

  inline InterfaceReconnected& operator=(const InterfaceReconnected& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InterfaceReconnected(InterfaceReconnected&& from) noexcept
    : InterfaceReconnected() {
    *this = ::std::move(from);
  }

  inline InterfaceReconnected& operator=(InterfaceReconnected&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const InterfaceReconnected& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InterfaceReconnected* internal_default_instance() {
    return reinterpret_cast<const InterfaceReconnected*>(
               &_InterfaceReconnected_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(InterfaceReconnected* other);
  friend void swap(InterfaceReconnected& a, InterfaceReconnected& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InterfaceReconnected* New() const final {
    return CreateMaybeMessage<InterfaceReconnected>(NULL);
  }

  InterfaceReconnected* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<InterfaceReconnected>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const InterfaceReconnected& from);
  void MergeFrom(const InterfaceReconnected& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InterfaceReconnected* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .LabNet.Interfaces interface = 1;
  void clear_interface();
  static const int kInterfaceFieldNumber = 1;
  ::LabNet::Interfaces interface() const;
  void set_interface(::LabNet::Interfaces value);

  // @@protoc_insertion_point(class_scope:LabNet.Server.InterfaceReconnected)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int interface_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_LabNetServer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DigitalInInitResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LabNet.Server.DigitalInInitResult) */ {
 public:
  DigitalInInitResult();
  virtual ~DigitalInInitResult();

  DigitalInInitResult(const DigitalInInitResult& from);

  inline DigitalInInitResult& operator=(const DigitalInInitResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DigitalInInitResult(DigitalInInitResult&& from) noexcept
    : DigitalInInitResult() {
    *this = ::std::move(from);
  }

  inline DigitalInInitResult& operator=(DigitalInInitResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DigitalInInitResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DigitalInInitResult* internal_default_instance() {
    return reinterpret_cast<const DigitalInInitResult*>(
               &_DigitalInInitResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(DigitalInInitResult* other);
  friend void swap(DigitalInInitResult& a, DigitalInInitResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DigitalInInitResult* New() const final {
    return CreateMaybeMessage<DigitalInInitResult>(NULL);
  }

  DigitalInInitResult* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DigitalInInitResult>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DigitalInInitResult& from);
  void MergeFrom(const DigitalInInitResult& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DigitalInInitResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .LabNet.Interfaces interface = 1;
  void clear_interface();
  static const int kInterfaceFieldNumber = 1;
  ::LabNet::Interfaces interface() const;
  void set_interface(::LabNet::Interfaces value);

  // uint32 pin = 2;
  void clear_pin();
  static const int kPinFieldNumber = 2;
  ::google::protobuf::uint32 pin() const;
  void set_pin(::google::protobuf::uint32 value);

  // bool is_succeed = 3;
  void clear_is_succeed();
  static const int kIsSucceedFieldNumber = 3;
  bool is_succeed() const;
  void set_is_succeed(bool value);

  // @@protoc_insertion_point(class_scope:LabNet.Server.DigitalInInitResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int interface_;
  ::google::protobuf::uint32 pin_;
  bool is_succeed_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_LabNetServer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DigitalOutInitResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LabNet.Server.DigitalOutInitResult) */ {
 public:
  DigitalOutInitResult();
  virtual ~DigitalOutInitResult();

  DigitalOutInitResult(const DigitalOutInitResult& from);

  inline DigitalOutInitResult& operator=(const DigitalOutInitResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DigitalOutInitResult(DigitalOutInitResult&& from) noexcept
    : DigitalOutInitResult() {
    *this = ::std::move(from);
  }

  inline DigitalOutInitResult& operator=(DigitalOutInitResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DigitalOutInitResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DigitalOutInitResult* internal_default_instance() {
    return reinterpret_cast<const DigitalOutInitResult*>(
               &_DigitalOutInitResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(DigitalOutInitResult* other);
  friend void swap(DigitalOutInitResult& a, DigitalOutInitResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DigitalOutInitResult* New() const final {
    return CreateMaybeMessage<DigitalOutInitResult>(NULL);
  }

  DigitalOutInitResult* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DigitalOutInitResult>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DigitalOutInitResult& from);
  void MergeFrom(const DigitalOutInitResult& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DigitalOutInitResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .LabNet.Interfaces interface = 1;
  void clear_interface();
  static const int kInterfaceFieldNumber = 1;
  ::LabNet::Interfaces interface() const;
  void set_interface(::LabNet::Interfaces value);

  // uint32 pin = 2;
  void clear_pin();
  static const int kPinFieldNumber = 2;
  ::google::protobuf::uint32 pin() const;
  void set_pin(::google::protobuf::uint32 value);

  // bool is_succeed = 3;
  void clear_is_succeed();
  static const int kIsSucceedFieldNumber = 3;
  bool is_succeed() const;
  void set_is_succeed(bool value);

  // @@protoc_insertion_point(class_scope:LabNet.Server.DigitalOutInitResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int interface_;
  ::google::protobuf::uint32 pin_;
  bool is_succeed_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_LabNetServer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OnlyOneConnectionAllowed : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LabNet.Server.OnlyOneConnectionAllowed) */ {
 public:
  OnlyOneConnectionAllowed();
  virtual ~OnlyOneConnectionAllowed();

  OnlyOneConnectionAllowed(const OnlyOneConnectionAllowed& from);

  inline OnlyOneConnectionAllowed& operator=(const OnlyOneConnectionAllowed& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OnlyOneConnectionAllowed(OnlyOneConnectionAllowed&& from) noexcept
    : OnlyOneConnectionAllowed() {
    *this = ::std::move(from);
  }

  inline OnlyOneConnectionAllowed& operator=(OnlyOneConnectionAllowed&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const OnlyOneConnectionAllowed& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OnlyOneConnectionAllowed* internal_default_instance() {
    return reinterpret_cast<const OnlyOneConnectionAllowed*>(
               &_OnlyOneConnectionAllowed_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(OnlyOneConnectionAllowed* other);
  friend void swap(OnlyOneConnectionAllowed& a, OnlyOneConnectionAllowed& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OnlyOneConnectionAllowed* New() const final {
    return CreateMaybeMessage<OnlyOneConnectionAllowed>(NULL);
  }

  OnlyOneConnectionAllowed* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OnlyOneConnectionAllowed>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OnlyOneConnectionAllowed& from);
  void MergeFrom(const OnlyOneConnectionAllowed& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OnlyOneConnectionAllowed* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:LabNet.Server.OnlyOneConnectionAllowed)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_LabNetServer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LabNetResetReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LabNet.Server.LabNetResetReply) */ {
 public:
  LabNetResetReply();
  virtual ~LabNetResetReply();

  LabNetResetReply(const LabNetResetReply& from);

  inline LabNetResetReply& operator=(const LabNetResetReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LabNetResetReply(LabNetResetReply&& from) noexcept
    : LabNetResetReply() {
    *this = ::std::move(from);
  }

  inline LabNetResetReply& operator=(LabNetResetReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LabNetResetReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LabNetResetReply* internal_default_instance() {
    return reinterpret_cast<const LabNetResetReply*>(
               &_LabNetResetReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(LabNetResetReply* other);
  friend void swap(LabNetResetReply& a, LabNetResetReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LabNetResetReply* New() const final {
    return CreateMaybeMessage<LabNetResetReply>(NULL);
  }

  LabNetResetReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LabNetResetReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LabNetResetReply& from);
  void MergeFrom(const LabNetResetReply& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LabNetResetReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool is_reset = 1;
  void clear_is_reset();
  static const int kIsResetFieldNumber = 1;
  bool is_reset() const;
  void set_is_reset(bool value);

  // @@protoc_insertion_point(class_scope:LabNet.Server.LabNetResetReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool is_reset_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_LabNetServer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LabNetIdReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LabNet.Server.LabNetIdReply) */ {
 public:
  LabNetIdReply();
  virtual ~LabNetIdReply();

  LabNetIdReply(const LabNetIdReply& from);

  inline LabNetIdReply& operator=(const LabNetIdReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LabNetIdReply(LabNetIdReply&& from) noexcept
    : LabNetIdReply() {
    *this = ::std::move(from);
  }

  inline LabNetIdReply& operator=(LabNetIdReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LabNetIdReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LabNetIdReply* internal_default_instance() {
    return reinterpret_cast<const LabNetIdReply*>(
               &_LabNetIdReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(LabNetIdReply* other);
  friend void swap(LabNetIdReply& a, LabNetIdReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LabNetIdReply* New() const final {
    return CreateMaybeMessage<LabNetIdReply>(NULL);
  }

  LabNetIdReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LabNetIdReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LabNetIdReply& from);
  void MergeFrom(const LabNetIdReply& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LabNetIdReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // uint32 major_version = 2;
  void clear_major_version();
  static const int kMajorVersionFieldNumber = 2;
  ::google::protobuf::uint32 major_version() const;
  void set_major_version(::google::protobuf::uint32 value);

  // uint32 minor_version = 3;
  void clear_minor_version();
  static const int kMinorVersionFieldNumber = 3;
  ::google::protobuf::uint32 minor_version() const;
  void set_minor_version(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:LabNet.Server.LabNetIdReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::uint32 major_version_;
  ::google::protobuf::uint32 minor_version_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_LabNetServer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DigitalOutLoopStartResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LabNet.Server.DigitalOutLoopStartResult) */ {
 public:
  DigitalOutLoopStartResult();
  virtual ~DigitalOutLoopStartResult();

  DigitalOutLoopStartResult(const DigitalOutLoopStartResult& from);

  inline DigitalOutLoopStartResult& operator=(const DigitalOutLoopStartResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DigitalOutLoopStartResult(DigitalOutLoopStartResult&& from) noexcept
    : DigitalOutLoopStartResult() {
    *this = ::std::move(from);
  }

  inline DigitalOutLoopStartResult& operator=(DigitalOutLoopStartResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DigitalOutLoopStartResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DigitalOutLoopStartResult* internal_default_instance() {
    return reinterpret_cast<const DigitalOutLoopStartResult*>(
               &_DigitalOutLoopStartResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(DigitalOutLoopStartResult* other);
  friend void swap(DigitalOutLoopStartResult& a, DigitalOutLoopStartResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DigitalOutLoopStartResult* New() const final {
    return CreateMaybeMessage<DigitalOutLoopStartResult>(NULL);
  }

  DigitalOutLoopStartResult* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DigitalOutLoopStartResult>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DigitalOutLoopStartResult& from);
  void MergeFrom(const DigitalOutLoopStartResult& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DigitalOutLoopStartResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool is_succeed = 1;
  void clear_is_succeed();
  static const int kIsSucceedFieldNumber = 1;
  bool is_succeed() const;
  void set_is_succeed(bool value);

  // @@protoc_insertion_point(class_scope:LabNet.Server.DigitalOutLoopStartResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool is_succeed_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_LabNetServer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DigitalOutLoopStopped : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LabNet.Server.DigitalOutLoopStopped) */ {
 public:
  DigitalOutLoopStopped();
  virtual ~DigitalOutLoopStopped();

  DigitalOutLoopStopped(const DigitalOutLoopStopped& from);

  inline DigitalOutLoopStopped& operator=(const DigitalOutLoopStopped& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DigitalOutLoopStopped(DigitalOutLoopStopped&& from) noexcept
    : DigitalOutLoopStopped() {
    *this = ::std::move(from);
  }

  inline DigitalOutLoopStopped& operator=(DigitalOutLoopStopped&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DigitalOutLoopStopped& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DigitalOutLoopStopped* internal_default_instance() {
    return reinterpret_cast<const DigitalOutLoopStopped*>(
               &_DigitalOutLoopStopped_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(DigitalOutLoopStopped* other);
  friend void swap(DigitalOutLoopStopped& a, DigitalOutLoopStopped& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DigitalOutLoopStopped* New() const final {
    return CreateMaybeMessage<DigitalOutLoopStopped>(NULL);
  }

  DigitalOutLoopStopped* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DigitalOutLoopStopped>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DigitalOutLoopStopped& from);
  void MergeFrom(const DigitalOutLoopStopped& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DigitalOutLoopStopped* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string loop_name = 1;
  void clear_loop_name();
  static const int kLoopNameFieldNumber = 1;
  const ::std::string& loop_name() const;
  void set_loop_name(const ::std::string& value);
  #if LANG_CXX11
  void set_loop_name(::std::string&& value);
  #endif
  void set_loop_name(const char* value);
  void set_loop_name(const char* value, size_t size);
  ::std::string* mutable_loop_name();
  ::std::string* release_loop_name();
  void set_allocated_loop_name(::std::string* loop_name);

  // @@protoc_insertion_point(class_scope:LabNet.Server.DigitalOutLoopStopped)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr loop_name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_LabNetServer_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ServerWrappedMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LabNet.Server.ServerWrappedMessage) */ {
 public:
  ServerWrappedMessage();
  virtual ~ServerWrappedMessage();

  ServerWrappedMessage(const ServerWrappedMessage& from);

  inline ServerWrappedMessage& operator=(const ServerWrappedMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServerWrappedMessage(ServerWrappedMessage&& from) noexcept
    : ServerWrappedMessage() {
    *this = ::std::move(from);
  }

  inline ServerWrappedMessage& operator=(ServerWrappedMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerWrappedMessage& default_instance();

  enum ServerMessageCase {
    kDigitalOutState = 1,
    kDigitalInState = 2,
    kNewByteData = 3,
    kDataWriteComplete = 4,
    kInterfaceInitResult = 5,
    kDigitalInInitResult = 6,
    kDigitalOutInitResult = 7,
    kOnlyOneConnectionAllowed = 8,
    kReset = 9,
    kId = 10,
    kInterfaceLost = 11,
    kInterfaceReconnected = 12,
    kDigitalOutLoopStartResult = 13,
    kDigitalOutLoopStopped = 14,
    SERVER_MESSAGE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerWrappedMessage* internal_default_instance() {
    return reinterpret_cast<const ServerWrappedMessage*>(
               &_ServerWrappedMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(ServerWrappedMessage* other);
  friend void swap(ServerWrappedMessage& a, ServerWrappedMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServerWrappedMessage* New() const final {
    return CreateMaybeMessage<ServerWrappedMessage>(NULL);
  }

  ServerWrappedMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ServerWrappedMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ServerWrappedMessage& from);
  void MergeFrom(const ServerWrappedMessage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerWrappedMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .LabNet.Server.DigitalOutState digital_out_state = 1;
  bool has_digital_out_state() const;
  void clear_digital_out_state();
  static const int kDigitalOutStateFieldNumber = 1;
  private:
  const ::LabNet::Server::DigitalOutState& _internal_digital_out_state() const;
  public:
  const ::LabNet::Server::DigitalOutState& digital_out_state() const;
  ::LabNet::Server::DigitalOutState* release_digital_out_state();
  ::LabNet::Server::DigitalOutState* mutable_digital_out_state();
  void set_allocated_digital_out_state(::LabNet::Server::DigitalOutState* digital_out_state);

  // .LabNet.Server.DigitalInState digital_in_state = 2;
  bool has_digital_in_state() const;
  void clear_digital_in_state();
  static const int kDigitalInStateFieldNumber = 2;
  private:
  const ::LabNet::Server::DigitalInState& _internal_digital_in_state() const;
  public:
  const ::LabNet::Server::DigitalInState& digital_in_state() const;
  ::LabNet::Server::DigitalInState* release_digital_in_state();
  ::LabNet::Server::DigitalInState* mutable_digital_in_state();
  void set_allocated_digital_in_state(::LabNet::Server::DigitalInState* digital_in_state);

  // .LabNet.Server.NewByteData new_byte_data = 3;
  bool has_new_byte_data() const;
  void clear_new_byte_data();
  static const int kNewByteDataFieldNumber = 3;
  private:
  const ::LabNet::Server::NewByteData& _internal_new_byte_data() const;
  public:
  const ::LabNet::Server::NewByteData& new_byte_data() const;
  ::LabNet::Server::NewByteData* release_new_byte_data();
  ::LabNet::Server::NewByteData* mutable_new_byte_data();
  void set_allocated_new_byte_data(::LabNet::Server::NewByteData* new_byte_data);

  // .LabNet.Server.DataWriteComplete data_write_complete = 4;
  bool has_data_write_complete() const;
  void clear_data_write_complete();
  static const int kDataWriteCompleteFieldNumber = 4;
  private:
  const ::LabNet::Server::DataWriteComplete& _internal_data_write_complete() const;
  public:
  const ::LabNet::Server::DataWriteComplete& data_write_complete() const;
  ::LabNet::Server::DataWriteComplete* release_data_write_complete();
  ::LabNet::Server::DataWriteComplete* mutable_data_write_complete();
  void set_allocated_data_write_complete(::LabNet::Server::DataWriteComplete* data_write_complete);

  // .LabNet.Server.InterfaceInitResult interface_init_result = 5;
  bool has_interface_init_result() const;
  void clear_interface_init_result();
  static const int kInterfaceInitResultFieldNumber = 5;
  private:
  const ::LabNet::Server::InterfaceInitResult& _internal_interface_init_result() const;
  public:
  const ::LabNet::Server::InterfaceInitResult& interface_init_result() const;
  ::LabNet::Server::InterfaceInitResult* release_interface_init_result();
  ::LabNet::Server::InterfaceInitResult* mutable_interface_init_result();
  void set_allocated_interface_init_result(::LabNet::Server::InterfaceInitResult* interface_init_result);

  // .LabNet.Server.DigitalInInitResult digital_in_init_result = 6;
  bool has_digital_in_init_result() const;
  void clear_digital_in_init_result();
  static const int kDigitalInInitResultFieldNumber = 6;
  private:
  const ::LabNet::Server::DigitalInInitResult& _internal_digital_in_init_result() const;
  public:
  const ::LabNet::Server::DigitalInInitResult& digital_in_init_result() const;
  ::LabNet::Server::DigitalInInitResult* release_digital_in_init_result();
  ::LabNet::Server::DigitalInInitResult* mutable_digital_in_init_result();
  void set_allocated_digital_in_init_result(::LabNet::Server::DigitalInInitResult* digital_in_init_result);

  // .LabNet.Server.DigitalOutInitResult digital_out_init_result = 7;
  bool has_digital_out_init_result() const;
  void clear_digital_out_init_result();
  static const int kDigitalOutInitResultFieldNumber = 7;
  private:
  const ::LabNet::Server::DigitalOutInitResult& _internal_digital_out_init_result() const;
  public:
  const ::LabNet::Server::DigitalOutInitResult& digital_out_init_result() const;
  ::LabNet::Server::DigitalOutInitResult* release_digital_out_init_result();
  ::LabNet::Server::DigitalOutInitResult* mutable_digital_out_init_result();
  void set_allocated_digital_out_init_result(::LabNet::Server::DigitalOutInitResult* digital_out_init_result);

  // .LabNet.Server.OnlyOneConnectionAllowed only_one_connection_allowed = 8;
  bool has_only_one_connection_allowed() const;
  void clear_only_one_connection_allowed();
  static const int kOnlyOneConnectionAllowedFieldNumber = 8;
  private:
  const ::LabNet::Server::OnlyOneConnectionAllowed& _internal_only_one_connection_allowed() const;
  public:
  const ::LabNet::Server::OnlyOneConnectionAllowed& only_one_connection_allowed() const;
  ::LabNet::Server::OnlyOneConnectionAllowed* release_only_one_connection_allowed();
  ::LabNet::Server::OnlyOneConnectionAllowed* mutable_only_one_connection_allowed();
  void set_allocated_only_one_connection_allowed(::LabNet::Server::OnlyOneConnectionAllowed* only_one_connection_allowed);

  // .LabNet.Server.LabNetResetReply reset = 9;
  bool has_reset() const;
  void clear_reset();
  static const int kResetFieldNumber = 9;
  private:
  const ::LabNet::Server::LabNetResetReply& _internal_reset() const;
  public:
  const ::LabNet::Server::LabNetResetReply& reset() const;
  ::LabNet::Server::LabNetResetReply* release_reset();
  ::LabNet::Server::LabNetResetReply* mutable_reset();
  void set_allocated_reset(::LabNet::Server::LabNetResetReply* reset);

  // .LabNet.Server.LabNetIdReply id = 10;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 10;
  private:
  const ::LabNet::Server::LabNetIdReply& _internal_id() const;
  public:
  const ::LabNet::Server::LabNetIdReply& id() const;
  ::LabNet::Server::LabNetIdReply* release_id();
  ::LabNet::Server::LabNetIdReply* mutable_id();
  void set_allocated_id(::LabNet::Server::LabNetIdReply* id);

  // .LabNet.Server.InterfaceLost interface_lost = 11;
  bool has_interface_lost() const;
  void clear_interface_lost();
  static const int kInterfaceLostFieldNumber = 11;
  private:
  const ::LabNet::Server::InterfaceLost& _internal_interface_lost() const;
  public:
  const ::LabNet::Server::InterfaceLost& interface_lost() const;
  ::LabNet::Server::InterfaceLost* release_interface_lost();
  ::LabNet::Server::InterfaceLost* mutable_interface_lost();
  void set_allocated_interface_lost(::LabNet::Server::InterfaceLost* interface_lost);

  // .LabNet.Server.InterfaceReconnected interface_reconnected = 12;
  bool has_interface_reconnected() const;
  void clear_interface_reconnected();
  static const int kInterfaceReconnectedFieldNumber = 12;
  private:
  const ::LabNet::Server::InterfaceReconnected& _internal_interface_reconnected() const;
  public:
  const ::LabNet::Server::InterfaceReconnected& interface_reconnected() const;
  ::LabNet::Server::InterfaceReconnected* release_interface_reconnected();
  ::LabNet::Server::InterfaceReconnected* mutable_interface_reconnected();
  void set_allocated_interface_reconnected(::LabNet::Server::InterfaceReconnected* interface_reconnected);

  // .LabNet.Server.DigitalOutLoopStartResult digital_out_loop_start_result = 13;
  bool has_digital_out_loop_start_result() const;
  void clear_digital_out_loop_start_result();
  static const int kDigitalOutLoopStartResultFieldNumber = 13;
  private:
  const ::LabNet::Server::DigitalOutLoopStartResult& _internal_digital_out_loop_start_result() const;
  public:
  const ::LabNet::Server::DigitalOutLoopStartResult& digital_out_loop_start_result() const;
  ::LabNet::Server::DigitalOutLoopStartResult* release_digital_out_loop_start_result();
  ::LabNet::Server::DigitalOutLoopStartResult* mutable_digital_out_loop_start_result();
  void set_allocated_digital_out_loop_start_result(::LabNet::Server::DigitalOutLoopStartResult* digital_out_loop_start_result);

  // .LabNet.Server.DigitalOutLoopStopped digital_out_loop_stopped = 14;
  bool has_digital_out_loop_stopped() const;
  void clear_digital_out_loop_stopped();
  static const int kDigitalOutLoopStoppedFieldNumber = 14;
  private:
  const ::LabNet::Server::DigitalOutLoopStopped& _internal_digital_out_loop_stopped() const;
  public:
  const ::LabNet::Server::DigitalOutLoopStopped& digital_out_loop_stopped() const;
  ::LabNet::Server::DigitalOutLoopStopped* release_digital_out_loop_stopped();
  ::LabNet::Server::DigitalOutLoopStopped* mutable_digital_out_loop_stopped();
  void set_allocated_digital_out_loop_stopped(::LabNet::Server::DigitalOutLoopStopped* digital_out_loop_stopped);

  void clear_server_message();
  ServerMessageCase server_message_case() const;
  // @@protoc_insertion_point(class_scope:LabNet.Server.ServerWrappedMessage)
 private:
  void set_has_digital_out_state();
  void set_has_digital_in_state();
  void set_has_new_byte_data();
  void set_has_data_write_complete();
  void set_has_interface_init_result();
  void set_has_digital_in_init_result();
  void set_has_digital_out_init_result();
  void set_has_only_one_connection_allowed();
  void set_has_reset();
  void set_has_id();
  void set_has_interface_lost();
  void set_has_interface_reconnected();
  void set_has_digital_out_loop_start_result();
  void set_has_digital_out_loop_stopped();

  inline bool has_server_message() const;
  inline void clear_has_server_message();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union ServerMessageUnion {
    ServerMessageUnion() {}
    ::LabNet::Server::DigitalOutState* digital_out_state_;
    ::LabNet::Server::DigitalInState* digital_in_state_;
    ::LabNet::Server::NewByteData* new_byte_data_;
    ::LabNet::Server::DataWriteComplete* data_write_complete_;
    ::LabNet::Server::InterfaceInitResult* interface_init_result_;
    ::LabNet::Server::DigitalInInitResult* digital_in_init_result_;
    ::LabNet::Server::DigitalOutInitResult* digital_out_init_result_;
    ::LabNet::Server::OnlyOneConnectionAllowed* only_one_connection_allowed_;
    ::LabNet::Server::LabNetResetReply* reset_;
    ::LabNet::Server::LabNetIdReply* id_;
    ::LabNet::Server::InterfaceLost* interface_lost_;
    ::LabNet::Server::InterfaceReconnected* interface_reconnected_;
    ::LabNet::Server::DigitalOutLoopStartResult* digital_out_loop_start_result_;
    ::LabNet::Server::DigitalOutLoopStopped* digital_out_loop_stopped_;
  } server_message_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_LabNetServer_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DigitalOutState

// .LabNet.PinId pin = 1;
inline bool DigitalOutState::has_pin() const {
  return this != internal_default_instance() && pin_ != NULL;
}
inline const ::LabNet::PinId& DigitalOutState::_internal_pin() const {
  return *pin_;
}
inline const ::LabNet::PinId& DigitalOutState::pin() const {
  const ::LabNet::PinId* p = pin_;
  // @@protoc_insertion_point(field_get:LabNet.Server.DigitalOutState.pin)
  return p != NULL ? *p : *reinterpret_cast<const ::LabNet::PinId*>(
      &::LabNet::_PinId_default_instance_);
}
inline ::LabNet::PinId* DigitalOutState::release_pin() {
  // @@protoc_insertion_point(field_release:LabNet.Server.DigitalOutState.pin)
  
  ::LabNet::PinId* temp = pin_;
  pin_ = NULL;
  return temp;
}
inline ::LabNet::PinId* DigitalOutState::mutable_pin() {
  
  if (pin_ == NULL) {
    auto* p = CreateMaybeMessage<::LabNet::PinId>(GetArenaNoVirtual());
    pin_ = p;
  }
  // @@protoc_insertion_point(field_mutable:LabNet.Server.DigitalOutState.pin)
  return pin_;
}
inline void DigitalOutState::set_allocated_pin(::LabNet::PinId* pin) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(pin_);
  }
  if (pin) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pin = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pin, submessage_arena);
    }
    
  } else {
    
  }
  pin_ = pin;
  // @@protoc_insertion_point(field_set_allocated:LabNet.Server.DigitalOutState.pin)
}

// bool state = 2;
inline void DigitalOutState::clear_state() {
  state_ = false;
}
inline bool DigitalOutState::state() const {
  // @@protoc_insertion_point(field_get:LabNet.Server.DigitalOutState.state)
  return state_;
}
inline void DigitalOutState::set_state(bool value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:LabNet.Server.DigitalOutState.state)
}

// uint32 time = 3;
inline void DigitalOutState::clear_time() {
  time_ = 0u;
}
inline ::google::protobuf::uint32 DigitalOutState::time() const {
  // @@protoc_insertion_point(field_get:LabNet.Server.DigitalOutState.time)
  return time_;
}
inline void DigitalOutState::set_time(::google::protobuf::uint32 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:LabNet.Server.DigitalOutState.time)
}

// -------------------------------------------------------------------

// DigitalInState

// .LabNet.PinId pin = 1;
inline bool DigitalInState::has_pin() const {
  return this != internal_default_instance() && pin_ != NULL;
}
inline const ::LabNet::PinId& DigitalInState::_internal_pin() const {
  return *pin_;
}
inline const ::LabNet::PinId& DigitalInState::pin() const {
  const ::LabNet::PinId* p = pin_;
  // @@protoc_insertion_point(field_get:LabNet.Server.DigitalInState.pin)
  return p != NULL ? *p : *reinterpret_cast<const ::LabNet::PinId*>(
      &::LabNet::_PinId_default_instance_);
}
inline ::LabNet::PinId* DigitalInState::release_pin() {
  // @@protoc_insertion_point(field_release:LabNet.Server.DigitalInState.pin)
  
  ::LabNet::PinId* temp = pin_;
  pin_ = NULL;
  return temp;
}
inline ::LabNet::PinId* DigitalInState::mutable_pin() {
  
  if (pin_ == NULL) {
    auto* p = CreateMaybeMessage<::LabNet::PinId>(GetArenaNoVirtual());
    pin_ = p;
  }
  // @@protoc_insertion_point(field_mutable:LabNet.Server.DigitalInState.pin)
  return pin_;
}
inline void DigitalInState::set_allocated_pin(::LabNet::PinId* pin) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(pin_);
  }
  if (pin) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pin = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pin, submessage_arena);
    }
    
  } else {
    
  }
  pin_ = pin;
  // @@protoc_insertion_point(field_set_allocated:LabNet.Server.DigitalInState.pin)
}

// bool state = 2;
inline void DigitalInState::clear_state() {
  state_ = false;
}
inline bool DigitalInState::state() const {
  // @@protoc_insertion_point(field_get:LabNet.Server.DigitalInState.state)
  return state_;
}
inline void DigitalInState::set_state(bool value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:LabNet.Server.DigitalInState.state)
}

// uint32 time = 3;
inline void DigitalInState::clear_time() {
  time_ = 0u;
}
inline ::google::protobuf::uint32 DigitalInState::time() const {
  // @@protoc_insertion_point(field_get:LabNet.Server.DigitalInState.time)
  return time_;
}
inline void DigitalInState::set_time(::google::protobuf::uint32 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:LabNet.Server.DigitalInState.time)
}

// -------------------------------------------------------------------

// NewByteData

// .LabNet.PinId pin = 1;
inline bool NewByteData::has_pin() const {
  return this != internal_default_instance() && pin_ != NULL;
}
inline const ::LabNet::PinId& NewByteData::_internal_pin() const {
  return *pin_;
}
inline const ::LabNet::PinId& NewByteData::pin() const {
  const ::LabNet::PinId* p = pin_;
  // @@protoc_insertion_point(field_get:LabNet.Server.NewByteData.pin)
  return p != NULL ? *p : *reinterpret_cast<const ::LabNet::PinId*>(
      &::LabNet::_PinId_default_instance_);
}
inline ::LabNet::PinId* NewByteData::release_pin() {
  // @@protoc_insertion_point(field_release:LabNet.Server.NewByteData.pin)
  
  ::LabNet::PinId* temp = pin_;
  pin_ = NULL;
  return temp;
}
inline ::LabNet::PinId* NewByteData::mutable_pin() {
  
  if (pin_ == NULL) {
    auto* p = CreateMaybeMessage<::LabNet::PinId>(GetArenaNoVirtual());
    pin_ = p;
  }
  // @@protoc_insertion_point(field_mutable:LabNet.Server.NewByteData.pin)
  return pin_;
}
inline void NewByteData::set_allocated_pin(::LabNet::PinId* pin) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(pin_);
  }
  if (pin) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pin = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pin, submessage_arena);
    }
    
  } else {
    
  }
  pin_ = pin;
  // @@protoc_insertion_point(field_set_allocated:LabNet.Server.NewByteData.pin)
}

// bytes data = 2;
inline void NewByteData::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NewByteData::data() const {
  // @@protoc_insertion_point(field_get:LabNet.Server.NewByteData.data)
  return data_.GetNoArena();
}
inline void NewByteData::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LabNet.Server.NewByteData.data)
}
#if LANG_CXX11
inline void NewByteData::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LabNet.Server.NewByteData.data)
}
#endif
inline void NewByteData::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LabNet.Server.NewByteData.data)
}
inline void NewByteData::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LabNet.Server.NewByteData.data)
}
inline ::std::string* NewByteData::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:LabNet.Server.NewByteData.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NewByteData::release_data() {
  // @@protoc_insertion_point(field_release:LabNet.Server.NewByteData.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewByteData::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:LabNet.Server.NewByteData.data)
}

// uint32 time = 3;
inline void NewByteData::clear_time() {
  time_ = 0u;
}
inline ::google::protobuf::uint32 NewByteData::time() const {
  // @@protoc_insertion_point(field_get:LabNet.Server.NewByteData.time)
  return time_;
}
inline void NewByteData::set_time(::google::protobuf::uint32 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:LabNet.Server.NewByteData.time)
}

// -------------------------------------------------------------------

// DataWriteComplete

// .LabNet.PinId pin = 1;
inline bool DataWriteComplete::has_pin() const {
  return this != internal_default_instance() && pin_ != NULL;
}
inline const ::LabNet::PinId& DataWriteComplete::_internal_pin() const {
  return *pin_;
}
inline const ::LabNet::PinId& DataWriteComplete::pin() const {
  const ::LabNet::PinId* p = pin_;
  // @@protoc_insertion_point(field_get:LabNet.Server.DataWriteComplete.pin)
  return p != NULL ? *p : *reinterpret_cast<const ::LabNet::PinId*>(
      &::LabNet::_PinId_default_instance_);
}
inline ::LabNet::PinId* DataWriteComplete::release_pin() {
  // @@protoc_insertion_point(field_release:LabNet.Server.DataWriteComplete.pin)
  
  ::LabNet::PinId* temp = pin_;
  pin_ = NULL;
  return temp;
}
inline ::LabNet::PinId* DataWriteComplete::mutable_pin() {
  
  if (pin_ == NULL) {
    auto* p = CreateMaybeMessage<::LabNet::PinId>(GetArenaNoVirtual());
    pin_ = p;
  }
  // @@protoc_insertion_point(field_mutable:LabNet.Server.DataWriteComplete.pin)
  return pin_;
}
inline void DataWriteComplete::set_allocated_pin(::LabNet::PinId* pin) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(pin_);
  }
  if (pin) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pin = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pin, submessage_arena);
    }
    
  } else {
    
  }
  pin_ = pin;
  // @@protoc_insertion_point(field_set_allocated:LabNet.Server.DataWriteComplete.pin)
}

// -------------------------------------------------------------------

// InterfaceInitResult

// .LabNet.Interfaces interface = 1;
inline void InterfaceInitResult::clear_interface() {
  interface_ = 0;
}
inline ::LabNet::Interfaces InterfaceInitResult::interface() const {
  // @@protoc_insertion_point(field_get:LabNet.Server.InterfaceInitResult.interface)
  return static_cast< ::LabNet::Interfaces >(interface_);
}
inline void InterfaceInitResult::set_interface(::LabNet::Interfaces value) {
  
  interface_ = value;
  // @@protoc_insertion_point(field_set:LabNet.Server.InterfaceInitResult.interface)
}

// bool is_succeed = 2;
inline void InterfaceInitResult::clear_is_succeed() {
  is_succeed_ = false;
}
inline bool InterfaceInitResult::is_succeed() const {
  // @@protoc_insertion_point(field_get:LabNet.Server.InterfaceInitResult.is_succeed)
  return is_succeed_;
}
inline void InterfaceInitResult::set_is_succeed(bool value) {
  
  is_succeed_ = value;
  // @@protoc_insertion_point(field_set:LabNet.Server.InterfaceInitResult.is_succeed)
}

// -------------------------------------------------------------------

// InterfaceLost

// .LabNet.Interfaces interface = 1;
inline void InterfaceLost::clear_interface() {
  interface_ = 0;
}
inline ::LabNet::Interfaces InterfaceLost::interface() const {
  // @@protoc_insertion_point(field_get:LabNet.Server.InterfaceLost.interface)
  return static_cast< ::LabNet::Interfaces >(interface_);
}
inline void InterfaceLost::set_interface(::LabNet::Interfaces value) {
  
  interface_ = value;
  // @@protoc_insertion_point(field_set:LabNet.Server.InterfaceLost.interface)
}

// -------------------------------------------------------------------

// InterfaceReconnected

// .LabNet.Interfaces interface = 1;
inline void InterfaceReconnected::clear_interface() {
  interface_ = 0;
}
inline ::LabNet::Interfaces InterfaceReconnected::interface() const {
  // @@protoc_insertion_point(field_get:LabNet.Server.InterfaceReconnected.interface)
  return static_cast< ::LabNet::Interfaces >(interface_);
}
inline void InterfaceReconnected::set_interface(::LabNet::Interfaces value) {
  
  interface_ = value;
  // @@protoc_insertion_point(field_set:LabNet.Server.InterfaceReconnected.interface)
}

// -------------------------------------------------------------------

// DigitalInInitResult

// .LabNet.Interfaces interface = 1;
inline void DigitalInInitResult::clear_interface() {
  interface_ = 0;
}
inline ::LabNet::Interfaces DigitalInInitResult::interface() const {
  // @@protoc_insertion_point(field_get:LabNet.Server.DigitalInInitResult.interface)
  return static_cast< ::LabNet::Interfaces >(interface_);
}
inline void DigitalInInitResult::set_interface(::LabNet::Interfaces value) {
  
  interface_ = value;
  // @@protoc_insertion_point(field_set:LabNet.Server.DigitalInInitResult.interface)
}

// uint32 pin = 2;
inline void DigitalInInitResult::clear_pin() {
  pin_ = 0u;
}
inline ::google::protobuf::uint32 DigitalInInitResult::pin() const {
  // @@protoc_insertion_point(field_get:LabNet.Server.DigitalInInitResult.pin)
  return pin_;
}
inline void DigitalInInitResult::set_pin(::google::protobuf::uint32 value) {
  
  pin_ = value;
  // @@protoc_insertion_point(field_set:LabNet.Server.DigitalInInitResult.pin)
}

// bool is_succeed = 3;
inline void DigitalInInitResult::clear_is_succeed() {
  is_succeed_ = false;
}
inline bool DigitalInInitResult::is_succeed() const {
  // @@protoc_insertion_point(field_get:LabNet.Server.DigitalInInitResult.is_succeed)
  return is_succeed_;
}
inline void DigitalInInitResult::set_is_succeed(bool value) {
  
  is_succeed_ = value;
  // @@protoc_insertion_point(field_set:LabNet.Server.DigitalInInitResult.is_succeed)
}

// -------------------------------------------------------------------

// DigitalOutInitResult

// .LabNet.Interfaces interface = 1;
inline void DigitalOutInitResult::clear_interface() {
  interface_ = 0;
}
inline ::LabNet::Interfaces DigitalOutInitResult::interface() const {
  // @@protoc_insertion_point(field_get:LabNet.Server.DigitalOutInitResult.interface)
  return static_cast< ::LabNet::Interfaces >(interface_);
}
inline void DigitalOutInitResult::set_interface(::LabNet::Interfaces value) {
  
  interface_ = value;
  // @@protoc_insertion_point(field_set:LabNet.Server.DigitalOutInitResult.interface)
}

// uint32 pin = 2;
inline void DigitalOutInitResult::clear_pin() {
  pin_ = 0u;
}
inline ::google::protobuf::uint32 DigitalOutInitResult::pin() const {
  // @@protoc_insertion_point(field_get:LabNet.Server.DigitalOutInitResult.pin)
  return pin_;
}
inline void DigitalOutInitResult::set_pin(::google::protobuf::uint32 value) {
  
  pin_ = value;
  // @@protoc_insertion_point(field_set:LabNet.Server.DigitalOutInitResult.pin)
}

// bool is_succeed = 3;
inline void DigitalOutInitResult::clear_is_succeed() {
  is_succeed_ = false;
}
inline bool DigitalOutInitResult::is_succeed() const {
  // @@protoc_insertion_point(field_get:LabNet.Server.DigitalOutInitResult.is_succeed)
  return is_succeed_;
}
inline void DigitalOutInitResult::set_is_succeed(bool value) {
  
  is_succeed_ = value;
  // @@protoc_insertion_point(field_set:LabNet.Server.DigitalOutInitResult.is_succeed)
}

// -------------------------------------------------------------------

// OnlyOneConnectionAllowed

// -------------------------------------------------------------------

// LabNetResetReply

// bool is_reset = 1;
inline void LabNetResetReply::clear_is_reset() {
  is_reset_ = false;
}
inline bool LabNetResetReply::is_reset() const {
  // @@protoc_insertion_point(field_get:LabNet.Server.LabNetResetReply.is_reset)
  return is_reset_;
}
inline void LabNetResetReply::set_is_reset(bool value) {
  
  is_reset_ = value;
  // @@protoc_insertion_point(field_set:LabNet.Server.LabNetResetReply.is_reset)
}

// -------------------------------------------------------------------

// LabNetIdReply

// string id = 1;
inline void LabNetIdReply::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LabNetIdReply::id() const {
  // @@protoc_insertion_point(field_get:LabNet.Server.LabNetIdReply.id)
  return id_.GetNoArena();
}
inline void LabNetIdReply::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LabNet.Server.LabNetIdReply.id)
}
#if LANG_CXX11
inline void LabNetIdReply::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LabNet.Server.LabNetIdReply.id)
}
#endif
inline void LabNetIdReply::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LabNet.Server.LabNetIdReply.id)
}
inline void LabNetIdReply::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LabNet.Server.LabNetIdReply.id)
}
inline ::std::string* LabNetIdReply::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:LabNet.Server.LabNetIdReply.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LabNetIdReply::release_id() {
  // @@protoc_insertion_point(field_release:LabNet.Server.LabNetIdReply.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LabNetIdReply::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:LabNet.Server.LabNetIdReply.id)
}

// uint32 major_version = 2;
inline void LabNetIdReply::clear_major_version() {
  major_version_ = 0u;
}
inline ::google::protobuf::uint32 LabNetIdReply::major_version() const {
  // @@protoc_insertion_point(field_get:LabNet.Server.LabNetIdReply.major_version)
  return major_version_;
}
inline void LabNetIdReply::set_major_version(::google::protobuf::uint32 value) {
  
  major_version_ = value;
  // @@protoc_insertion_point(field_set:LabNet.Server.LabNetIdReply.major_version)
}

// uint32 minor_version = 3;
inline void LabNetIdReply::clear_minor_version() {
  minor_version_ = 0u;
}
inline ::google::protobuf::uint32 LabNetIdReply::minor_version() const {
  // @@protoc_insertion_point(field_get:LabNet.Server.LabNetIdReply.minor_version)
  return minor_version_;
}
inline void LabNetIdReply::set_minor_version(::google::protobuf::uint32 value) {
  
  minor_version_ = value;
  // @@protoc_insertion_point(field_set:LabNet.Server.LabNetIdReply.minor_version)
}

// -------------------------------------------------------------------

// DigitalOutLoopStartResult

// bool is_succeed = 1;
inline void DigitalOutLoopStartResult::clear_is_succeed() {
  is_succeed_ = false;
}
inline bool DigitalOutLoopStartResult::is_succeed() const {
  // @@protoc_insertion_point(field_get:LabNet.Server.DigitalOutLoopStartResult.is_succeed)
  return is_succeed_;
}
inline void DigitalOutLoopStartResult::set_is_succeed(bool value) {
  
  is_succeed_ = value;
  // @@protoc_insertion_point(field_set:LabNet.Server.DigitalOutLoopStartResult.is_succeed)
}

// -------------------------------------------------------------------

// DigitalOutLoopStopped

// string loop_name = 1;
inline void DigitalOutLoopStopped::clear_loop_name() {
  loop_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DigitalOutLoopStopped::loop_name() const {
  // @@protoc_insertion_point(field_get:LabNet.Server.DigitalOutLoopStopped.loop_name)
  return loop_name_.GetNoArena();
}
inline void DigitalOutLoopStopped::set_loop_name(const ::std::string& value) {
  
  loop_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LabNet.Server.DigitalOutLoopStopped.loop_name)
}
#if LANG_CXX11
inline void DigitalOutLoopStopped::set_loop_name(::std::string&& value) {
  
  loop_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LabNet.Server.DigitalOutLoopStopped.loop_name)
}
#endif
inline void DigitalOutLoopStopped::set_loop_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  loop_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LabNet.Server.DigitalOutLoopStopped.loop_name)
}
inline void DigitalOutLoopStopped::set_loop_name(const char* value, size_t size) {
  
  loop_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LabNet.Server.DigitalOutLoopStopped.loop_name)
}
inline ::std::string* DigitalOutLoopStopped::mutable_loop_name() {
  
  // @@protoc_insertion_point(field_mutable:LabNet.Server.DigitalOutLoopStopped.loop_name)
  return loop_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DigitalOutLoopStopped::release_loop_name() {
  // @@protoc_insertion_point(field_release:LabNet.Server.DigitalOutLoopStopped.loop_name)
  
  return loop_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DigitalOutLoopStopped::set_allocated_loop_name(::std::string* loop_name) {
  if (loop_name != NULL) {
    
  } else {
    
  }
  loop_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), loop_name);
  // @@protoc_insertion_point(field_set_allocated:LabNet.Server.DigitalOutLoopStopped.loop_name)
}

// -------------------------------------------------------------------

// ServerWrappedMessage

// .LabNet.Server.DigitalOutState digital_out_state = 1;
inline bool ServerWrappedMessage::has_digital_out_state() const {
  return server_message_case() == kDigitalOutState;
}
inline void ServerWrappedMessage::set_has_digital_out_state() {
  _oneof_case_[0] = kDigitalOutState;
}
inline void ServerWrappedMessage::clear_digital_out_state() {
  if (has_digital_out_state()) {
    delete server_message_.digital_out_state_;
    clear_has_server_message();
  }
}
inline const ::LabNet::Server::DigitalOutState& ServerWrappedMessage::_internal_digital_out_state() const {
  return *server_message_.digital_out_state_;
}
inline ::LabNet::Server::DigitalOutState* ServerWrappedMessage::release_digital_out_state() {
  // @@protoc_insertion_point(field_release:LabNet.Server.ServerWrappedMessage.digital_out_state)
  if (has_digital_out_state()) {
    clear_has_server_message();
      ::LabNet::Server::DigitalOutState* temp = server_message_.digital_out_state_;
    server_message_.digital_out_state_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::LabNet::Server::DigitalOutState& ServerWrappedMessage::digital_out_state() const {
  // @@protoc_insertion_point(field_get:LabNet.Server.ServerWrappedMessage.digital_out_state)
  return has_digital_out_state()
      ? *server_message_.digital_out_state_
      : *reinterpret_cast< ::LabNet::Server::DigitalOutState*>(&::LabNet::Server::_DigitalOutState_default_instance_);
}
inline ::LabNet::Server::DigitalOutState* ServerWrappedMessage::mutable_digital_out_state() {
  if (!has_digital_out_state()) {
    clear_server_message();
    set_has_digital_out_state();
    server_message_.digital_out_state_ = CreateMaybeMessage< ::LabNet::Server::DigitalOutState >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:LabNet.Server.ServerWrappedMessage.digital_out_state)
  return server_message_.digital_out_state_;
}

// .LabNet.Server.DigitalInState digital_in_state = 2;
inline bool ServerWrappedMessage::has_digital_in_state() const {
  return server_message_case() == kDigitalInState;
}
inline void ServerWrappedMessage::set_has_digital_in_state() {
  _oneof_case_[0] = kDigitalInState;
}
inline void ServerWrappedMessage::clear_digital_in_state() {
  if (has_digital_in_state()) {
    delete server_message_.digital_in_state_;
    clear_has_server_message();
  }
}
inline const ::LabNet::Server::DigitalInState& ServerWrappedMessage::_internal_digital_in_state() const {
  return *server_message_.digital_in_state_;
}
inline ::LabNet::Server::DigitalInState* ServerWrappedMessage::release_digital_in_state() {
  // @@protoc_insertion_point(field_release:LabNet.Server.ServerWrappedMessage.digital_in_state)
  if (has_digital_in_state()) {
    clear_has_server_message();
      ::LabNet::Server::DigitalInState* temp = server_message_.digital_in_state_;
    server_message_.digital_in_state_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::LabNet::Server::DigitalInState& ServerWrappedMessage::digital_in_state() const {
  // @@protoc_insertion_point(field_get:LabNet.Server.ServerWrappedMessage.digital_in_state)
  return has_digital_in_state()
      ? *server_message_.digital_in_state_
      : *reinterpret_cast< ::LabNet::Server::DigitalInState*>(&::LabNet::Server::_DigitalInState_default_instance_);
}
inline ::LabNet::Server::DigitalInState* ServerWrappedMessage::mutable_digital_in_state() {
  if (!has_digital_in_state()) {
    clear_server_message();
    set_has_digital_in_state();
    server_message_.digital_in_state_ = CreateMaybeMessage< ::LabNet::Server::DigitalInState >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:LabNet.Server.ServerWrappedMessage.digital_in_state)
  return server_message_.digital_in_state_;
}

// .LabNet.Server.NewByteData new_byte_data = 3;
inline bool ServerWrappedMessage::has_new_byte_data() const {
  return server_message_case() == kNewByteData;
}
inline void ServerWrappedMessage::set_has_new_byte_data() {
  _oneof_case_[0] = kNewByteData;
}
inline void ServerWrappedMessage::clear_new_byte_data() {
  if (has_new_byte_data()) {
    delete server_message_.new_byte_data_;
    clear_has_server_message();
  }
}
inline const ::LabNet::Server::NewByteData& ServerWrappedMessage::_internal_new_byte_data() const {
  return *server_message_.new_byte_data_;
}
inline ::LabNet::Server::NewByteData* ServerWrappedMessage::release_new_byte_data() {
  // @@protoc_insertion_point(field_release:LabNet.Server.ServerWrappedMessage.new_byte_data)
  if (has_new_byte_data()) {
    clear_has_server_message();
      ::LabNet::Server::NewByteData* temp = server_message_.new_byte_data_;
    server_message_.new_byte_data_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::LabNet::Server::NewByteData& ServerWrappedMessage::new_byte_data() const {
  // @@protoc_insertion_point(field_get:LabNet.Server.ServerWrappedMessage.new_byte_data)
  return has_new_byte_data()
      ? *server_message_.new_byte_data_
      : *reinterpret_cast< ::LabNet::Server::NewByteData*>(&::LabNet::Server::_NewByteData_default_instance_);
}
inline ::LabNet::Server::NewByteData* ServerWrappedMessage::mutable_new_byte_data() {
  if (!has_new_byte_data()) {
    clear_server_message();
    set_has_new_byte_data();
    server_message_.new_byte_data_ = CreateMaybeMessage< ::LabNet::Server::NewByteData >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:LabNet.Server.ServerWrappedMessage.new_byte_data)
  return server_message_.new_byte_data_;
}

// .LabNet.Server.DataWriteComplete data_write_complete = 4;
inline bool ServerWrappedMessage::has_data_write_complete() const {
  return server_message_case() == kDataWriteComplete;
}
inline void ServerWrappedMessage::set_has_data_write_complete() {
  _oneof_case_[0] = kDataWriteComplete;
}
inline void ServerWrappedMessage::clear_data_write_complete() {
  if (has_data_write_complete()) {
    delete server_message_.data_write_complete_;
    clear_has_server_message();
  }
}
inline const ::LabNet::Server::DataWriteComplete& ServerWrappedMessage::_internal_data_write_complete() const {
  return *server_message_.data_write_complete_;
}
inline ::LabNet::Server::DataWriteComplete* ServerWrappedMessage::release_data_write_complete() {
  // @@protoc_insertion_point(field_release:LabNet.Server.ServerWrappedMessage.data_write_complete)
  if (has_data_write_complete()) {
    clear_has_server_message();
      ::LabNet::Server::DataWriteComplete* temp = server_message_.data_write_complete_;
    server_message_.data_write_complete_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::LabNet::Server::DataWriteComplete& ServerWrappedMessage::data_write_complete() const {
  // @@protoc_insertion_point(field_get:LabNet.Server.ServerWrappedMessage.data_write_complete)
  return has_data_write_complete()
      ? *server_message_.data_write_complete_
      : *reinterpret_cast< ::LabNet::Server::DataWriteComplete*>(&::LabNet::Server::_DataWriteComplete_default_instance_);
}
inline ::LabNet::Server::DataWriteComplete* ServerWrappedMessage::mutable_data_write_complete() {
  if (!has_data_write_complete()) {
    clear_server_message();
    set_has_data_write_complete();
    server_message_.data_write_complete_ = CreateMaybeMessage< ::LabNet::Server::DataWriteComplete >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:LabNet.Server.ServerWrappedMessage.data_write_complete)
  return server_message_.data_write_complete_;
}

// .LabNet.Server.InterfaceInitResult interface_init_result = 5;
inline bool ServerWrappedMessage::has_interface_init_result() const {
  return server_message_case() == kInterfaceInitResult;
}
inline void ServerWrappedMessage::set_has_interface_init_result() {
  _oneof_case_[0] = kInterfaceInitResult;
}
inline void ServerWrappedMessage::clear_interface_init_result() {
  if (has_interface_init_result()) {
    delete server_message_.interface_init_result_;
    clear_has_server_message();
  }
}
inline const ::LabNet::Server::InterfaceInitResult& ServerWrappedMessage::_internal_interface_init_result() const {
  return *server_message_.interface_init_result_;
}
inline ::LabNet::Server::InterfaceInitResult* ServerWrappedMessage::release_interface_init_result() {
  // @@protoc_insertion_point(field_release:LabNet.Server.ServerWrappedMessage.interface_init_result)
  if (has_interface_init_result()) {
    clear_has_server_message();
      ::LabNet::Server::InterfaceInitResult* temp = server_message_.interface_init_result_;
    server_message_.interface_init_result_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::LabNet::Server::InterfaceInitResult& ServerWrappedMessage::interface_init_result() const {
  // @@protoc_insertion_point(field_get:LabNet.Server.ServerWrappedMessage.interface_init_result)
  return has_interface_init_result()
      ? *server_message_.interface_init_result_
      : *reinterpret_cast< ::LabNet::Server::InterfaceInitResult*>(&::LabNet::Server::_InterfaceInitResult_default_instance_);
}
inline ::LabNet::Server::InterfaceInitResult* ServerWrappedMessage::mutable_interface_init_result() {
  if (!has_interface_init_result()) {
    clear_server_message();
    set_has_interface_init_result();
    server_message_.interface_init_result_ = CreateMaybeMessage< ::LabNet::Server::InterfaceInitResult >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:LabNet.Server.ServerWrappedMessage.interface_init_result)
  return server_message_.interface_init_result_;
}

// .LabNet.Server.DigitalInInitResult digital_in_init_result = 6;
inline bool ServerWrappedMessage::has_digital_in_init_result() const {
  return server_message_case() == kDigitalInInitResult;
}
inline void ServerWrappedMessage::set_has_digital_in_init_result() {
  _oneof_case_[0] = kDigitalInInitResult;
}
inline void ServerWrappedMessage::clear_digital_in_init_result() {
  if (has_digital_in_init_result()) {
    delete server_message_.digital_in_init_result_;
    clear_has_server_message();
  }
}
inline const ::LabNet::Server::DigitalInInitResult& ServerWrappedMessage::_internal_digital_in_init_result() const {
  return *server_message_.digital_in_init_result_;
}
inline ::LabNet::Server::DigitalInInitResult* ServerWrappedMessage::release_digital_in_init_result() {
  // @@protoc_insertion_point(field_release:LabNet.Server.ServerWrappedMessage.digital_in_init_result)
  if (has_digital_in_init_result()) {
    clear_has_server_message();
      ::LabNet::Server::DigitalInInitResult* temp = server_message_.digital_in_init_result_;
    server_message_.digital_in_init_result_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::LabNet::Server::DigitalInInitResult& ServerWrappedMessage::digital_in_init_result() const {
  // @@protoc_insertion_point(field_get:LabNet.Server.ServerWrappedMessage.digital_in_init_result)
  return has_digital_in_init_result()
      ? *server_message_.digital_in_init_result_
      : *reinterpret_cast< ::LabNet::Server::DigitalInInitResult*>(&::LabNet::Server::_DigitalInInitResult_default_instance_);
}
inline ::LabNet::Server::DigitalInInitResult* ServerWrappedMessage::mutable_digital_in_init_result() {
  if (!has_digital_in_init_result()) {
    clear_server_message();
    set_has_digital_in_init_result();
    server_message_.digital_in_init_result_ = CreateMaybeMessage< ::LabNet::Server::DigitalInInitResult >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:LabNet.Server.ServerWrappedMessage.digital_in_init_result)
  return server_message_.digital_in_init_result_;
}

// .LabNet.Server.DigitalOutInitResult digital_out_init_result = 7;
inline bool ServerWrappedMessage::has_digital_out_init_result() const {
  return server_message_case() == kDigitalOutInitResult;
}
inline void ServerWrappedMessage::set_has_digital_out_init_result() {
  _oneof_case_[0] = kDigitalOutInitResult;
}
inline void ServerWrappedMessage::clear_digital_out_init_result() {
  if (has_digital_out_init_result()) {
    delete server_message_.digital_out_init_result_;
    clear_has_server_message();
  }
}
inline const ::LabNet::Server::DigitalOutInitResult& ServerWrappedMessage::_internal_digital_out_init_result() const {
  return *server_message_.digital_out_init_result_;
}
inline ::LabNet::Server::DigitalOutInitResult* ServerWrappedMessage::release_digital_out_init_result() {
  // @@protoc_insertion_point(field_release:LabNet.Server.ServerWrappedMessage.digital_out_init_result)
  if (has_digital_out_init_result()) {
    clear_has_server_message();
      ::LabNet::Server::DigitalOutInitResult* temp = server_message_.digital_out_init_result_;
    server_message_.digital_out_init_result_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::LabNet::Server::DigitalOutInitResult& ServerWrappedMessage::digital_out_init_result() const {
  // @@protoc_insertion_point(field_get:LabNet.Server.ServerWrappedMessage.digital_out_init_result)
  return has_digital_out_init_result()
      ? *server_message_.digital_out_init_result_
      : *reinterpret_cast< ::LabNet::Server::DigitalOutInitResult*>(&::LabNet::Server::_DigitalOutInitResult_default_instance_);
}
inline ::LabNet::Server::DigitalOutInitResult* ServerWrappedMessage::mutable_digital_out_init_result() {
  if (!has_digital_out_init_result()) {
    clear_server_message();
    set_has_digital_out_init_result();
    server_message_.digital_out_init_result_ = CreateMaybeMessage< ::LabNet::Server::DigitalOutInitResult >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:LabNet.Server.ServerWrappedMessage.digital_out_init_result)
  return server_message_.digital_out_init_result_;
}

// .LabNet.Server.OnlyOneConnectionAllowed only_one_connection_allowed = 8;
inline bool ServerWrappedMessage::has_only_one_connection_allowed() const {
  return server_message_case() == kOnlyOneConnectionAllowed;
}
inline void ServerWrappedMessage::set_has_only_one_connection_allowed() {
  _oneof_case_[0] = kOnlyOneConnectionAllowed;
}
inline void ServerWrappedMessage::clear_only_one_connection_allowed() {
  if (has_only_one_connection_allowed()) {
    delete server_message_.only_one_connection_allowed_;
    clear_has_server_message();
  }
}
inline const ::LabNet::Server::OnlyOneConnectionAllowed& ServerWrappedMessage::_internal_only_one_connection_allowed() const {
  return *server_message_.only_one_connection_allowed_;
}
inline ::LabNet::Server::OnlyOneConnectionAllowed* ServerWrappedMessage::release_only_one_connection_allowed() {
  // @@protoc_insertion_point(field_release:LabNet.Server.ServerWrappedMessage.only_one_connection_allowed)
  if (has_only_one_connection_allowed()) {
    clear_has_server_message();
      ::LabNet::Server::OnlyOneConnectionAllowed* temp = server_message_.only_one_connection_allowed_;
    server_message_.only_one_connection_allowed_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::LabNet::Server::OnlyOneConnectionAllowed& ServerWrappedMessage::only_one_connection_allowed() const {
  // @@protoc_insertion_point(field_get:LabNet.Server.ServerWrappedMessage.only_one_connection_allowed)
  return has_only_one_connection_allowed()
      ? *server_message_.only_one_connection_allowed_
      : *reinterpret_cast< ::LabNet::Server::OnlyOneConnectionAllowed*>(&::LabNet::Server::_OnlyOneConnectionAllowed_default_instance_);
}
inline ::LabNet::Server::OnlyOneConnectionAllowed* ServerWrappedMessage::mutable_only_one_connection_allowed() {
  if (!has_only_one_connection_allowed()) {
    clear_server_message();
    set_has_only_one_connection_allowed();
    server_message_.only_one_connection_allowed_ = CreateMaybeMessage< ::LabNet::Server::OnlyOneConnectionAllowed >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:LabNet.Server.ServerWrappedMessage.only_one_connection_allowed)
  return server_message_.only_one_connection_allowed_;
}

// .LabNet.Server.LabNetResetReply reset = 9;
inline bool ServerWrappedMessage::has_reset() const {
  return server_message_case() == kReset;
}
inline void ServerWrappedMessage::set_has_reset() {
  _oneof_case_[0] = kReset;
}
inline void ServerWrappedMessage::clear_reset() {
  if (has_reset()) {
    delete server_message_.reset_;
    clear_has_server_message();
  }
}
inline const ::LabNet::Server::LabNetResetReply& ServerWrappedMessage::_internal_reset() const {
  return *server_message_.reset_;
}
inline ::LabNet::Server::LabNetResetReply* ServerWrappedMessage::release_reset() {
  // @@protoc_insertion_point(field_release:LabNet.Server.ServerWrappedMessage.reset)
  if (has_reset()) {
    clear_has_server_message();
      ::LabNet::Server::LabNetResetReply* temp = server_message_.reset_;
    server_message_.reset_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::LabNet::Server::LabNetResetReply& ServerWrappedMessage::reset() const {
  // @@protoc_insertion_point(field_get:LabNet.Server.ServerWrappedMessage.reset)
  return has_reset()
      ? *server_message_.reset_
      : *reinterpret_cast< ::LabNet::Server::LabNetResetReply*>(&::LabNet::Server::_LabNetResetReply_default_instance_);
}
inline ::LabNet::Server::LabNetResetReply* ServerWrappedMessage::mutable_reset() {
  if (!has_reset()) {
    clear_server_message();
    set_has_reset();
    server_message_.reset_ = CreateMaybeMessage< ::LabNet::Server::LabNetResetReply >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:LabNet.Server.ServerWrappedMessage.reset)
  return server_message_.reset_;
}

// .LabNet.Server.LabNetIdReply id = 10;
inline bool ServerWrappedMessage::has_id() const {
  return server_message_case() == kId;
}
inline void ServerWrappedMessage::set_has_id() {
  _oneof_case_[0] = kId;
}
inline void ServerWrappedMessage::clear_id() {
  if (has_id()) {
    delete server_message_.id_;
    clear_has_server_message();
  }
}
inline const ::LabNet::Server::LabNetIdReply& ServerWrappedMessage::_internal_id() const {
  return *server_message_.id_;
}
inline ::LabNet::Server::LabNetIdReply* ServerWrappedMessage::release_id() {
  // @@protoc_insertion_point(field_release:LabNet.Server.ServerWrappedMessage.id)
  if (has_id()) {
    clear_has_server_message();
      ::LabNet::Server::LabNetIdReply* temp = server_message_.id_;
    server_message_.id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::LabNet::Server::LabNetIdReply& ServerWrappedMessage::id() const {
  // @@protoc_insertion_point(field_get:LabNet.Server.ServerWrappedMessage.id)
  return has_id()
      ? *server_message_.id_
      : *reinterpret_cast< ::LabNet::Server::LabNetIdReply*>(&::LabNet::Server::_LabNetIdReply_default_instance_);
}
inline ::LabNet::Server::LabNetIdReply* ServerWrappedMessage::mutable_id() {
  if (!has_id()) {
    clear_server_message();
    set_has_id();
    server_message_.id_ = CreateMaybeMessage< ::LabNet::Server::LabNetIdReply >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:LabNet.Server.ServerWrappedMessage.id)
  return server_message_.id_;
}

// .LabNet.Server.InterfaceLost interface_lost = 11;
inline bool ServerWrappedMessage::has_interface_lost() const {
  return server_message_case() == kInterfaceLost;
}
inline void ServerWrappedMessage::set_has_interface_lost() {
  _oneof_case_[0] = kInterfaceLost;
}
inline void ServerWrappedMessage::clear_interface_lost() {
  if (has_interface_lost()) {
    delete server_message_.interface_lost_;
    clear_has_server_message();
  }
}
inline const ::LabNet::Server::InterfaceLost& ServerWrappedMessage::_internal_interface_lost() const {
  return *server_message_.interface_lost_;
}
inline ::LabNet::Server::InterfaceLost* ServerWrappedMessage::release_interface_lost() {
  // @@protoc_insertion_point(field_release:LabNet.Server.ServerWrappedMessage.interface_lost)
  if (has_interface_lost()) {
    clear_has_server_message();
      ::LabNet::Server::InterfaceLost* temp = server_message_.interface_lost_;
    server_message_.interface_lost_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::LabNet::Server::InterfaceLost& ServerWrappedMessage::interface_lost() const {
  // @@protoc_insertion_point(field_get:LabNet.Server.ServerWrappedMessage.interface_lost)
  return has_interface_lost()
      ? *server_message_.interface_lost_
      : *reinterpret_cast< ::LabNet::Server::InterfaceLost*>(&::LabNet::Server::_InterfaceLost_default_instance_);
}
inline ::LabNet::Server::InterfaceLost* ServerWrappedMessage::mutable_interface_lost() {
  if (!has_interface_lost()) {
    clear_server_message();
    set_has_interface_lost();
    server_message_.interface_lost_ = CreateMaybeMessage< ::LabNet::Server::InterfaceLost >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:LabNet.Server.ServerWrappedMessage.interface_lost)
  return server_message_.interface_lost_;
}

// .LabNet.Server.InterfaceReconnected interface_reconnected = 12;
inline bool ServerWrappedMessage::has_interface_reconnected() const {
  return server_message_case() == kInterfaceReconnected;
}
inline void ServerWrappedMessage::set_has_interface_reconnected() {
  _oneof_case_[0] = kInterfaceReconnected;
}
inline void ServerWrappedMessage::clear_interface_reconnected() {
  if (has_interface_reconnected()) {
    delete server_message_.interface_reconnected_;
    clear_has_server_message();
  }
}
inline const ::LabNet::Server::InterfaceReconnected& ServerWrappedMessage::_internal_interface_reconnected() const {
  return *server_message_.interface_reconnected_;
}
inline ::LabNet::Server::InterfaceReconnected* ServerWrappedMessage::release_interface_reconnected() {
  // @@protoc_insertion_point(field_release:LabNet.Server.ServerWrappedMessage.interface_reconnected)
  if (has_interface_reconnected()) {
    clear_has_server_message();
      ::LabNet::Server::InterfaceReconnected* temp = server_message_.interface_reconnected_;
    server_message_.interface_reconnected_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::LabNet::Server::InterfaceReconnected& ServerWrappedMessage::interface_reconnected() const {
  // @@protoc_insertion_point(field_get:LabNet.Server.ServerWrappedMessage.interface_reconnected)
  return has_interface_reconnected()
      ? *server_message_.interface_reconnected_
      : *reinterpret_cast< ::LabNet::Server::InterfaceReconnected*>(&::LabNet::Server::_InterfaceReconnected_default_instance_);
}
inline ::LabNet::Server::InterfaceReconnected* ServerWrappedMessage::mutable_interface_reconnected() {
  if (!has_interface_reconnected()) {
    clear_server_message();
    set_has_interface_reconnected();
    server_message_.interface_reconnected_ = CreateMaybeMessage< ::LabNet::Server::InterfaceReconnected >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:LabNet.Server.ServerWrappedMessage.interface_reconnected)
  return server_message_.interface_reconnected_;
}

// .LabNet.Server.DigitalOutLoopStartResult digital_out_loop_start_result = 13;
inline bool ServerWrappedMessage::has_digital_out_loop_start_result() const {
  return server_message_case() == kDigitalOutLoopStartResult;
}
inline void ServerWrappedMessage::set_has_digital_out_loop_start_result() {
  _oneof_case_[0] = kDigitalOutLoopStartResult;
}
inline void ServerWrappedMessage::clear_digital_out_loop_start_result() {
  if (has_digital_out_loop_start_result()) {
    delete server_message_.digital_out_loop_start_result_;
    clear_has_server_message();
  }
}
inline const ::LabNet::Server::DigitalOutLoopStartResult& ServerWrappedMessage::_internal_digital_out_loop_start_result() const {
  return *server_message_.digital_out_loop_start_result_;
}
inline ::LabNet::Server::DigitalOutLoopStartResult* ServerWrappedMessage::release_digital_out_loop_start_result() {
  // @@protoc_insertion_point(field_release:LabNet.Server.ServerWrappedMessage.digital_out_loop_start_result)
  if (has_digital_out_loop_start_result()) {
    clear_has_server_message();
      ::LabNet::Server::DigitalOutLoopStartResult* temp = server_message_.digital_out_loop_start_result_;
    server_message_.digital_out_loop_start_result_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::LabNet::Server::DigitalOutLoopStartResult& ServerWrappedMessage::digital_out_loop_start_result() const {
  // @@protoc_insertion_point(field_get:LabNet.Server.ServerWrappedMessage.digital_out_loop_start_result)
  return has_digital_out_loop_start_result()
      ? *server_message_.digital_out_loop_start_result_
      : *reinterpret_cast< ::LabNet::Server::DigitalOutLoopStartResult*>(&::LabNet::Server::_DigitalOutLoopStartResult_default_instance_);
}
inline ::LabNet::Server::DigitalOutLoopStartResult* ServerWrappedMessage::mutable_digital_out_loop_start_result() {
  if (!has_digital_out_loop_start_result()) {
    clear_server_message();
    set_has_digital_out_loop_start_result();
    server_message_.digital_out_loop_start_result_ = CreateMaybeMessage< ::LabNet::Server::DigitalOutLoopStartResult >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:LabNet.Server.ServerWrappedMessage.digital_out_loop_start_result)
  return server_message_.digital_out_loop_start_result_;
}

// .LabNet.Server.DigitalOutLoopStopped digital_out_loop_stopped = 14;
inline bool ServerWrappedMessage::has_digital_out_loop_stopped() const {
  return server_message_case() == kDigitalOutLoopStopped;
}
inline void ServerWrappedMessage::set_has_digital_out_loop_stopped() {
  _oneof_case_[0] = kDigitalOutLoopStopped;
}
inline void ServerWrappedMessage::clear_digital_out_loop_stopped() {
  if (has_digital_out_loop_stopped()) {
    delete server_message_.digital_out_loop_stopped_;
    clear_has_server_message();
  }
}
inline const ::LabNet::Server::DigitalOutLoopStopped& ServerWrappedMessage::_internal_digital_out_loop_stopped() const {
  return *server_message_.digital_out_loop_stopped_;
}
inline ::LabNet::Server::DigitalOutLoopStopped* ServerWrappedMessage::release_digital_out_loop_stopped() {
  // @@protoc_insertion_point(field_release:LabNet.Server.ServerWrappedMessage.digital_out_loop_stopped)
  if (has_digital_out_loop_stopped()) {
    clear_has_server_message();
      ::LabNet::Server::DigitalOutLoopStopped* temp = server_message_.digital_out_loop_stopped_;
    server_message_.digital_out_loop_stopped_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::LabNet::Server::DigitalOutLoopStopped& ServerWrappedMessage::digital_out_loop_stopped() const {
  // @@protoc_insertion_point(field_get:LabNet.Server.ServerWrappedMessage.digital_out_loop_stopped)
  return has_digital_out_loop_stopped()
      ? *server_message_.digital_out_loop_stopped_
      : *reinterpret_cast< ::LabNet::Server::DigitalOutLoopStopped*>(&::LabNet::Server::_DigitalOutLoopStopped_default_instance_);
}
inline ::LabNet::Server::DigitalOutLoopStopped* ServerWrappedMessage::mutable_digital_out_loop_stopped() {
  if (!has_digital_out_loop_stopped()) {
    clear_server_message();
    set_has_digital_out_loop_stopped();
    server_message_.digital_out_loop_stopped_ = CreateMaybeMessage< ::LabNet::Server::DigitalOutLoopStopped >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:LabNet.Server.ServerWrappedMessage.digital_out_loop_stopped)
  return server_message_.digital_out_loop_stopped_;
}

inline bool ServerWrappedMessage::has_server_message() const {
  return server_message_case() != SERVER_MESSAGE_NOT_SET;
}
inline void ServerWrappedMessage::clear_has_server_message() {
  _oneof_case_[0] = SERVER_MESSAGE_NOT_SET;
}
inline ServerWrappedMessage::ServerMessageCase ServerWrappedMessage::server_message_case() const {
  return ServerWrappedMessage::ServerMessageCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Server
}  // namespace LabNet

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_LabNetServer_2eproto
