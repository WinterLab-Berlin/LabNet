// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LabNetClient.proto

#ifndef PROTOBUF_INCLUDED_LabNetClient_2eproto
#define PROTOBUF_INCLUDED_LabNetClient_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "LabNet.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_LabNetClient_2eproto 

namespace protobuf_LabNetClient_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[16];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_LabNetClient_2eproto
namespace LabNetProt {
namespace Client {
class ClientWrappedMessage;
class ClientWrappedMessageDefaultTypeInternal;
extern ClientWrappedMessageDefaultTypeInternal _ClientWrappedMessage_default_instance_;
class DigitalOutPulse;
class DigitalOutPulseDefaultTypeInternal;
extern DigitalOutPulseDefaultTypeInternal _DigitalOutPulse_default_instance_;
class DigitalOutSet;
class DigitalOutSetDefaultTypeInternal;
extern DigitalOutSetDefaultTypeInternal _DigitalOutSet_default_instance_;
class GpioInit;
class GpioInitDefaultTypeInternal;
extern GpioInitDefaultTypeInternal _GpioInit_default_instance_;
class GpioInitDigitalIn;
class GpioInitDigitalInDefaultTypeInternal;
extern GpioInitDigitalInDefaultTypeInternal _GpioInitDigitalIn_default_instance_;
class GpioInitDigitalOut;
class GpioInitDigitalOutDefaultTypeInternal;
extern GpioInitDigitalOutDefaultTypeInternal _GpioInitDigitalOut_default_instance_;
class LabNetIdRequest;
class LabNetIdRequestDefaultTypeInternal;
extern LabNetIdRequestDefaultTypeInternal _LabNetIdRequest_default_instance_;
class LabNetResetRequest;
class LabNetResetRequestDefaultTypeInternal;
extern LabNetResetRequestDefaultTypeInternal _LabNetResetRequest_default_instance_;
class RfidInit;
class RfidInitDefaultTypeInternal;
extern RfidInitDefaultTypeInternal _RfidInit_default_instance_;
class RfidSetPhaseMatrix;
class RfidSetPhaseMatrixDefaultTypeInternal;
extern RfidSetPhaseMatrixDefaultTypeInternal _RfidSetPhaseMatrix_default_instance_;
class RfidSetSignalInversion;
class RfidSetSignalInversionDefaultTypeInternal;
extern RfidSetSignalInversionDefaultTypeInternal _RfidSetSignalInversion_default_instance_;
class StartDigitalOutLoop;
class StartDigitalOutLoopDefaultTypeInternal;
extern StartDigitalOutLoopDefaultTypeInternal _StartDigitalOutLoop_default_instance_;
class StartDigitalOutLoop_DigitalOutputParameter;
class StartDigitalOutLoop_DigitalOutputParameterDefaultTypeInternal;
extern StartDigitalOutLoop_DigitalOutputParameterDefaultTypeInternal _StartDigitalOutLoop_DigitalOutputParameter_default_instance_;
class StopDigitalOutLoop;
class StopDigitalOutLoopDefaultTypeInternal;
extern StopDigitalOutLoopDefaultTypeInternal _StopDigitalOutLoop_default_instance_;
class UartInit;
class UartInitDefaultTypeInternal;
extern UartInitDefaultTypeInternal _UartInit_default_instance_;
class UartWriteData;
class UartWriteDataDefaultTypeInternal;
extern UartWriteDataDefaultTypeInternal _UartWriteData_default_instance_;
}  // namespace Client
}  // namespace LabNetProt
namespace google {
namespace protobuf {
template<> ::LabNetProt::Client::ClientWrappedMessage* Arena::CreateMaybeMessage<::LabNetProt::Client::ClientWrappedMessage>(Arena*);
template<> ::LabNetProt::Client::DigitalOutPulse* Arena::CreateMaybeMessage<::LabNetProt::Client::DigitalOutPulse>(Arena*);
template<> ::LabNetProt::Client::DigitalOutSet* Arena::CreateMaybeMessage<::LabNetProt::Client::DigitalOutSet>(Arena*);
template<> ::LabNetProt::Client::GpioInit* Arena::CreateMaybeMessage<::LabNetProt::Client::GpioInit>(Arena*);
template<> ::LabNetProt::Client::GpioInitDigitalIn* Arena::CreateMaybeMessage<::LabNetProt::Client::GpioInitDigitalIn>(Arena*);
template<> ::LabNetProt::Client::GpioInitDigitalOut* Arena::CreateMaybeMessage<::LabNetProt::Client::GpioInitDigitalOut>(Arena*);
template<> ::LabNetProt::Client::LabNetIdRequest* Arena::CreateMaybeMessage<::LabNetProt::Client::LabNetIdRequest>(Arena*);
template<> ::LabNetProt::Client::LabNetResetRequest* Arena::CreateMaybeMessage<::LabNetProt::Client::LabNetResetRequest>(Arena*);
template<> ::LabNetProt::Client::RfidInit* Arena::CreateMaybeMessage<::LabNetProt::Client::RfidInit>(Arena*);
template<> ::LabNetProt::Client::RfidSetPhaseMatrix* Arena::CreateMaybeMessage<::LabNetProt::Client::RfidSetPhaseMatrix>(Arena*);
template<> ::LabNetProt::Client::RfidSetSignalInversion* Arena::CreateMaybeMessage<::LabNetProt::Client::RfidSetSignalInversion>(Arena*);
template<> ::LabNetProt::Client::StartDigitalOutLoop* Arena::CreateMaybeMessage<::LabNetProt::Client::StartDigitalOutLoop>(Arena*);
template<> ::LabNetProt::Client::StartDigitalOutLoop_DigitalOutputParameter* Arena::CreateMaybeMessage<::LabNetProt::Client::StartDigitalOutLoop_DigitalOutputParameter>(Arena*);
template<> ::LabNetProt::Client::StopDigitalOutLoop* Arena::CreateMaybeMessage<::LabNetProt::Client::StopDigitalOutLoop>(Arena*);
template<> ::LabNetProt::Client::UartInit* Arena::CreateMaybeMessage<::LabNetProt::Client::UartInit>(Arena*);
template<> ::LabNetProt::Client::UartWriteData* Arena::CreateMaybeMessage<::LabNetProt::Client::UartWriteData>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace LabNetProt {
namespace Client {

enum GpioInitDigitalIn_Resistor {
  GpioInitDigitalIn_Resistor_OFF = 0,
  GpioInitDigitalIn_Resistor_PULL_DOWN = 1,
  GpioInitDigitalIn_Resistor_PULL_UP = 2,
  GpioInitDigitalIn_Resistor_GpioInitDigitalIn_Resistor_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  GpioInitDigitalIn_Resistor_GpioInitDigitalIn_Resistor_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool GpioInitDigitalIn_Resistor_IsValid(int value);
const GpioInitDigitalIn_Resistor GpioInitDigitalIn_Resistor_Resistor_MIN = GpioInitDigitalIn_Resistor_OFF;
const GpioInitDigitalIn_Resistor GpioInitDigitalIn_Resistor_Resistor_MAX = GpioInitDigitalIn_Resistor_PULL_UP;
const int GpioInitDigitalIn_Resistor_Resistor_ARRAYSIZE = GpioInitDigitalIn_Resistor_Resistor_MAX + 1;

const ::google::protobuf::EnumDescriptor* GpioInitDigitalIn_Resistor_descriptor();
inline const ::std::string& GpioInitDigitalIn_Resistor_Name(GpioInitDigitalIn_Resistor value) {
  return ::google::protobuf::internal::NameOfEnum(
    GpioInitDigitalIn_Resistor_descriptor(), value);
}
inline bool GpioInitDigitalIn_Resistor_Parse(
    const ::std::string& name, GpioInitDigitalIn_Resistor* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GpioInitDigitalIn_Resistor>(
    GpioInitDigitalIn_Resistor_descriptor(), name, value);
}
// ===================================================================

class GpioInit : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LabNetProt.Client.GpioInit) */ {
 public:
  GpioInit();
  virtual ~GpioInit();

  GpioInit(const GpioInit& from);

  inline GpioInit& operator=(const GpioInit& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GpioInit(GpioInit&& from) noexcept
    : GpioInit() {
    *this = ::std::move(from);
  }

  inline GpioInit& operator=(GpioInit&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GpioInit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GpioInit* internal_default_instance() {
    return reinterpret_cast<const GpioInit*>(
               &_GpioInit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(GpioInit* other);
  friend void swap(GpioInit& a, GpioInit& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GpioInit* New() const final {
    return CreateMaybeMessage<GpioInit>(NULL);
  }

  GpioInit* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GpioInit>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GpioInit& from);
  void MergeFrom(const GpioInit& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GpioInit* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:LabNetProt.Client.GpioInit)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_LabNetClient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GpioInitDigitalIn : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LabNetProt.Client.GpioInitDigitalIn) */ {
 public:
  GpioInitDigitalIn();
  virtual ~GpioInitDigitalIn();

  GpioInitDigitalIn(const GpioInitDigitalIn& from);

  inline GpioInitDigitalIn& operator=(const GpioInitDigitalIn& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GpioInitDigitalIn(GpioInitDigitalIn&& from) noexcept
    : GpioInitDigitalIn() {
    *this = ::std::move(from);
  }

  inline GpioInitDigitalIn& operator=(GpioInitDigitalIn&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GpioInitDigitalIn& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GpioInitDigitalIn* internal_default_instance() {
    return reinterpret_cast<const GpioInitDigitalIn*>(
               &_GpioInitDigitalIn_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(GpioInitDigitalIn* other);
  friend void swap(GpioInitDigitalIn& a, GpioInitDigitalIn& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GpioInitDigitalIn* New() const final {
    return CreateMaybeMessage<GpioInitDigitalIn>(NULL);
  }

  GpioInitDigitalIn* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GpioInitDigitalIn>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GpioInitDigitalIn& from);
  void MergeFrom(const GpioInitDigitalIn& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GpioInitDigitalIn* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GpioInitDigitalIn_Resistor Resistor;
  static const Resistor OFF =
    GpioInitDigitalIn_Resistor_OFF;
  static const Resistor PULL_DOWN =
    GpioInitDigitalIn_Resistor_PULL_DOWN;
  static const Resistor PULL_UP =
    GpioInitDigitalIn_Resistor_PULL_UP;
  static inline bool Resistor_IsValid(int value) {
    return GpioInitDigitalIn_Resistor_IsValid(value);
  }
  static const Resistor Resistor_MIN =
    GpioInitDigitalIn_Resistor_Resistor_MIN;
  static const Resistor Resistor_MAX =
    GpioInitDigitalIn_Resistor_Resistor_MAX;
  static const int Resistor_ARRAYSIZE =
    GpioInitDigitalIn_Resistor_Resistor_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Resistor_descriptor() {
    return GpioInitDigitalIn_Resistor_descriptor();
  }
  static inline const ::std::string& Resistor_Name(Resistor value) {
    return GpioInitDigitalIn_Resistor_Name(value);
  }
  static inline bool Resistor_Parse(const ::std::string& name,
      Resistor* value) {
    return GpioInitDigitalIn_Resistor_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // uint32 pin = 1;
  void clear_pin();
  static const int kPinFieldNumber = 1;
  ::google::protobuf::uint32 pin() const;
  void set_pin(::google::protobuf::uint32 value);

  // .LabNetProt.Client.GpioInitDigitalIn.Resistor resistor_state = 2;
  void clear_resistor_state();
  static const int kResistorStateFieldNumber = 2;
  ::LabNetProt::Client::GpioInitDigitalIn_Resistor resistor_state() const;
  void set_resistor_state(::LabNetProt::Client::GpioInitDigitalIn_Resistor value);

  // bool is_inverted = 3;
  void clear_is_inverted();
  static const int kIsInvertedFieldNumber = 3;
  bool is_inverted() const;
  void set_is_inverted(bool value);

  // @@protoc_insertion_point(class_scope:LabNetProt.Client.GpioInitDigitalIn)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 pin_;
  int resistor_state_;
  bool is_inverted_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_LabNetClient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GpioInitDigitalOut : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LabNetProt.Client.GpioInitDigitalOut) */ {
 public:
  GpioInitDigitalOut();
  virtual ~GpioInitDigitalOut();

  GpioInitDigitalOut(const GpioInitDigitalOut& from);

  inline GpioInitDigitalOut& operator=(const GpioInitDigitalOut& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GpioInitDigitalOut(GpioInitDigitalOut&& from) noexcept
    : GpioInitDigitalOut() {
    *this = ::std::move(from);
  }

  inline GpioInitDigitalOut& operator=(GpioInitDigitalOut&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GpioInitDigitalOut& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GpioInitDigitalOut* internal_default_instance() {
    return reinterpret_cast<const GpioInitDigitalOut*>(
               &_GpioInitDigitalOut_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(GpioInitDigitalOut* other);
  friend void swap(GpioInitDigitalOut& a, GpioInitDigitalOut& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GpioInitDigitalOut* New() const final {
    return CreateMaybeMessage<GpioInitDigitalOut>(NULL);
  }

  GpioInitDigitalOut* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GpioInitDigitalOut>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GpioInitDigitalOut& from);
  void MergeFrom(const GpioInitDigitalOut& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GpioInitDigitalOut* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 pin = 1;
  void clear_pin();
  static const int kPinFieldNumber = 1;
  ::google::protobuf::uint32 pin() const;
  void set_pin(::google::protobuf::uint32 value);

  // bool is_inverted = 2;
  void clear_is_inverted();
  static const int kIsInvertedFieldNumber = 2;
  bool is_inverted() const;
  void set_is_inverted(bool value);

  // @@protoc_insertion_point(class_scope:LabNetProt.Client.GpioInitDigitalOut)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 pin_;
  bool is_inverted_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_LabNetClient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RfidInit : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LabNetProt.Client.RfidInit) */ {
 public:
  RfidInit();
  virtual ~RfidInit();

  RfidInit(const RfidInit& from);

  inline RfidInit& operator=(const RfidInit& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RfidInit(RfidInit&& from) noexcept
    : RfidInit() {
    *this = ::std::move(from);
  }

  inline RfidInit& operator=(RfidInit&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RfidInit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RfidInit* internal_default_instance() {
    return reinterpret_cast<const RfidInit*>(
               &_RfidInit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(RfidInit* other);
  friend void swap(RfidInit& a, RfidInit& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RfidInit* New() const final {
    return CreateMaybeMessage<RfidInit>(NULL);
  }

  RfidInit* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RfidInit>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RfidInit& from);
  void MergeFrom(const RfidInit& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RfidInit* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 antenna_phase1 = 1;
  void clear_antenna_phase1();
  static const int kAntennaPhase1FieldNumber = 1;
  ::google::protobuf::uint32 antenna_phase1() const;
  void set_antenna_phase1(::google::protobuf::uint32 value);

  // uint32 antenna_phase2 = 2;
  void clear_antenna_phase2();
  static const int kAntennaPhase2FieldNumber = 2;
  ::google::protobuf::uint32 antenna_phase2() const;
  void set_antenna_phase2(::google::protobuf::uint32 value);

  // uint32 phase_duration = 3;
  void clear_phase_duration();
  static const int kPhaseDurationFieldNumber = 3;
  ::google::protobuf::uint32 phase_duration() const;
  void set_phase_duration(::google::protobuf::uint32 value);

  // bool inverted = 4;
  void clear_inverted();
  static const int kInvertedFieldNumber = 4;
  bool inverted() const;
  void set_inverted(bool value);

  // @@protoc_insertion_point(class_scope:LabNetProt.Client.RfidInit)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 antenna_phase1_;
  ::google::protobuf::uint32 antenna_phase2_;
  ::google::protobuf::uint32 phase_duration_;
  bool inverted_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_LabNetClient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RfidSetPhaseMatrix : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LabNetProt.Client.RfidSetPhaseMatrix) */ {
 public:
  RfidSetPhaseMatrix();
  virtual ~RfidSetPhaseMatrix();

  RfidSetPhaseMatrix(const RfidSetPhaseMatrix& from);

  inline RfidSetPhaseMatrix& operator=(const RfidSetPhaseMatrix& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RfidSetPhaseMatrix(RfidSetPhaseMatrix&& from) noexcept
    : RfidSetPhaseMatrix() {
    *this = ::std::move(from);
  }

  inline RfidSetPhaseMatrix& operator=(RfidSetPhaseMatrix&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RfidSetPhaseMatrix& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RfidSetPhaseMatrix* internal_default_instance() {
    return reinterpret_cast<const RfidSetPhaseMatrix*>(
               &_RfidSetPhaseMatrix_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(RfidSetPhaseMatrix* other);
  friend void swap(RfidSetPhaseMatrix& a, RfidSetPhaseMatrix& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RfidSetPhaseMatrix* New() const final {
    return CreateMaybeMessage<RfidSetPhaseMatrix>(NULL);
  }

  RfidSetPhaseMatrix* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RfidSetPhaseMatrix>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RfidSetPhaseMatrix& from);
  void MergeFrom(const RfidSetPhaseMatrix& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RfidSetPhaseMatrix* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 antenna_phase1 = 1;
  void clear_antenna_phase1();
  static const int kAntennaPhase1FieldNumber = 1;
  ::google::protobuf::uint32 antenna_phase1() const;
  void set_antenna_phase1(::google::protobuf::uint32 value);

  // uint32 antenna_phase2 = 2;
  void clear_antenna_phase2();
  static const int kAntennaPhase2FieldNumber = 2;
  ::google::protobuf::uint32 antenna_phase2() const;
  void set_antenna_phase2(::google::protobuf::uint32 value);

  // uint32 phase_duration = 3;
  void clear_phase_duration();
  static const int kPhaseDurationFieldNumber = 3;
  ::google::protobuf::uint32 phase_duration() const;
  void set_phase_duration(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:LabNetProt.Client.RfidSetPhaseMatrix)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 antenna_phase1_;
  ::google::protobuf::uint32 antenna_phase2_;
  ::google::protobuf::uint32 phase_duration_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_LabNetClient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RfidSetSignalInversion : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LabNetProt.Client.RfidSetSignalInversion) */ {
 public:
  RfidSetSignalInversion();
  virtual ~RfidSetSignalInversion();

  RfidSetSignalInversion(const RfidSetSignalInversion& from);

  inline RfidSetSignalInversion& operator=(const RfidSetSignalInversion& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RfidSetSignalInversion(RfidSetSignalInversion&& from) noexcept
    : RfidSetSignalInversion() {
    *this = ::std::move(from);
  }

  inline RfidSetSignalInversion& operator=(RfidSetSignalInversion&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RfidSetSignalInversion& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RfidSetSignalInversion* internal_default_instance() {
    return reinterpret_cast<const RfidSetSignalInversion*>(
               &_RfidSetSignalInversion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(RfidSetSignalInversion* other);
  friend void swap(RfidSetSignalInversion& a, RfidSetSignalInversion& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RfidSetSignalInversion* New() const final {
    return CreateMaybeMessage<RfidSetSignalInversion>(NULL);
  }

  RfidSetSignalInversion* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RfidSetSignalInversion>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RfidSetSignalInversion& from);
  void MergeFrom(const RfidSetSignalInversion& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RfidSetSignalInversion* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool inverted = 1;
  void clear_inverted();
  static const int kInvertedFieldNumber = 1;
  bool inverted() const;
  void set_inverted(bool value);

  // @@protoc_insertion_point(class_scope:LabNetProt.Client.RfidSetSignalInversion)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool inverted_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_LabNetClient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UartInit : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LabNetProt.Client.UartInit) */ {
 public:
  UartInit();
  virtual ~UartInit();

  UartInit(const UartInit& from);

  inline UartInit& operator=(const UartInit& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UartInit(UartInit&& from) noexcept
    : UartInit() {
    *this = ::std::move(from);
  }

  inline UartInit& operator=(UartInit&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UartInit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UartInit* internal_default_instance() {
    return reinterpret_cast<const UartInit*>(
               &_UartInit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(UartInit* other);
  friend void swap(UartInit& a, UartInit& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UartInit* New() const final {
    return CreateMaybeMessage<UartInit>(NULL);
  }

  UartInit* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UartInit>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UartInit& from);
  void MergeFrom(const UartInit& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UartInit* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .LabNetProt.Uarts port = 1;
  void clear_port();
  static const int kPortFieldNumber = 1;
  ::LabNetProt::Uarts port() const;
  void set_port(::LabNetProt::Uarts value);

  // uint32 baud = 2;
  void clear_baud();
  static const int kBaudFieldNumber = 2;
  ::google::protobuf::uint32 baud() const;
  void set_baud(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:LabNetProt.Client.UartInit)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int port_;
  ::google::protobuf::uint32 baud_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_LabNetClient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UartWriteData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LabNetProt.Client.UartWriteData) */ {
 public:
  UartWriteData();
  virtual ~UartWriteData();

  UartWriteData(const UartWriteData& from);

  inline UartWriteData& operator=(const UartWriteData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UartWriteData(UartWriteData&& from) noexcept
    : UartWriteData() {
    *this = ::std::move(from);
  }

  inline UartWriteData& operator=(UartWriteData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UartWriteData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UartWriteData* internal_default_instance() {
    return reinterpret_cast<const UartWriteData*>(
               &_UartWriteData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(UartWriteData* other);
  friend void swap(UartWriteData& a, UartWriteData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UartWriteData* New() const final {
    return CreateMaybeMessage<UartWriteData>(NULL);
  }

  UartWriteData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UartWriteData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UartWriteData& from);
  void MergeFrom(const UartWriteData& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UartWriteData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes data = 2;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // .LabNetProt.Uarts port = 1;
  void clear_port();
  static const int kPortFieldNumber = 1;
  ::LabNetProt::Uarts port() const;
  void set_port(::LabNetProt::Uarts value);

  // @@protoc_insertion_point(class_scope:LabNetProt.Client.UartWriteData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  int port_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_LabNetClient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DigitalOutSet : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LabNetProt.Client.DigitalOutSet) */ {
 public:
  DigitalOutSet();
  virtual ~DigitalOutSet();

  DigitalOutSet(const DigitalOutSet& from);

  inline DigitalOutSet& operator=(const DigitalOutSet& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DigitalOutSet(DigitalOutSet&& from) noexcept
    : DigitalOutSet() {
    *this = ::std::move(from);
  }

  inline DigitalOutSet& operator=(DigitalOutSet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DigitalOutSet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DigitalOutSet* internal_default_instance() {
    return reinterpret_cast<const DigitalOutSet*>(
               &_DigitalOutSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(DigitalOutSet* other);
  friend void swap(DigitalOutSet& a, DigitalOutSet& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DigitalOutSet* New() const final {
    return CreateMaybeMessage<DigitalOutSet>(NULL);
  }

  DigitalOutSet* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DigitalOutSet>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DigitalOutSet& from);
  void MergeFrom(const DigitalOutSet& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DigitalOutSet* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .LabNetProt.PinId id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::LabNetProt::PinId& _internal_id() const;
  public:
  const ::LabNetProt::PinId& id() const;
  ::LabNetProt::PinId* release_id();
  ::LabNetProt::PinId* mutable_id();
  void set_allocated_id(::LabNetProt::PinId* id);

  // bool state = 2;
  void clear_state();
  static const int kStateFieldNumber = 2;
  bool state() const;
  void set_state(bool value);

  // @@protoc_insertion_point(class_scope:LabNetProt.Client.DigitalOutSet)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::LabNetProt::PinId* id_;
  bool state_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_LabNetClient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DigitalOutPulse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LabNetProt.Client.DigitalOutPulse) */ {
 public:
  DigitalOutPulse();
  virtual ~DigitalOutPulse();

  DigitalOutPulse(const DigitalOutPulse& from);

  inline DigitalOutPulse& operator=(const DigitalOutPulse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DigitalOutPulse(DigitalOutPulse&& from) noexcept
    : DigitalOutPulse() {
    *this = ::std::move(from);
  }

  inline DigitalOutPulse& operator=(DigitalOutPulse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DigitalOutPulse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DigitalOutPulse* internal_default_instance() {
    return reinterpret_cast<const DigitalOutPulse*>(
               &_DigitalOutPulse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(DigitalOutPulse* other);
  friend void swap(DigitalOutPulse& a, DigitalOutPulse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DigitalOutPulse* New() const final {
    return CreateMaybeMessage<DigitalOutPulse>(NULL);
  }

  DigitalOutPulse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DigitalOutPulse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DigitalOutPulse& from);
  void MergeFrom(const DigitalOutPulse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DigitalOutPulse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .LabNetProt.PinId id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::LabNetProt::PinId& _internal_id() const;
  public:
  const ::LabNetProt::PinId& id() const;
  ::LabNetProt::PinId* release_id();
  ::LabNetProt::PinId* mutable_id();
  void set_allocated_id(::LabNetProt::PinId* id);

  // uint32 high_duration = 2;
  void clear_high_duration();
  static const int kHighDurationFieldNumber = 2;
  ::google::protobuf::uint32 high_duration() const;
  void set_high_duration(::google::protobuf::uint32 value);

  // uint32 low_duration = 3;
  void clear_low_duration();
  static const int kLowDurationFieldNumber = 3;
  ::google::protobuf::uint32 low_duration() const;
  void set_low_duration(::google::protobuf::uint32 value);

  // uint32 pulses = 4;
  void clear_pulses();
  static const int kPulsesFieldNumber = 4;
  ::google::protobuf::uint32 pulses() const;
  void set_pulses(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:LabNetProt.Client.DigitalOutPulse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::LabNetProt::PinId* id_;
  ::google::protobuf::uint32 high_duration_;
  ::google::protobuf::uint32 low_duration_;
  ::google::protobuf::uint32 pulses_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_LabNetClient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StartDigitalOutLoop_DigitalOutputParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LabNetProt.Client.StartDigitalOutLoop.DigitalOutputParameter) */ {
 public:
  StartDigitalOutLoop_DigitalOutputParameter();
  virtual ~StartDigitalOutLoop_DigitalOutputParameter();

  StartDigitalOutLoop_DigitalOutputParameter(const StartDigitalOutLoop_DigitalOutputParameter& from);

  inline StartDigitalOutLoop_DigitalOutputParameter& operator=(const StartDigitalOutLoop_DigitalOutputParameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StartDigitalOutLoop_DigitalOutputParameter(StartDigitalOutLoop_DigitalOutputParameter&& from) noexcept
    : StartDigitalOutLoop_DigitalOutputParameter() {
    *this = ::std::move(from);
  }

  inline StartDigitalOutLoop_DigitalOutputParameter& operator=(StartDigitalOutLoop_DigitalOutputParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StartDigitalOutLoop_DigitalOutputParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StartDigitalOutLoop_DigitalOutputParameter* internal_default_instance() {
    return reinterpret_cast<const StartDigitalOutLoop_DigitalOutputParameter*>(
               &_StartDigitalOutLoop_DigitalOutputParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(StartDigitalOutLoop_DigitalOutputParameter* other);
  friend void swap(StartDigitalOutLoop_DigitalOutputParameter& a, StartDigitalOutLoop_DigitalOutputParameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StartDigitalOutLoop_DigitalOutputParameter* New() const final {
    return CreateMaybeMessage<StartDigitalOutLoop_DigitalOutputParameter>(NULL);
  }

  StartDigitalOutLoop_DigitalOutputParameter* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StartDigitalOutLoop_DigitalOutputParameter>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StartDigitalOutLoop_DigitalOutputParameter& from);
  void MergeFrom(const StartDigitalOutLoop_DigitalOutputParameter& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartDigitalOutLoop_DigitalOutputParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .LabNetProt.PinId id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::LabNetProt::PinId& _internal_id() const;
  public:
  const ::LabNetProt::PinId& id() const;
  ::LabNetProt::PinId* release_id();
  ::LabNetProt::PinId* mutable_id();
  void set_allocated_id(::LabNetProt::PinId* id);

  // uint32 offset = 2;
  void clear_offset();
  static const int kOffsetFieldNumber = 2;
  ::google::protobuf::uint32 offset() const;
  void set_offset(::google::protobuf::uint32 value);

  // uint32 duration = 3;
  void clear_duration();
  static const int kDurationFieldNumber = 3;
  ::google::protobuf::uint32 duration() const;
  void set_duration(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:LabNetProt.Client.StartDigitalOutLoop.DigitalOutputParameter)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::LabNetProt::PinId* id_;
  ::google::protobuf::uint32 offset_;
  ::google::protobuf::uint32 duration_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_LabNetClient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StartDigitalOutLoop : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LabNetProt.Client.StartDigitalOutLoop) */ {
 public:
  StartDigitalOutLoop();
  virtual ~StartDigitalOutLoop();

  StartDigitalOutLoop(const StartDigitalOutLoop& from);

  inline StartDigitalOutLoop& operator=(const StartDigitalOutLoop& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StartDigitalOutLoop(StartDigitalOutLoop&& from) noexcept
    : StartDigitalOutLoop() {
    *this = ::std::move(from);
  }

  inline StartDigitalOutLoop& operator=(StartDigitalOutLoop&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StartDigitalOutLoop& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StartDigitalOutLoop* internal_default_instance() {
    return reinterpret_cast<const StartDigitalOutLoop*>(
               &_StartDigitalOutLoop_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(StartDigitalOutLoop* other);
  friend void swap(StartDigitalOutLoop& a, StartDigitalOutLoop& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StartDigitalOutLoop* New() const final {
    return CreateMaybeMessage<StartDigitalOutLoop>(NULL);
  }

  StartDigitalOutLoop* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StartDigitalOutLoop>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StartDigitalOutLoop& from);
  void MergeFrom(const StartDigitalOutLoop& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartDigitalOutLoop* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef StartDigitalOutLoop_DigitalOutputParameter DigitalOutputParameter;

  // accessors -------------------------------------------------------

  // repeated .LabNetProt.Client.StartDigitalOutLoop.DigitalOutputParameter digital_outputs = 3;
  int digital_outputs_size() const;
  void clear_digital_outputs();
  static const int kDigitalOutputsFieldNumber = 3;
  ::LabNetProt::Client::StartDigitalOutLoop_DigitalOutputParameter* mutable_digital_outputs(int index);
  ::google::protobuf::RepeatedPtrField< ::LabNetProt::Client::StartDigitalOutLoop_DigitalOutputParameter >*
      mutable_digital_outputs();
  const ::LabNetProt::Client::StartDigitalOutLoop_DigitalOutputParameter& digital_outputs(int index) const;
  ::LabNetProt::Client::StartDigitalOutLoop_DigitalOutputParameter* add_digital_outputs();
  const ::google::protobuf::RepeatedPtrField< ::LabNetProt::Client::StartDigitalOutLoop_DigitalOutputParameter >&
      digital_outputs() const;

  // string loop_name = 1;
  void clear_loop_name();
  static const int kLoopNameFieldNumber = 1;
  const ::std::string& loop_name() const;
  void set_loop_name(const ::std::string& value);
  #if LANG_CXX11
  void set_loop_name(::std::string&& value);
  #endif
  void set_loop_name(const char* value);
  void set_loop_name(const char* value, size_t size);
  ::std::string* mutable_loop_name();
  ::std::string* release_loop_name();
  void set_allocated_loop_name(::std::string* loop_name);

  // uint32 loop_pause = 2;
  void clear_loop_pause();
  static const int kLoopPauseFieldNumber = 2;
  ::google::protobuf::uint32 loop_pause() const;
  void set_loop_pause(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:LabNetProt.Client.StartDigitalOutLoop)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::LabNetProt::Client::StartDigitalOutLoop_DigitalOutputParameter > digital_outputs_;
  ::google::protobuf::internal::ArenaStringPtr loop_name_;
  ::google::protobuf::uint32 loop_pause_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_LabNetClient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StopDigitalOutLoop : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LabNetProt.Client.StopDigitalOutLoop) */ {
 public:
  StopDigitalOutLoop();
  virtual ~StopDigitalOutLoop();

  StopDigitalOutLoop(const StopDigitalOutLoop& from);

  inline StopDigitalOutLoop& operator=(const StopDigitalOutLoop& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StopDigitalOutLoop(StopDigitalOutLoop&& from) noexcept
    : StopDigitalOutLoop() {
    *this = ::std::move(from);
  }

  inline StopDigitalOutLoop& operator=(StopDigitalOutLoop&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StopDigitalOutLoop& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StopDigitalOutLoop* internal_default_instance() {
    return reinterpret_cast<const StopDigitalOutLoop*>(
               &_StopDigitalOutLoop_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(StopDigitalOutLoop* other);
  friend void swap(StopDigitalOutLoop& a, StopDigitalOutLoop& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StopDigitalOutLoop* New() const final {
    return CreateMaybeMessage<StopDigitalOutLoop>(NULL);
  }

  StopDigitalOutLoop* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StopDigitalOutLoop>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StopDigitalOutLoop& from);
  void MergeFrom(const StopDigitalOutLoop& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopDigitalOutLoop* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string loop_name = 1;
  void clear_loop_name();
  static const int kLoopNameFieldNumber = 1;
  const ::std::string& loop_name() const;
  void set_loop_name(const ::std::string& value);
  #if LANG_CXX11
  void set_loop_name(::std::string&& value);
  #endif
  void set_loop_name(const char* value);
  void set_loop_name(const char* value, size_t size);
  ::std::string* mutable_loop_name();
  ::std::string* release_loop_name();
  void set_allocated_loop_name(::std::string* loop_name);

  // @@protoc_insertion_point(class_scope:LabNetProt.Client.StopDigitalOutLoop)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr loop_name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_LabNetClient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LabNetResetRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LabNetProt.Client.LabNetResetRequest) */ {
 public:
  LabNetResetRequest();
  virtual ~LabNetResetRequest();

  LabNetResetRequest(const LabNetResetRequest& from);

  inline LabNetResetRequest& operator=(const LabNetResetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LabNetResetRequest(LabNetResetRequest&& from) noexcept
    : LabNetResetRequest() {
    *this = ::std::move(from);
  }

  inline LabNetResetRequest& operator=(LabNetResetRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LabNetResetRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LabNetResetRequest* internal_default_instance() {
    return reinterpret_cast<const LabNetResetRequest*>(
               &_LabNetResetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(LabNetResetRequest* other);
  friend void swap(LabNetResetRequest& a, LabNetResetRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LabNetResetRequest* New() const final {
    return CreateMaybeMessage<LabNetResetRequest>(NULL);
  }

  LabNetResetRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LabNetResetRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LabNetResetRequest& from);
  void MergeFrom(const LabNetResetRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LabNetResetRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:LabNetProt.Client.LabNetResetRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_LabNetClient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LabNetIdRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LabNetProt.Client.LabNetIdRequest) */ {
 public:
  LabNetIdRequest();
  virtual ~LabNetIdRequest();

  LabNetIdRequest(const LabNetIdRequest& from);

  inline LabNetIdRequest& operator=(const LabNetIdRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LabNetIdRequest(LabNetIdRequest&& from) noexcept
    : LabNetIdRequest() {
    *this = ::std::move(from);
  }

  inline LabNetIdRequest& operator=(LabNetIdRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LabNetIdRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LabNetIdRequest* internal_default_instance() {
    return reinterpret_cast<const LabNetIdRequest*>(
               &_LabNetIdRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(LabNetIdRequest* other);
  friend void swap(LabNetIdRequest& a, LabNetIdRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LabNetIdRequest* New() const final {
    return CreateMaybeMessage<LabNetIdRequest>(NULL);
  }

  LabNetIdRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LabNetIdRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LabNetIdRequest& from);
  void MergeFrom(const LabNetIdRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LabNetIdRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:LabNetProt.Client.LabNetIdRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_LabNetClient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ClientWrappedMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LabNetProt.Client.ClientWrappedMessage) */ {
 public:
  ClientWrappedMessage();
  virtual ~ClientWrappedMessage();

  ClientWrappedMessage(const ClientWrappedMessage& from);

  inline ClientWrappedMessage& operator=(const ClientWrappedMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ClientWrappedMessage(ClientWrappedMessage&& from) noexcept
    : ClientWrappedMessage() {
    *this = ::std::move(from);
  }

  inline ClientWrappedMessage& operator=(ClientWrappedMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientWrappedMessage& default_instance();

  enum ClientMessageCase {
    kReset = 1,
    kId = 2,
    kGpioInit = 3,
    kGpioInitDigitalIn = 4,
    kGpioInitDigitalOut = 5,
    kRfidInit = 6,
    kRfidSetPhaseMatrix = 7,
    kRfidSetSignalInversion = 8,
    kUartInit = 9,
    kUartWriteData = 10,
    kDigitalOutSet = 11,
    kDigitalOutPulse = 12,
    kStartDigitalOutLoop = 13,
    kStopDigitalOutLoop = 14,
    CLIENT_MESSAGE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientWrappedMessage* internal_default_instance() {
    return reinterpret_cast<const ClientWrappedMessage*>(
               &_ClientWrappedMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(ClientWrappedMessage* other);
  friend void swap(ClientWrappedMessage& a, ClientWrappedMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClientWrappedMessage* New() const final {
    return CreateMaybeMessage<ClientWrappedMessage>(NULL);
  }

  ClientWrappedMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ClientWrappedMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ClientWrappedMessage& from);
  void MergeFrom(const ClientWrappedMessage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientWrappedMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .LabNetProt.Client.LabNetResetRequest reset = 1;
  bool has_reset() const;
  void clear_reset();
  static const int kResetFieldNumber = 1;
  private:
  const ::LabNetProt::Client::LabNetResetRequest& _internal_reset() const;
  public:
  const ::LabNetProt::Client::LabNetResetRequest& reset() const;
  ::LabNetProt::Client::LabNetResetRequest* release_reset();
  ::LabNetProt::Client::LabNetResetRequest* mutable_reset();
  void set_allocated_reset(::LabNetProt::Client::LabNetResetRequest* reset);

  // .LabNetProt.Client.LabNetIdRequest id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  private:
  const ::LabNetProt::Client::LabNetIdRequest& _internal_id() const;
  public:
  const ::LabNetProt::Client::LabNetIdRequest& id() const;
  ::LabNetProt::Client::LabNetIdRequest* release_id();
  ::LabNetProt::Client::LabNetIdRequest* mutable_id();
  void set_allocated_id(::LabNetProt::Client::LabNetIdRequest* id);

  // .LabNetProt.Client.GpioInit gpio_init = 3;
  bool has_gpio_init() const;
  void clear_gpio_init();
  static const int kGpioInitFieldNumber = 3;
  private:
  const ::LabNetProt::Client::GpioInit& _internal_gpio_init() const;
  public:
  const ::LabNetProt::Client::GpioInit& gpio_init() const;
  ::LabNetProt::Client::GpioInit* release_gpio_init();
  ::LabNetProt::Client::GpioInit* mutable_gpio_init();
  void set_allocated_gpio_init(::LabNetProt::Client::GpioInit* gpio_init);

  // .LabNetProt.Client.GpioInitDigitalIn gpio_init_digital_in = 4;
  bool has_gpio_init_digital_in() const;
  void clear_gpio_init_digital_in();
  static const int kGpioInitDigitalInFieldNumber = 4;
  private:
  const ::LabNetProt::Client::GpioInitDigitalIn& _internal_gpio_init_digital_in() const;
  public:
  const ::LabNetProt::Client::GpioInitDigitalIn& gpio_init_digital_in() const;
  ::LabNetProt::Client::GpioInitDigitalIn* release_gpio_init_digital_in();
  ::LabNetProt::Client::GpioInitDigitalIn* mutable_gpio_init_digital_in();
  void set_allocated_gpio_init_digital_in(::LabNetProt::Client::GpioInitDigitalIn* gpio_init_digital_in);

  // .LabNetProt.Client.GpioInitDigitalOut gpio_init_digital_out = 5;
  bool has_gpio_init_digital_out() const;
  void clear_gpio_init_digital_out();
  static const int kGpioInitDigitalOutFieldNumber = 5;
  private:
  const ::LabNetProt::Client::GpioInitDigitalOut& _internal_gpio_init_digital_out() const;
  public:
  const ::LabNetProt::Client::GpioInitDigitalOut& gpio_init_digital_out() const;
  ::LabNetProt::Client::GpioInitDigitalOut* release_gpio_init_digital_out();
  ::LabNetProt::Client::GpioInitDigitalOut* mutable_gpio_init_digital_out();
  void set_allocated_gpio_init_digital_out(::LabNetProt::Client::GpioInitDigitalOut* gpio_init_digital_out);

  // .LabNetProt.Client.RfidInit rfid_init = 6;
  bool has_rfid_init() const;
  void clear_rfid_init();
  static const int kRfidInitFieldNumber = 6;
  private:
  const ::LabNetProt::Client::RfidInit& _internal_rfid_init() const;
  public:
  const ::LabNetProt::Client::RfidInit& rfid_init() const;
  ::LabNetProt::Client::RfidInit* release_rfid_init();
  ::LabNetProt::Client::RfidInit* mutable_rfid_init();
  void set_allocated_rfid_init(::LabNetProt::Client::RfidInit* rfid_init);

  // .LabNetProt.Client.RfidSetPhaseMatrix rfid_set_phase_matrix = 7;
  bool has_rfid_set_phase_matrix() const;
  void clear_rfid_set_phase_matrix();
  static const int kRfidSetPhaseMatrixFieldNumber = 7;
  private:
  const ::LabNetProt::Client::RfidSetPhaseMatrix& _internal_rfid_set_phase_matrix() const;
  public:
  const ::LabNetProt::Client::RfidSetPhaseMatrix& rfid_set_phase_matrix() const;
  ::LabNetProt::Client::RfidSetPhaseMatrix* release_rfid_set_phase_matrix();
  ::LabNetProt::Client::RfidSetPhaseMatrix* mutable_rfid_set_phase_matrix();
  void set_allocated_rfid_set_phase_matrix(::LabNetProt::Client::RfidSetPhaseMatrix* rfid_set_phase_matrix);

  // .LabNetProt.Client.RfidSetSignalInversion rfid_set_signal_inversion = 8;
  bool has_rfid_set_signal_inversion() const;
  void clear_rfid_set_signal_inversion();
  static const int kRfidSetSignalInversionFieldNumber = 8;
  private:
  const ::LabNetProt::Client::RfidSetSignalInversion& _internal_rfid_set_signal_inversion() const;
  public:
  const ::LabNetProt::Client::RfidSetSignalInversion& rfid_set_signal_inversion() const;
  ::LabNetProt::Client::RfidSetSignalInversion* release_rfid_set_signal_inversion();
  ::LabNetProt::Client::RfidSetSignalInversion* mutable_rfid_set_signal_inversion();
  void set_allocated_rfid_set_signal_inversion(::LabNetProt::Client::RfidSetSignalInversion* rfid_set_signal_inversion);

  // .LabNetProt.Client.UartInit uart_init = 9;
  bool has_uart_init() const;
  void clear_uart_init();
  static const int kUartInitFieldNumber = 9;
  private:
  const ::LabNetProt::Client::UartInit& _internal_uart_init() const;
  public:
  const ::LabNetProt::Client::UartInit& uart_init() const;
  ::LabNetProt::Client::UartInit* release_uart_init();
  ::LabNetProt::Client::UartInit* mutable_uart_init();
  void set_allocated_uart_init(::LabNetProt::Client::UartInit* uart_init);

  // .LabNetProt.Client.UartWriteData uart_write_data = 10;
  bool has_uart_write_data() const;
  void clear_uart_write_data();
  static const int kUartWriteDataFieldNumber = 10;
  private:
  const ::LabNetProt::Client::UartWriteData& _internal_uart_write_data() const;
  public:
  const ::LabNetProt::Client::UartWriteData& uart_write_data() const;
  ::LabNetProt::Client::UartWriteData* release_uart_write_data();
  ::LabNetProt::Client::UartWriteData* mutable_uart_write_data();
  void set_allocated_uart_write_data(::LabNetProt::Client::UartWriteData* uart_write_data);

  // .LabNetProt.Client.DigitalOutSet digital_out_set = 11;
  bool has_digital_out_set() const;
  void clear_digital_out_set();
  static const int kDigitalOutSetFieldNumber = 11;
  private:
  const ::LabNetProt::Client::DigitalOutSet& _internal_digital_out_set() const;
  public:
  const ::LabNetProt::Client::DigitalOutSet& digital_out_set() const;
  ::LabNetProt::Client::DigitalOutSet* release_digital_out_set();
  ::LabNetProt::Client::DigitalOutSet* mutable_digital_out_set();
  void set_allocated_digital_out_set(::LabNetProt::Client::DigitalOutSet* digital_out_set);

  // .LabNetProt.Client.DigitalOutPulse digital_out_pulse = 12;
  bool has_digital_out_pulse() const;
  void clear_digital_out_pulse();
  static const int kDigitalOutPulseFieldNumber = 12;
  private:
  const ::LabNetProt::Client::DigitalOutPulse& _internal_digital_out_pulse() const;
  public:
  const ::LabNetProt::Client::DigitalOutPulse& digital_out_pulse() const;
  ::LabNetProt::Client::DigitalOutPulse* release_digital_out_pulse();
  ::LabNetProt::Client::DigitalOutPulse* mutable_digital_out_pulse();
  void set_allocated_digital_out_pulse(::LabNetProt::Client::DigitalOutPulse* digital_out_pulse);

  // .LabNetProt.Client.StartDigitalOutLoop start_digital_out_loop = 13;
  bool has_start_digital_out_loop() const;
  void clear_start_digital_out_loop();
  static const int kStartDigitalOutLoopFieldNumber = 13;
  private:
  const ::LabNetProt::Client::StartDigitalOutLoop& _internal_start_digital_out_loop() const;
  public:
  const ::LabNetProt::Client::StartDigitalOutLoop& start_digital_out_loop() const;
  ::LabNetProt::Client::StartDigitalOutLoop* release_start_digital_out_loop();
  ::LabNetProt::Client::StartDigitalOutLoop* mutable_start_digital_out_loop();
  void set_allocated_start_digital_out_loop(::LabNetProt::Client::StartDigitalOutLoop* start_digital_out_loop);

  // .LabNetProt.Client.StopDigitalOutLoop stop_digital_out_loop = 14;
  bool has_stop_digital_out_loop() const;
  void clear_stop_digital_out_loop();
  static const int kStopDigitalOutLoopFieldNumber = 14;
  private:
  const ::LabNetProt::Client::StopDigitalOutLoop& _internal_stop_digital_out_loop() const;
  public:
  const ::LabNetProt::Client::StopDigitalOutLoop& stop_digital_out_loop() const;
  ::LabNetProt::Client::StopDigitalOutLoop* release_stop_digital_out_loop();
  ::LabNetProt::Client::StopDigitalOutLoop* mutable_stop_digital_out_loop();
  void set_allocated_stop_digital_out_loop(::LabNetProt::Client::StopDigitalOutLoop* stop_digital_out_loop);

  void clear_client_message();
  ClientMessageCase client_message_case() const;
  // @@protoc_insertion_point(class_scope:LabNetProt.Client.ClientWrappedMessage)
 private:
  void set_has_reset();
  void set_has_id();
  void set_has_gpio_init();
  void set_has_gpio_init_digital_in();
  void set_has_gpio_init_digital_out();
  void set_has_rfid_init();
  void set_has_rfid_set_phase_matrix();
  void set_has_rfid_set_signal_inversion();
  void set_has_uart_init();
  void set_has_uart_write_data();
  void set_has_digital_out_set();
  void set_has_digital_out_pulse();
  void set_has_start_digital_out_loop();
  void set_has_stop_digital_out_loop();

  inline bool has_client_message() const;
  inline void clear_has_client_message();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union ClientMessageUnion {
    ClientMessageUnion() {}
    ::LabNetProt::Client::LabNetResetRequest* reset_;
    ::LabNetProt::Client::LabNetIdRequest* id_;
    ::LabNetProt::Client::GpioInit* gpio_init_;
    ::LabNetProt::Client::GpioInitDigitalIn* gpio_init_digital_in_;
    ::LabNetProt::Client::GpioInitDigitalOut* gpio_init_digital_out_;
    ::LabNetProt::Client::RfidInit* rfid_init_;
    ::LabNetProt::Client::RfidSetPhaseMatrix* rfid_set_phase_matrix_;
    ::LabNetProt::Client::RfidSetSignalInversion* rfid_set_signal_inversion_;
    ::LabNetProt::Client::UartInit* uart_init_;
    ::LabNetProt::Client::UartWriteData* uart_write_data_;
    ::LabNetProt::Client::DigitalOutSet* digital_out_set_;
    ::LabNetProt::Client::DigitalOutPulse* digital_out_pulse_;
    ::LabNetProt::Client::StartDigitalOutLoop* start_digital_out_loop_;
    ::LabNetProt::Client::StopDigitalOutLoop* stop_digital_out_loop_;
  } client_message_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_LabNetClient_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GpioInit

// -------------------------------------------------------------------

// GpioInitDigitalIn

// uint32 pin = 1;
inline void GpioInitDigitalIn::clear_pin() {
  pin_ = 0u;
}
inline ::google::protobuf::uint32 GpioInitDigitalIn::pin() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Client.GpioInitDigitalIn.pin)
  return pin_;
}
inline void GpioInitDigitalIn::set_pin(::google::protobuf::uint32 value) {
  
  pin_ = value;
  // @@protoc_insertion_point(field_set:LabNetProt.Client.GpioInitDigitalIn.pin)
}

// .LabNetProt.Client.GpioInitDigitalIn.Resistor resistor_state = 2;
inline void GpioInitDigitalIn::clear_resistor_state() {
  resistor_state_ = 0;
}
inline ::LabNetProt::Client::GpioInitDigitalIn_Resistor GpioInitDigitalIn::resistor_state() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Client.GpioInitDigitalIn.resistor_state)
  return static_cast< ::LabNetProt::Client::GpioInitDigitalIn_Resistor >(resistor_state_);
}
inline void GpioInitDigitalIn::set_resistor_state(::LabNetProt::Client::GpioInitDigitalIn_Resistor value) {
  
  resistor_state_ = value;
  // @@protoc_insertion_point(field_set:LabNetProt.Client.GpioInitDigitalIn.resistor_state)
}

// bool is_inverted = 3;
inline void GpioInitDigitalIn::clear_is_inverted() {
  is_inverted_ = false;
}
inline bool GpioInitDigitalIn::is_inverted() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Client.GpioInitDigitalIn.is_inverted)
  return is_inverted_;
}
inline void GpioInitDigitalIn::set_is_inverted(bool value) {
  
  is_inverted_ = value;
  // @@protoc_insertion_point(field_set:LabNetProt.Client.GpioInitDigitalIn.is_inverted)
}

// -------------------------------------------------------------------

// GpioInitDigitalOut

// uint32 pin = 1;
inline void GpioInitDigitalOut::clear_pin() {
  pin_ = 0u;
}
inline ::google::protobuf::uint32 GpioInitDigitalOut::pin() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Client.GpioInitDigitalOut.pin)
  return pin_;
}
inline void GpioInitDigitalOut::set_pin(::google::protobuf::uint32 value) {
  
  pin_ = value;
  // @@protoc_insertion_point(field_set:LabNetProt.Client.GpioInitDigitalOut.pin)
}

// bool is_inverted = 2;
inline void GpioInitDigitalOut::clear_is_inverted() {
  is_inverted_ = false;
}
inline bool GpioInitDigitalOut::is_inverted() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Client.GpioInitDigitalOut.is_inverted)
  return is_inverted_;
}
inline void GpioInitDigitalOut::set_is_inverted(bool value) {
  
  is_inverted_ = value;
  // @@protoc_insertion_point(field_set:LabNetProt.Client.GpioInitDigitalOut.is_inverted)
}

// -------------------------------------------------------------------

// RfidInit

// uint32 antenna_phase1 = 1;
inline void RfidInit::clear_antenna_phase1() {
  antenna_phase1_ = 0u;
}
inline ::google::protobuf::uint32 RfidInit::antenna_phase1() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Client.RfidInit.antenna_phase1)
  return antenna_phase1_;
}
inline void RfidInit::set_antenna_phase1(::google::protobuf::uint32 value) {
  
  antenna_phase1_ = value;
  // @@protoc_insertion_point(field_set:LabNetProt.Client.RfidInit.antenna_phase1)
}

// uint32 antenna_phase2 = 2;
inline void RfidInit::clear_antenna_phase2() {
  antenna_phase2_ = 0u;
}
inline ::google::protobuf::uint32 RfidInit::antenna_phase2() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Client.RfidInit.antenna_phase2)
  return antenna_phase2_;
}
inline void RfidInit::set_antenna_phase2(::google::protobuf::uint32 value) {
  
  antenna_phase2_ = value;
  // @@protoc_insertion_point(field_set:LabNetProt.Client.RfidInit.antenna_phase2)
}

// uint32 phase_duration = 3;
inline void RfidInit::clear_phase_duration() {
  phase_duration_ = 0u;
}
inline ::google::protobuf::uint32 RfidInit::phase_duration() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Client.RfidInit.phase_duration)
  return phase_duration_;
}
inline void RfidInit::set_phase_duration(::google::protobuf::uint32 value) {
  
  phase_duration_ = value;
  // @@protoc_insertion_point(field_set:LabNetProt.Client.RfidInit.phase_duration)
}

// bool inverted = 4;
inline void RfidInit::clear_inverted() {
  inverted_ = false;
}
inline bool RfidInit::inverted() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Client.RfidInit.inverted)
  return inverted_;
}
inline void RfidInit::set_inverted(bool value) {
  
  inverted_ = value;
  // @@protoc_insertion_point(field_set:LabNetProt.Client.RfidInit.inverted)
}

// -------------------------------------------------------------------

// RfidSetPhaseMatrix

// uint32 antenna_phase1 = 1;
inline void RfidSetPhaseMatrix::clear_antenna_phase1() {
  antenna_phase1_ = 0u;
}
inline ::google::protobuf::uint32 RfidSetPhaseMatrix::antenna_phase1() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Client.RfidSetPhaseMatrix.antenna_phase1)
  return antenna_phase1_;
}
inline void RfidSetPhaseMatrix::set_antenna_phase1(::google::protobuf::uint32 value) {
  
  antenna_phase1_ = value;
  // @@protoc_insertion_point(field_set:LabNetProt.Client.RfidSetPhaseMatrix.antenna_phase1)
}

// uint32 antenna_phase2 = 2;
inline void RfidSetPhaseMatrix::clear_antenna_phase2() {
  antenna_phase2_ = 0u;
}
inline ::google::protobuf::uint32 RfidSetPhaseMatrix::antenna_phase2() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Client.RfidSetPhaseMatrix.antenna_phase2)
  return antenna_phase2_;
}
inline void RfidSetPhaseMatrix::set_antenna_phase2(::google::protobuf::uint32 value) {
  
  antenna_phase2_ = value;
  // @@protoc_insertion_point(field_set:LabNetProt.Client.RfidSetPhaseMatrix.antenna_phase2)
}

// uint32 phase_duration = 3;
inline void RfidSetPhaseMatrix::clear_phase_duration() {
  phase_duration_ = 0u;
}
inline ::google::protobuf::uint32 RfidSetPhaseMatrix::phase_duration() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Client.RfidSetPhaseMatrix.phase_duration)
  return phase_duration_;
}
inline void RfidSetPhaseMatrix::set_phase_duration(::google::protobuf::uint32 value) {
  
  phase_duration_ = value;
  // @@protoc_insertion_point(field_set:LabNetProt.Client.RfidSetPhaseMatrix.phase_duration)
}

// -------------------------------------------------------------------

// RfidSetSignalInversion

// bool inverted = 1;
inline void RfidSetSignalInversion::clear_inverted() {
  inverted_ = false;
}
inline bool RfidSetSignalInversion::inverted() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Client.RfidSetSignalInversion.inverted)
  return inverted_;
}
inline void RfidSetSignalInversion::set_inverted(bool value) {
  
  inverted_ = value;
  // @@protoc_insertion_point(field_set:LabNetProt.Client.RfidSetSignalInversion.inverted)
}

// -------------------------------------------------------------------

// UartInit

// .LabNetProt.Uarts port = 1;
inline void UartInit::clear_port() {
  port_ = 0;
}
inline ::LabNetProt::Uarts UartInit::port() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Client.UartInit.port)
  return static_cast< ::LabNetProt::Uarts >(port_);
}
inline void UartInit::set_port(::LabNetProt::Uarts value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:LabNetProt.Client.UartInit.port)
}

// uint32 baud = 2;
inline void UartInit::clear_baud() {
  baud_ = 0u;
}
inline ::google::protobuf::uint32 UartInit::baud() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Client.UartInit.baud)
  return baud_;
}
inline void UartInit::set_baud(::google::protobuf::uint32 value) {
  
  baud_ = value;
  // @@protoc_insertion_point(field_set:LabNetProt.Client.UartInit.baud)
}

// -------------------------------------------------------------------

// UartWriteData

// .LabNetProt.Uarts port = 1;
inline void UartWriteData::clear_port() {
  port_ = 0;
}
inline ::LabNetProt::Uarts UartWriteData::port() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Client.UartWriteData.port)
  return static_cast< ::LabNetProt::Uarts >(port_);
}
inline void UartWriteData::set_port(::LabNetProt::Uarts value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:LabNetProt.Client.UartWriteData.port)
}

// bytes data = 2;
inline void UartWriteData::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UartWriteData::data() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Client.UartWriteData.data)
  return data_.GetNoArena();
}
inline void UartWriteData::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LabNetProt.Client.UartWriteData.data)
}
#if LANG_CXX11
inline void UartWriteData::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LabNetProt.Client.UartWriteData.data)
}
#endif
inline void UartWriteData::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LabNetProt.Client.UartWriteData.data)
}
inline void UartWriteData::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LabNetProt.Client.UartWriteData.data)
}
inline ::std::string* UartWriteData::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:LabNetProt.Client.UartWriteData.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UartWriteData::release_data() {
  // @@protoc_insertion_point(field_release:LabNetProt.Client.UartWriteData.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UartWriteData::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:LabNetProt.Client.UartWriteData.data)
}

// -------------------------------------------------------------------

// DigitalOutSet

// .LabNetProt.PinId id = 1;
inline bool DigitalOutSet::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::LabNetProt::PinId& DigitalOutSet::_internal_id() const {
  return *id_;
}
inline const ::LabNetProt::PinId& DigitalOutSet::id() const {
  const ::LabNetProt::PinId* p = id_;
  // @@protoc_insertion_point(field_get:LabNetProt.Client.DigitalOutSet.id)
  return p != NULL ? *p : *reinterpret_cast<const ::LabNetProt::PinId*>(
      &::LabNetProt::_PinId_default_instance_);
}
inline ::LabNetProt::PinId* DigitalOutSet::release_id() {
  // @@protoc_insertion_point(field_release:LabNetProt.Client.DigitalOutSet.id)
  
  ::LabNetProt::PinId* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::LabNetProt::PinId* DigitalOutSet::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::LabNetProt::PinId>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:LabNetProt.Client.DigitalOutSet.id)
  return id_;
}
inline void DigitalOutSet::set_allocated_id(::LabNetProt::PinId* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:LabNetProt.Client.DigitalOutSet.id)
}

// bool state = 2;
inline void DigitalOutSet::clear_state() {
  state_ = false;
}
inline bool DigitalOutSet::state() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Client.DigitalOutSet.state)
  return state_;
}
inline void DigitalOutSet::set_state(bool value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:LabNetProt.Client.DigitalOutSet.state)
}

// -------------------------------------------------------------------

// DigitalOutPulse

// .LabNetProt.PinId id = 1;
inline bool DigitalOutPulse::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::LabNetProt::PinId& DigitalOutPulse::_internal_id() const {
  return *id_;
}
inline const ::LabNetProt::PinId& DigitalOutPulse::id() const {
  const ::LabNetProt::PinId* p = id_;
  // @@protoc_insertion_point(field_get:LabNetProt.Client.DigitalOutPulse.id)
  return p != NULL ? *p : *reinterpret_cast<const ::LabNetProt::PinId*>(
      &::LabNetProt::_PinId_default_instance_);
}
inline ::LabNetProt::PinId* DigitalOutPulse::release_id() {
  // @@protoc_insertion_point(field_release:LabNetProt.Client.DigitalOutPulse.id)
  
  ::LabNetProt::PinId* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::LabNetProt::PinId* DigitalOutPulse::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::LabNetProt::PinId>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:LabNetProt.Client.DigitalOutPulse.id)
  return id_;
}
inline void DigitalOutPulse::set_allocated_id(::LabNetProt::PinId* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:LabNetProt.Client.DigitalOutPulse.id)
}

// uint32 high_duration = 2;
inline void DigitalOutPulse::clear_high_duration() {
  high_duration_ = 0u;
}
inline ::google::protobuf::uint32 DigitalOutPulse::high_duration() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Client.DigitalOutPulse.high_duration)
  return high_duration_;
}
inline void DigitalOutPulse::set_high_duration(::google::protobuf::uint32 value) {
  
  high_duration_ = value;
  // @@protoc_insertion_point(field_set:LabNetProt.Client.DigitalOutPulse.high_duration)
}

// uint32 low_duration = 3;
inline void DigitalOutPulse::clear_low_duration() {
  low_duration_ = 0u;
}
inline ::google::protobuf::uint32 DigitalOutPulse::low_duration() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Client.DigitalOutPulse.low_duration)
  return low_duration_;
}
inline void DigitalOutPulse::set_low_duration(::google::protobuf::uint32 value) {
  
  low_duration_ = value;
  // @@protoc_insertion_point(field_set:LabNetProt.Client.DigitalOutPulse.low_duration)
}

// uint32 pulses = 4;
inline void DigitalOutPulse::clear_pulses() {
  pulses_ = 0u;
}
inline ::google::protobuf::uint32 DigitalOutPulse::pulses() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Client.DigitalOutPulse.pulses)
  return pulses_;
}
inline void DigitalOutPulse::set_pulses(::google::protobuf::uint32 value) {
  
  pulses_ = value;
  // @@protoc_insertion_point(field_set:LabNetProt.Client.DigitalOutPulse.pulses)
}

// -------------------------------------------------------------------

// StartDigitalOutLoop_DigitalOutputParameter

// .LabNetProt.PinId id = 1;
inline bool StartDigitalOutLoop_DigitalOutputParameter::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::LabNetProt::PinId& StartDigitalOutLoop_DigitalOutputParameter::_internal_id() const {
  return *id_;
}
inline const ::LabNetProt::PinId& StartDigitalOutLoop_DigitalOutputParameter::id() const {
  const ::LabNetProt::PinId* p = id_;
  // @@protoc_insertion_point(field_get:LabNetProt.Client.StartDigitalOutLoop.DigitalOutputParameter.id)
  return p != NULL ? *p : *reinterpret_cast<const ::LabNetProt::PinId*>(
      &::LabNetProt::_PinId_default_instance_);
}
inline ::LabNetProt::PinId* StartDigitalOutLoop_DigitalOutputParameter::release_id() {
  // @@protoc_insertion_point(field_release:LabNetProt.Client.StartDigitalOutLoop.DigitalOutputParameter.id)
  
  ::LabNetProt::PinId* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::LabNetProt::PinId* StartDigitalOutLoop_DigitalOutputParameter::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::LabNetProt::PinId>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:LabNetProt.Client.StartDigitalOutLoop.DigitalOutputParameter.id)
  return id_;
}
inline void StartDigitalOutLoop_DigitalOutputParameter::set_allocated_id(::LabNetProt::PinId* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:LabNetProt.Client.StartDigitalOutLoop.DigitalOutputParameter.id)
}

// uint32 offset = 2;
inline void StartDigitalOutLoop_DigitalOutputParameter::clear_offset() {
  offset_ = 0u;
}
inline ::google::protobuf::uint32 StartDigitalOutLoop_DigitalOutputParameter::offset() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Client.StartDigitalOutLoop.DigitalOutputParameter.offset)
  return offset_;
}
inline void StartDigitalOutLoop_DigitalOutputParameter::set_offset(::google::protobuf::uint32 value) {
  
  offset_ = value;
  // @@protoc_insertion_point(field_set:LabNetProt.Client.StartDigitalOutLoop.DigitalOutputParameter.offset)
}

// uint32 duration = 3;
inline void StartDigitalOutLoop_DigitalOutputParameter::clear_duration() {
  duration_ = 0u;
}
inline ::google::protobuf::uint32 StartDigitalOutLoop_DigitalOutputParameter::duration() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Client.StartDigitalOutLoop.DigitalOutputParameter.duration)
  return duration_;
}
inline void StartDigitalOutLoop_DigitalOutputParameter::set_duration(::google::protobuf::uint32 value) {
  
  duration_ = value;
  // @@protoc_insertion_point(field_set:LabNetProt.Client.StartDigitalOutLoop.DigitalOutputParameter.duration)
}

// -------------------------------------------------------------------

// StartDigitalOutLoop

// string loop_name = 1;
inline void StartDigitalOutLoop::clear_loop_name() {
  loop_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StartDigitalOutLoop::loop_name() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Client.StartDigitalOutLoop.loop_name)
  return loop_name_.GetNoArena();
}
inline void StartDigitalOutLoop::set_loop_name(const ::std::string& value) {
  
  loop_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LabNetProt.Client.StartDigitalOutLoop.loop_name)
}
#if LANG_CXX11
inline void StartDigitalOutLoop::set_loop_name(::std::string&& value) {
  
  loop_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LabNetProt.Client.StartDigitalOutLoop.loop_name)
}
#endif
inline void StartDigitalOutLoop::set_loop_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  loop_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LabNetProt.Client.StartDigitalOutLoop.loop_name)
}
inline void StartDigitalOutLoop::set_loop_name(const char* value, size_t size) {
  
  loop_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LabNetProt.Client.StartDigitalOutLoop.loop_name)
}
inline ::std::string* StartDigitalOutLoop::mutable_loop_name() {
  
  // @@protoc_insertion_point(field_mutable:LabNetProt.Client.StartDigitalOutLoop.loop_name)
  return loop_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StartDigitalOutLoop::release_loop_name() {
  // @@protoc_insertion_point(field_release:LabNetProt.Client.StartDigitalOutLoop.loop_name)
  
  return loop_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StartDigitalOutLoop::set_allocated_loop_name(::std::string* loop_name) {
  if (loop_name != NULL) {
    
  } else {
    
  }
  loop_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), loop_name);
  // @@protoc_insertion_point(field_set_allocated:LabNetProt.Client.StartDigitalOutLoop.loop_name)
}

// uint32 loop_pause = 2;
inline void StartDigitalOutLoop::clear_loop_pause() {
  loop_pause_ = 0u;
}
inline ::google::protobuf::uint32 StartDigitalOutLoop::loop_pause() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Client.StartDigitalOutLoop.loop_pause)
  return loop_pause_;
}
inline void StartDigitalOutLoop::set_loop_pause(::google::protobuf::uint32 value) {
  
  loop_pause_ = value;
  // @@protoc_insertion_point(field_set:LabNetProt.Client.StartDigitalOutLoop.loop_pause)
}

// repeated .LabNetProt.Client.StartDigitalOutLoop.DigitalOutputParameter digital_outputs = 3;
inline int StartDigitalOutLoop::digital_outputs_size() const {
  return digital_outputs_.size();
}
inline void StartDigitalOutLoop::clear_digital_outputs() {
  digital_outputs_.Clear();
}
inline ::LabNetProt::Client::StartDigitalOutLoop_DigitalOutputParameter* StartDigitalOutLoop::mutable_digital_outputs(int index) {
  // @@protoc_insertion_point(field_mutable:LabNetProt.Client.StartDigitalOutLoop.digital_outputs)
  return digital_outputs_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::LabNetProt::Client::StartDigitalOutLoop_DigitalOutputParameter >*
StartDigitalOutLoop::mutable_digital_outputs() {
  // @@protoc_insertion_point(field_mutable_list:LabNetProt.Client.StartDigitalOutLoop.digital_outputs)
  return &digital_outputs_;
}
inline const ::LabNetProt::Client::StartDigitalOutLoop_DigitalOutputParameter& StartDigitalOutLoop::digital_outputs(int index) const {
  // @@protoc_insertion_point(field_get:LabNetProt.Client.StartDigitalOutLoop.digital_outputs)
  return digital_outputs_.Get(index);
}
inline ::LabNetProt::Client::StartDigitalOutLoop_DigitalOutputParameter* StartDigitalOutLoop::add_digital_outputs() {
  // @@protoc_insertion_point(field_add:LabNetProt.Client.StartDigitalOutLoop.digital_outputs)
  return digital_outputs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::LabNetProt::Client::StartDigitalOutLoop_DigitalOutputParameter >&
StartDigitalOutLoop::digital_outputs() const {
  // @@protoc_insertion_point(field_list:LabNetProt.Client.StartDigitalOutLoop.digital_outputs)
  return digital_outputs_;
}

// -------------------------------------------------------------------

// StopDigitalOutLoop

// string loop_name = 1;
inline void StopDigitalOutLoop::clear_loop_name() {
  loop_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StopDigitalOutLoop::loop_name() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Client.StopDigitalOutLoop.loop_name)
  return loop_name_.GetNoArena();
}
inline void StopDigitalOutLoop::set_loop_name(const ::std::string& value) {
  
  loop_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LabNetProt.Client.StopDigitalOutLoop.loop_name)
}
#if LANG_CXX11
inline void StopDigitalOutLoop::set_loop_name(::std::string&& value) {
  
  loop_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LabNetProt.Client.StopDigitalOutLoop.loop_name)
}
#endif
inline void StopDigitalOutLoop::set_loop_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  loop_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LabNetProt.Client.StopDigitalOutLoop.loop_name)
}
inline void StopDigitalOutLoop::set_loop_name(const char* value, size_t size) {
  
  loop_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LabNetProt.Client.StopDigitalOutLoop.loop_name)
}
inline ::std::string* StopDigitalOutLoop::mutable_loop_name() {
  
  // @@protoc_insertion_point(field_mutable:LabNetProt.Client.StopDigitalOutLoop.loop_name)
  return loop_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StopDigitalOutLoop::release_loop_name() {
  // @@protoc_insertion_point(field_release:LabNetProt.Client.StopDigitalOutLoop.loop_name)
  
  return loop_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StopDigitalOutLoop::set_allocated_loop_name(::std::string* loop_name) {
  if (loop_name != NULL) {
    
  } else {
    
  }
  loop_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), loop_name);
  // @@protoc_insertion_point(field_set_allocated:LabNetProt.Client.StopDigitalOutLoop.loop_name)
}

// -------------------------------------------------------------------

// LabNetResetRequest

// -------------------------------------------------------------------

// LabNetIdRequest

// -------------------------------------------------------------------

// ClientWrappedMessage

// .LabNetProt.Client.LabNetResetRequest reset = 1;
inline bool ClientWrappedMessage::has_reset() const {
  return client_message_case() == kReset;
}
inline void ClientWrappedMessage::set_has_reset() {
  _oneof_case_[0] = kReset;
}
inline void ClientWrappedMessage::clear_reset() {
  if (has_reset()) {
    delete client_message_.reset_;
    clear_has_client_message();
  }
}
inline const ::LabNetProt::Client::LabNetResetRequest& ClientWrappedMessage::_internal_reset() const {
  return *client_message_.reset_;
}
inline ::LabNetProt::Client::LabNetResetRequest* ClientWrappedMessage::release_reset() {
  // @@protoc_insertion_point(field_release:LabNetProt.Client.ClientWrappedMessage.reset)
  if (has_reset()) {
    clear_has_client_message();
      ::LabNetProt::Client::LabNetResetRequest* temp = client_message_.reset_;
    client_message_.reset_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::LabNetProt::Client::LabNetResetRequest& ClientWrappedMessage::reset() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Client.ClientWrappedMessage.reset)
  return has_reset()
      ? *client_message_.reset_
      : *reinterpret_cast< ::LabNetProt::Client::LabNetResetRequest*>(&::LabNetProt::Client::_LabNetResetRequest_default_instance_);
}
inline ::LabNetProt::Client::LabNetResetRequest* ClientWrappedMessage::mutable_reset() {
  if (!has_reset()) {
    clear_client_message();
    set_has_reset();
    client_message_.reset_ = CreateMaybeMessage< ::LabNetProt::Client::LabNetResetRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:LabNetProt.Client.ClientWrappedMessage.reset)
  return client_message_.reset_;
}

// .LabNetProt.Client.LabNetIdRequest id = 2;
inline bool ClientWrappedMessage::has_id() const {
  return client_message_case() == kId;
}
inline void ClientWrappedMessage::set_has_id() {
  _oneof_case_[0] = kId;
}
inline void ClientWrappedMessage::clear_id() {
  if (has_id()) {
    delete client_message_.id_;
    clear_has_client_message();
  }
}
inline const ::LabNetProt::Client::LabNetIdRequest& ClientWrappedMessage::_internal_id() const {
  return *client_message_.id_;
}
inline ::LabNetProt::Client::LabNetIdRequest* ClientWrappedMessage::release_id() {
  // @@protoc_insertion_point(field_release:LabNetProt.Client.ClientWrappedMessage.id)
  if (has_id()) {
    clear_has_client_message();
      ::LabNetProt::Client::LabNetIdRequest* temp = client_message_.id_;
    client_message_.id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::LabNetProt::Client::LabNetIdRequest& ClientWrappedMessage::id() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Client.ClientWrappedMessage.id)
  return has_id()
      ? *client_message_.id_
      : *reinterpret_cast< ::LabNetProt::Client::LabNetIdRequest*>(&::LabNetProt::Client::_LabNetIdRequest_default_instance_);
}
inline ::LabNetProt::Client::LabNetIdRequest* ClientWrappedMessage::mutable_id() {
  if (!has_id()) {
    clear_client_message();
    set_has_id();
    client_message_.id_ = CreateMaybeMessage< ::LabNetProt::Client::LabNetIdRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:LabNetProt.Client.ClientWrappedMessage.id)
  return client_message_.id_;
}

// .LabNetProt.Client.GpioInit gpio_init = 3;
inline bool ClientWrappedMessage::has_gpio_init() const {
  return client_message_case() == kGpioInit;
}
inline void ClientWrappedMessage::set_has_gpio_init() {
  _oneof_case_[0] = kGpioInit;
}
inline void ClientWrappedMessage::clear_gpio_init() {
  if (has_gpio_init()) {
    delete client_message_.gpio_init_;
    clear_has_client_message();
  }
}
inline const ::LabNetProt::Client::GpioInit& ClientWrappedMessage::_internal_gpio_init() const {
  return *client_message_.gpio_init_;
}
inline ::LabNetProt::Client::GpioInit* ClientWrappedMessage::release_gpio_init() {
  // @@protoc_insertion_point(field_release:LabNetProt.Client.ClientWrappedMessage.gpio_init)
  if (has_gpio_init()) {
    clear_has_client_message();
      ::LabNetProt::Client::GpioInit* temp = client_message_.gpio_init_;
    client_message_.gpio_init_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::LabNetProt::Client::GpioInit& ClientWrappedMessage::gpio_init() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Client.ClientWrappedMessage.gpio_init)
  return has_gpio_init()
      ? *client_message_.gpio_init_
      : *reinterpret_cast< ::LabNetProt::Client::GpioInit*>(&::LabNetProt::Client::_GpioInit_default_instance_);
}
inline ::LabNetProt::Client::GpioInit* ClientWrappedMessage::mutable_gpio_init() {
  if (!has_gpio_init()) {
    clear_client_message();
    set_has_gpio_init();
    client_message_.gpio_init_ = CreateMaybeMessage< ::LabNetProt::Client::GpioInit >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:LabNetProt.Client.ClientWrappedMessage.gpio_init)
  return client_message_.gpio_init_;
}

// .LabNetProt.Client.GpioInitDigitalIn gpio_init_digital_in = 4;
inline bool ClientWrappedMessage::has_gpio_init_digital_in() const {
  return client_message_case() == kGpioInitDigitalIn;
}
inline void ClientWrappedMessage::set_has_gpio_init_digital_in() {
  _oneof_case_[0] = kGpioInitDigitalIn;
}
inline void ClientWrappedMessage::clear_gpio_init_digital_in() {
  if (has_gpio_init_digital_in()) {
    delete client_message_.gpio_init_digital_in_;
    clear_has_client_message();
  }
}
inline const ::LabNetProt::Client::GpioInitDigitalIn& ClientWrappedMessage::_internal_gpio_init_digital_in() const {
  return *client_message_.gpio_init_digital_in_;
}
inline ::LabNetProt::Client::GpioInitDigitalIn* ClientWrappedMessage::release_gpio_init_digital_in() {
  // @@protoc_insertion_point(field_release:LabNetProt.Client.ClientWrappedMessage.gpio_init_digital_in)
  if (has_gpio_init_digital_in()) {
    clear_has_client_message();
      ::LabNetProt::Client::GpioInitDigitalIn* temp = client_message_.gpio_init_digital_in_;
    client_message_.gpio_init_digital_in_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::LabNetProt::Client::GpioInitDigitalIn& ClientWrappedMessage::gpio_init_digital_in() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Client.ClientWrappedMessage.gpio_init_digital_in)
  return has_gpio_init_digital_in()
      ? *client_message_.gpio_init_digital_in_
      : *reinterpret_cast< ::LabNetProt::Client::GpioInitDigitalIn*>(&::LabNetProt::Client::_GpioInitDigitalIn_default_instance_);
}
inline ::LabNetProt::Client::GpioInitDigitalIn* ClientWrappedMessage::mutable_gpio_init_digital_in() {
  if (!has_gpio_init_digital_in()) {
    clear_client_message();
    set_has_gpio_init_digital_in();
    client_message_.gpio_init_digital_in_ = CreateMaybeMessage< ::LabNetProt::Client::GpioInitDigitalIn >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:LabNetProt.Client.ClientWrappedMessage.gpio_init_digital_in)
  return client_message_.gpio_init_digital_in_;
}

// .LabNetProt.Client.GpioInitDigitalOut gpio_init_digital_out = 5;
inline bool ClientWrappedMessage::has_gpio_init_digital_out() const {
  return client_message_case() == kGpioInitDigitalOut;
}
inline void ClientWrappedMessage::set_has_gpio_init_digital_out() {
  _oneof_case_[0] = kGpioInitDigitalOut;
}
inline void ClientWrappedMessage::clear_gpio_init_digital_out() {
  if (has_gpio_init_digital_out()) {
    delete client_message_.gpio_init_digital_out_;
    clear_has_client_message();
  }
}
inline const ::LabNetProt::Client::GpioInitDigitalOut& ClientWrappedMessage::_internal_gpio_init_digital_out() const {
  return *client_message_.gpio_init_digital_out_;
}
inline ::LabNetProt::Client::GpioInitDigitalOut* ClientWrappedMessage::release_gpio_init_digital_out() {
  // @@protoc_insertion_point(field_release:LabNetProt.Client.ClientWrappedMessage.gpio_init_digital_out)
  if (has_gpio_init_digital_out()) {
    clear_has_client_message();
      ::LabNetProt::Client::GpioInitDigitalOut* temp = client_message_.gpio_init_digital_out_;
    client_message_.gpio_init_digital_out_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::LabNetProt::Client::GpioInitDigitalOut& ClientWrappedMessage::gpio_init_digital_out() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Client.ClientWrappedMessage.gpio_init_digital_out)
  return has_gpio_init_digital_out()
      ? *client_message_.gpio_init_digital_out_
      : *reinterpret_cast< ::LabNetProt::Client::GpioInitDigitalOut*>(&::LabNetProt::Client::_GpioInitDigitalOut_default_instance_);
}
inline ::LabNetProt::Client::GpioInitDigitalOut* ClientWrappedMessage::mutable_gpio_init_digital_out() {
  if (!has_gpio_init_digital_out()) {
    clear_client_message();
    set_has_gpio_init_digital_out();
    client_message_.gpio_init_digital_out_ = CreateMaybeMessage< ::LabNetProt::Client::GpioInitDigitalOut >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:LabNetProt.Client.ClientWrappedMessage.gpio_init_digital_out)
  return client_message_.gpio_init_digital_out_;
}

// .LabNetProt.Client.RfidInit rfid_init = 6;
inline bool ClientWrappedMessage::has_rfid_init() const {
  return client_message_case() == kRfidInit;
}
inline void ClientWrappedMessage::set_has_rfid_init() {
  _oneof_case_[0] = kRfidInit;
}
inline void ClientWrappedMessage::clear_rfid_init() {
  if (has_rfid_init()) {
    delete client_message_.rfid_init_;
    clear_has_client_message();
  }
}
inline const ::LabNetProt::Client::RfidInit& ClientWrappedMessage::_internal_rfid_init() const {
  return *client_message_.rfid_init_;
}
inline ::LabNetProt::Client::RfidInit* ClientWrappedMessage::release_rfid_init() {
  // @@protoc_insertion_point(field_release:LabNetProt.Client.ClientWrappedMessage.rfid_init)
  if (has_rfid_init()) {
    clear_has_client_message();
      ::LabNetProt::Client::RfidInit* temp = client_message_.rfid_init_;
    client_message_.rfid_init_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::LabNetProt::Client::RfidInit& ClientWrappedMessage::rfid_init() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Client.ClientWrappedMessage.rfid_init)
  return has_rfid_init()
      ? *client_message_.rfid_init_
      : *reinterpret_cast< ::LabNetProt::Client::RfidInit*>(&::LabNetProt::Client::_RfidInit_default_instance_);
}
inline ::LabNetProt::Client::RfidInit* ClientWrappedMessage::mutable_rfid_init() {
  if (!has_rfid_init()) {
    clear_client_message();
    set_has_rfid_init();
    client_message_.rfid_init_ = CreateMaybeMessage< ::LabNetProt::Client::RfidInit >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:LabNetProt.Client.ClientWrappedMessage.rfid_init)
  return client_message_.rfid_init_;
}

// .LabNetProt.Client.RfidSetPhaseMatrix rfid_set_phase_matrix = 7;
inline bool ClientWrappedMessage::has_rfid_set_phase_matrix() const {
  return client_message_case() == kRfidSetPhaseMatrix;
}
inline void ClientWrappedMessage::set_has_rfid_set_phase_matrix() {
  _oneof_case_[0] = kRfidSetPhaseMatrix;
}
inline void ClientWrappedMessage::clear_rfid_set_phase_matrix() {
  if (has_rfid_set_phase_matrix()) {
    delete client_message_.rfid_set_phase_matrix_;
    clear_has_client_message();
  }
}
inline const ::LabNetProt::Client::RfidSetPhaseMatrix& ClientWrappedMessage::_internal_rfid_set_phase_matrix() const {
  return *client_message_.rfid_set_phase_matrix_;
}
inline ::LabNetProt::Client::RfidSetPhaseMatrix* ClientWrappedMessage::release_rfid_set_phase_matrix() {
  // @@protoc_insertion_point(field_release:LabNetProt.Client.ClientWrappedMessage.rfid_set_phase_matrix)
  if (has_rfid_set_phase_matrix()) {
    clear_has_client_message();
      ::LabNetProt::Client::RfidSetPhaseMatrix* temp = client_message_.rfid_set_phase_matrix_;
    client_message_.rfid_set_phase_matrix_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::LabNetProt::Client::RfidSetPhaseMatrix& ClientWrappedMessage::rfid_set_phase_matrix() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Client.ClientWrappedMessage.rfid_set_phase_matrix)
  return has_rfid_set_phase_matrix()
      ? *client_message_.rfid_set_phase_matrix_
      : *reinterpret_cast< ::LabNetProt::Client::RfidSetPhaseMatrix*>(&::LabNetProt::Client::_RfidSetPhaseMatrix_default_instance_);
}
inline ::LabNetProt::Client::RfidSetPhaseMatrix* ClientWrappedMessage::mutable_rfid_set_phase_matrix() {
  if (!has_rfid_set_phase_matrix()) {
    clear_client_message();
    set_has_rfid_set_phase_matrix();
    client_message_.rfid_set_phase_matrix_ = CreateMaybeMessage< ::LabNetProt::Client::RfidSetPhaseMatrix >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:LabNetProt.Client.ClientWrappedMessage.rfid_set_phase_matrix)
  return client_message_.rfid_set_phase_matrix_;
}

// .LabNetProt.Client.RfidSetSignalInversion rfid_set_signal_inversion = 8;
inline bool ClientWrappedMessage::has_rfid_set_signal_inversion() const {
  return client_message_case() == kRfidSetSignalInversion;
}
inline void ClientWrappedMessage::set_has_rfid_set_signal_inversion() {
  _oneof_case_[0] = kRfidSetSignalInversion;
}
inline void ClientWrappedMessage::clear_rfid_set_signal_inversion() {
  if (has_rfid_set_signal_inversion()) {
    delete client_message_.rfid_set_signal_inversion_;
    clear_has_client_message();
  }
}
inline const ::LabNetProt::Client::RfidSetSignalInversion& ClientWrappedMessage::_internal_rfid_set_signal_inversion() const {
  return *client_message_.rfid_set_signal_inversion_;
}
inline ::LabNetProt::Client::RfidSetSignalInversion* ClientWrappedMessage::release_rfid_set_signal_inversion() {
  // @@protoc_insertion_point(field_release:LabNetProt.Client.ClientWrappedMessage.rfid_set_signal_inversion)
  if (has_rfid_set_signal_inversion()) {
    clear_has_client_message();
      ::LabNetProt::Client::RfidSetSignalInversion* temp = client_message_.rfid_set_signal_inversion_;
    client_message_.rfid_set_signal_inversion_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::LabNetProt::Client::RfidSetSignalInversion& ClientWrappedMessage::rfid_set_signal_inversion() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Client.ClientWrappedMessage.rfid_set_signal_inversion)
  return has_rfid_set_signal_inversion()
      ? *client_message_.rfid_set_signal_inversion_
      : *reinterpret_cast< ::LabNetProt::Client::RfidSetSignalInversion*>(&::LabNetProt::Client::_RfidSetSignalInversion_default_instance_);
}
inline ::LabNetProt::Client::RfidSetSignalInversion* ClientWrappedMessage::mutable_rfid_set_signal_inversion() {
  if (!has_rfid_set_signal_inversion()) {
    clear_client_message();
    set_has_rfid_set_signal_inversion();
    client_message_.rfid_set_signal_inversion_ = CreateMaybeMessage< ::LabNetProt::Client::RfidSetSignalInversion >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:LabNetProt.Client.ClientWrappedMessage.rfid_set_signal_inversion)
  return client_message_.rfid_set_signal_inversion_;
}

// .LabNetProt.Client.UartInit uart_init = 9;
inline bool ClientWrappedMessage::has_uart_init() const {
  return client_message_case() == kUartInit;
}
inline void ClientWrappedMessage::set_has_uart_init() {
  _oneof_case_[0] = kUartInit;
}
inline void ClientWrappedMessage::clear_uart_init() {
  if (has_uart_init()) {
    delete client_message_.uart_init_;
    clear_has_client_message();
  }
}
inline const ::LabNetProt::Client::UartInit& ClientWrappedMessage::_internal_uart_init() const {
  return *client_message_.uart_init_;
}
inline ::LabNetProt::Client::UartInit* ClientWrappedMessage::release_uart_init() {
  // @@protoc_insertion_point(field_release:LabNetProt.Client.ClientWrappedMessage.uart_init)
  if (has_uart_init()) {
    clear_has_client_message();
      ::LabNetProt::Client::UartInit* temp = client_message_.uart_init_;
    client_message_.uart_init_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::LabNetProt::Client::UartInit& ClientWrappedMessage::uart_init() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Client.ClientWrappedMessage.uart_init)
  return has_uart_init()
      ? *client_message_.uart_init_
      : *reinterpret_cast< ::LabNetProt::Client::UartInit*>(&::LabNetProt::Client::_UartInit_default_instance_);
}
inline ::LabNetProt::Client::UartInit* ClientWrappedMessage::mutable_uart_init() {
  if (!has_uart_init()) {
    clear_client_message();
    set_has_uart_init();
    client_message_.uart_init_ = CreateMaybeMessage< ::LabNetProt::Client::UartInit >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:LabNetProt.Client.ClientWrappedMessage.uart_init)
  return client_message_.uart_init_;
}

// .LabNetProt.Client.UartWriteData uart_write_data = 10;
inline bool ClientWrappedMessage::has_uart_write_data() const {
  return client_message_case() == kUartWriteData;
}
inline void ClientWrappedMessage::set_has_uart_write_data() {
  _oneof_case_[0] = kUartWriteData;
}
inline void ClientWrappedMessage::clear_uart_write_data() {
  if (has_uart_write_data()) {
    delete client_message_.uart_write_data_;
    clear_has_client_message();
  }
}
inline const ::LabNetProt::Client::UartWriteData& ClientWrappedMessage::_internal_uart_write_data() const {
  return *client_message_.uart_write_data_;
}
inline ::LabNetProt::Client::UartWriteData* ClientWrappedMessage::release_uart_write_data() {
  // @@protoc_insertion_point(field_release:LabNetProt.Client.ClientWrappedMessage.uart_write_data)
  if (has_uart_write_data()) {
    clear_has_client_message();
      ::LabNetProt::Client::UartWriteData* temp = client_message_.uart_write_data_;
    client_message_.uart_write_data_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::LabNetProt::Client::UartWriteData& ClientWrappedMessage::uart_write_data() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Client.ClientWrappedMessage.uart_write_data)
  return has_uart_write_data()
      ? *client_message_.uart_write_data_
      : *reinterpret_cast< ::LabNetProt::Client::UartWriteData*>(&::LabNetProt::Client::_UartWriteData_default_instance_);
}
inline ::LabNetProt::Client::UartWriteData* ClientWrappedMessage::mutable_uart_write_data() {
  if (!has_uart_write_data()) {
    clear_client_message();
    set_has_uart_write_data();
    client_message_.uart_write_data_ = CreateMaybeMessage< ::LabNetProt::Client::UartWriteData >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:LabNetProt.Client.ClientWrappedMessage.uart_write_data)
  return client_message_.uart_write_data_;
}

// .LabNetProt.Client.DigitalOutSet digital_out_set = 11;
inline bool ClientWrappedMessage::has_digital_out_set() const {
  return client_message_case() == kDigitalOutSet;
}
inline void ClientWrappedMessage::set_has_digital_out_set() {
  _oneof_case_[0] = kDigitalOutSet;
}
inline void ClientWrappedMessage::clear_digital_out_set() {
  if (has_digital_out_set()) {
    delete client_message_.digital_out_set_;
    clear_has_client_message();
  }
}
inline const ::LabNetProt::Client::DigitalOutSet& ClientWrappedMessage::_internal_digital_out_set() const {
  return *client_message_.digital_out_set_;
}
inline ::LabNetProt::Client::DigitalOutSet* ClientWrappedMessage::release_digital_out_set() {
  // @@protoc_insertion_point(field_release:LabNetProt.Client.ClientWrappedMessage.digital_out_set)
  if (has_digital_out_set()) {
    clear_has_client_message();
      ::LabNetProt::Client::DigitalOutSet* temp = client_message_.digital_out_set_;
    client_message_.digital_out_set_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::LabNetProt::Client::DigitalOutSet& ClientWrappedMessage::digital_out_set() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Client.ClientWrappedMessage.digital_out_set)
  return has_digital_out_set()
      ? *client_message_.digital_out_set_
      : *reinterpret_cast< ::LabNetProt::Client::DigitalOutSet*>(&::LabNetProt::Client::_DigitalOutSet_default_instance_);
}
inline ::LabNetProt::Client::DigitalOutSet* ClientWrappedMessage::mutable_digital_out_set() {
  if (!has_digital_out_set()) {
    clear_client_message();
    set_has_digital_out_set();
    client_message_.digital_out_set_ = CreateMaybeMessage< ::LabNetProt::Client::DigitalOutSet >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:LabNetProt.Client.ClientWrappedMessage.digital_out_set)
  return client_message_.digital_out_set_;
}

// .LabNetProt.Client.DigitalOutPulse digital_out_pulse = 12;
inline bool ClientWrappedMessage::has_digital_out_pulse() const {
  return client_message_case() == kDigitalOutPulse;
}
inline void ClientWrappedMessage::set_has_digital_out_pulse() {
  _oneof_case_[0] = kDigitalOutPulse;
}
inline void ClientWrappedMessage::clear_digital_out_pulse() {
  if (has_digital_out_pulse()) {
    delete client_message_.digital_out_pulse_;
    clear_has_client_message();
  }
}
inline const ::LabNetProt::Client::DigitalOutPulse& ClientWrappedMessage::_internal_digital_out_pulse() const {
  return *client_message_.digital_out_pulse_;
}
inline ::LabNetProt::Client::DigitalOutPulse* ClientWrappedMessage::release_digital_out_pulse() {
  // @@protoc_insertion_point(field_release:LabNetProt.Client.ClientWrappedMessage.digital_out_pulse)
  if (has_digital_out_pulse()) {
    clear_has_client_message();
      ::LabNetProt::Client::DigitalOutPulse* temp = client_message_.digital_out_pulse_;
    client_message_.digital_out_pulse_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::LabNetProt::Client::DigitalOutPulse& ClientWrappedMessage::digital_out_pulse() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Client.ClientWrappedMessage.digital_out_pulse)
  return has_digital_out_pulse()
      ? *client_message_.digital_out_pulse_
      : *reinterpret_cast< ::LabNetProt::Client::DigitalOutPulse*>(&::LabNetProt::Client::_DigitalOutPulse_default_instance_);
}
inline ::LabNetProt::Client::DigitalOutPulse* ClientWrappedMessage::mutable_digital_out_pulse() {
  if (!has_digital_out_pulse()) {
    clear_client_message();
    set_has_digital_out_pulse();
    client_message_.digital_out_pulse_ = CreateMaybeMessage< ::LabNetProt::Client::DigitalOutPulse >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:LabNetProt.Client.ClientWrappedMessage.digital_out_pulse)
  return client_message_.digital_out_pulse_;
}

// .LabNetProt.Client.StartDigitalOutLoop start_digital_out_loop = 13;
inline bool ClientWrappedMessage::has_start_digital_out_loop() const {
  return client_message_case() == kStartDigitalOutLoop;
}
inline void ClientWrappedMessage::set_has_start_digital_out_loop() {
  _oneof_case_[0] = kStartDigitalOutLoop;
}
inline void ClientWrappedMessage::clear_start_digital_out_loop() {
  if (has_start_digital_out_loop()) {
    delete client_message_.start_digital_out_loop_;
    clear_has_client_message();
  }
}
inline const ::LabNetProt::Client::StartDigitalOutLoop& ClientWrappedMessage::_internal_start_digital_out_loop() const {
  return *client_message_.start_digital_out_loop_;
}
inline ::LabNetProt::Client::StartDigitalOutLoop* ClientWrappedMessage::release_start_digital_out_loop() {
  // @@protoc_insertion_point(field_release:LabNetProt.Client.ClientWrappedMessage.start_digital_out_loop)
  if (has_start_digital_out_loop()) {
    clear_has_client_message();
      ::LabNetProt::Client::StartDigitalOutLoop* temp = client_message_.start_digital_out_loop_;
    client_message_.start_digital_out_loop_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::LabNetProt::Client::StartDigitalOutLoop& ClientWrappedMessage::start_digital_out_loop() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Client.ClientWrappedMessage.start_digital_out_loop)
  return has_start_digital_out_loop()
      ? *client_message_.start_digital_out_loop_
      : *reinterpret_cast< ::LabNetProt::Client::StartDigitalOutLoop*>(&::LabNetProt::Client::_StartDigitalOutLoop_default_instance_);
}
inline ::LabNetProt::Client::StartDigitalOutLoop* ClientWrappedMessage::mutable_start_digital_out_loop() {
  if (!has_start_digital_out_loop()) {
    clear_client_message();
    set_has_start_digital_out_loop();
    client_message_.start_digital_out_loop_ = CreateMaybeMessage< ::LabNetProt::Client::StartDigitalOutLoop >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:LabNetProt.Client.ClientWrappedMessage.start_digital_out_loop)
  return client_message_.start_digital_out_loop_;
}

// .LabNetProt.Client.StopDigitalOutLoop stop_digital_out_loop = 14;
inline bool ClientWrappedMessage::has_stop_digital_out_loop() const {
  return client_message_case() == kStopDigitalOutLoop;
}
inline void ClientWrappedMessage::set_has_stop_digital_out_loop() {
  _oneof_case_[0] = kStopDigitalOutLoop;
}
inline void ClientWrappedMessage::clear_stop_digital_out_loop() {
  if (has_stop_digital_out_loop()) {
    delete client_message_.stop_digital_out_loop_;
    clear_has_client_message();
  }
}
inline const ::LabNetProt::Client::StopDigitalOutLoop& ClientWrappedMessage::_internal_stop_digital_out_loop() const {
  return *client_message_.stop_digital_out_loop_;
}
inline ::LabNetProt::Client::StopDigitalOutLoop* ClientWrappedMessage::release_stop_digital_out_loop() {
  // @@protoc_insertion_point(field_release:LabNetProt.Client.ClientWrappedMessage.stop_digital_out_loop)
  if (has_stop_digital_out_loop()) {
    clear_has_client_message();
      ::LabNetProt::Client::StopDigitalOutLoop* temp = client_message_.stop_digital_out_loop_;
    client_message_.stop_digital_out_loop_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::LabNetProt::Client::StopDigitalOutLoop& ClientWrappedMessage::stop_digital_out_loop() const {
  // @@protoc_insertion_point(field_get:LabNetProt.Client.ClientWrappedMessage.stop_digital_out_loop)
  return has_stop_digital_out_loop()
      ? *client_message_.stop_digital_out_loop_
      : *reinterpret_cast< ::LabNetProt::Client::StopDigitalOutLoop*>(&::LabNetProt::Client::_StopDigitalOutLoop_default_instance_);
}
inline ::LabNetProt::Client::StopDigitalOutLoop* ClientWrappedMessage::mutable_stop_digital_out_loop() {
  if (!has_stop_digital_out_loop()) {
    clear_client_message();
    set_has_stop_digital_out_loop();
    client_message_.stop_digital_out_loop_ = CreateMaybeMessage< ::LabNetProt::Client::StopDigitalOutLoop >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:LabNetProt.Client.ClientWrappedMessage.stop_digital_out_loop)
  return client_message_.stop_digital_out_loop_;
}

inline bool ClientWrappedMessage::has_client_message() const {
  return client_message_case() != CLIENT_MESSAGE_NOT_SET;
}
inline void ClientWrappedMessage::clear_has_client_message() {
  _oneof_case_[0] = CLIENT_MESSAGE_NOT_SET;
}
inline ClientWrappedMessage::ClientMessageCase ClientWrappedMessage::client_message_case() const {
  return ClientWrappedMessage::ClientMessageCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Client
}  // namespace LabNetProt

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::LabNetProt::Client::GpioInitDigitalIn_Resistor> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::LabNetProt::Client::GpioInitDigitalIn_Resistor>() {
  return ::LabNetProt::Client::GpioInitDigitalIn_Resistor_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_LabNetClient_2eproto
